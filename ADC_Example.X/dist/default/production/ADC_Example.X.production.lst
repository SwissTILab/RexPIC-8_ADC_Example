

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Sat Sep 09 15:08:32 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F1517
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext,global,class=STRCODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    19                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    20                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    27                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    29                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    31                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,delta=2
    38                           	psect	text1_split_1,local,class=CODE,merge=1,delta=2
    39                           	dabs	1,0x7E,2
    40  0000                     
    41                           ; Version 1.41
    42                           ; Generated 25/01/2017 GMT
    43                           ; 
    44                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    45                           ; All rights reserved.
    46                           ; 
    47                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    48                           ; 
    49                           ; Redistribution and use in source and binary forms, with or without modification, are
    50                           ; permitted provided that the following conditions are met:
    51                           ; 
    52                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    53                           ;        conditions and the following disclaimer.
    54                           ; 
    55                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    56                           ;        of conditions and the following disclaimer in the documentation and/or other
    57                           ;        materials provided with the distribution.
    58                           ; 
    59                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    60                           ;        software without specific prior written permission.
    61                           ; 
    62                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    63                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    64                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    65                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    66                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    67                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    68                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    69                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    70                           ; 
    71                           ; 
    72                           ; Code-generator required, PIC16F1517 Definitions
    73                           ; 
    74                           ; SFR Addresses
    75  0000                     	;# 
    76  0001                     	;# 
    77  0002                     	;# 
    78  0003                     	;# 
    79  0004                     	;# 
    80  0005                     	;# 
    81  0006                     	;# 
    82  0007                     	;# 
    83  0008                     	;# 
    84  0009                     	;# 
    85  000A                     	;# 
    86  000B                     	;# 
    87  000C                     	;# 
    88  000D                     	;# 
    89  000E                     	;# 
    90  000F                     	;# 
    91  0010                     	;# 
    92  0011                     	;# 
    93  0012                     	;# 
    94  0015                     	;# 
    95  0016                     	;# 
    96  0016                     	;# 
    97  0017                     	;# 
    98  0018                     	;# 
    99  0019                     	;# 
   100  001A                     	;# 
   101  001B                     	;# 
   102  001C                     	;# 
   103  008C                     	;# 
   104  008D                     	;# 
   105  008E                     	;# 
   106  008F                     	;# 
   107  0090                     	;# 
   108  0091                     	;# 
   109  0092                     	;# 
   110  0095                     	;# 
   111  0096                     	;# 
   112  0097                     	;# 
   113  0099                     	;# 
   114  009A                     	;# 
   115  009B                     	;# 
   116  009B                     	;# 
   117  009C                     	;# 
   118  009D                     	;# 
   119  009E                     	;# 
   120  010C                     	;# 
   121  010D                     	;# 
   122  010E                     	;# 
   123  010F                     	;# 
   124  0110                     	;# 
   125  0116                     	;# 
   126  0117                     	;# 
   127  011D                     	;# 
   128  018C                     	;# 
   129  018D                     	;# 
   130  018E                     	;# 
   131  018F                     	;# 
   132  0190                     	;# 
   133  0191                     	;# 
   134  0191                     	;# 
   135  0192                     	;# 
   136  0193                     	;# 
   137  0193                     	;# 
   138  0194                     	;# 
   139  0195                     	;# 
   140  0196                     	;# 
   141  0197                     	;# 
   142  0199                     	;# 
   143  019A                     	;# 
   144  019B                     	;# 
   145  019B                     	;# 
   146  019B                     	;# 
   147  019B                     	;# 
   148  019C                     	;# 
   149  019C                     	;# 
   150  019D                     	;# 
   151  019E                     	;# 
   152  019F                     	;# 
   153  020D                     	;# 
   154  0210                     	;# 
   155  0211                     	;# 
   156  0211                     	;# 
   157  0212                     	;# 
   158  0212                     	;# 
   159  0213                     	;# 
   160  0213                     	;# 
   161  0214                     	;# 
   162  0214                     	;# 
   163  0215                     	;# 
   164  0215                     	;# 
   165  0215                     	;# 
   166  0216                     	;# 
   167  0216                     	;# 
   168  0217                     	;# 
   169  0217                     	;# 
   170  0291                     	;# 
   171  0291                     	;# 
   172  0292                     	;# 
   173  0293                     	;# 
   174  0298                     	;# 
   175  0298                     	;# 
   176  0299                     	;# 
   177  029A                     	;# 
   178  0394                     	;# 
   179  0395                     	;# 
   180  0396                     	;# 
   181  0FE4                     	;# 
   182  0FE5                     	;# 
   183  0FE6                     	;# 
   184  0FE7                     	;# 
   185  0FE8                     	;# 
   186  0FE9                     	;# 
   187  0FEA                     	;# 
   188  0FEB                     	;# 
   189  0FED                     	;# 
   190  0FEE                     	;# 
   191  0FEF                     	;# 
   192                           
   193                           	psect	stringtext
   194  1800                     __pstringtext:	
   195  1800                     _dpowers:	
   196  1800  3401               	retlw	1
   197  1801  3400               	retlw	0
   198  1802  3400               	retlw	0
   199  1803  3400               	retlw	0
   200  1804  340A               	retlw	10
   201  1805  3400               	retlw	0
   202  1806  3400               	retlw	0
   203  1807  3400               	retlw	0
   204  1808  3464               	retlw	100
   205  1809  3400               	retlw	0
   206  180A  3400               	retlw	0
   207  180B  3400               	retlw	0
   208  180C  34E8               	retlw	232
   209  180D  3403               	retlw	3
   210  180E  3400               	retlw	0
   211  180F  3400               	retlw	0
   212  1810  3410               	retlw	16
   213  1811  3427               	retlw	39
   214  1812  3400               	retlw	0
   215  1813  3400               	retlw	0
   216  1814  34A0               	retlw	160
   217  1815  3486               	retlw	134
   218  1816  3401               	retlw	1
   219  1817  3400               	retlw	0
   220  1818  3440               	retlw	64
   221  1819  3442               	retlw	66
   222  181A  340F               	retlw	15
   223  181B  3400               	retlw	0
   224  181C  3480               	retlw	128
   225  181D  3496               	retlw	150
   226  181E  3498               	retlw	152
   227  181F  3400               	retlw	0
   228  1820  3400               	retlw	0
   229  1821  34E1               	retlw	225
   230  1822  34F5               	retlw	245
   231  1823  3405               	retlw	5
   232  1824  3400               	retlw	0
   233  1825  34CA               	retlw	202
   234  1826  349A               	retlw	154
   235  1827  343B               	retlw	59
   236  1828                     __end_of_dpowers:	
   237  1828                     __powers_:	
   238  1828  3400               	retlw	0
   239  1829  3480               	retlw	128
   240  182A  343F               	retlw	63
   241  182B  3400               	retlw	0
   242  182C  3420               	retlw	32
   243  182D  3441               	retlw	65
   244  182E  3400               	retlw	0
   245  182F  34C8               	retlw	200
   246  1830  3442               	retlw	66
   247  1831  3400               	retlw	0
   248  1832  347A               	retlw	122
   249  1833  3444               	retlw	68
   250  1834  3440               	retlw	64
   251  1835  341C               	retlw	28
   252  1836  3446               	retlw	70
   253  1837  3450               	retlw	80
   254  1838  34C3               	retlw	195
   255  1839  3447               	retlw	71
   256  183A  3424               	retlw	36
   257  183B  3474               	retlw	116
   258  183C  3449               	retlw	73
   259  183D  3497               	retlw	151
   260  183E  3418               	retlw	24
   261  183F  344B               	retlw	75
   262  1840  34BC               	retlw	188
   263  1841  34BE               	retlw	190
   264  1842  344C               	retlw	76
   265  1843  346B               	retlw	107
   266  1844  346E               	retlw	110
   267  1845  344E               	retlw	78
   268  1846  3403               	retlw	3
   269  1847  3415               	retlw	21
   270  1848  3450               	retlw	80
   271  1849  3479               	retlw	121
   272  184A  34AD               	retlw	173
   273  184B  3460               	retlw	96
   274  184C  34F3               	retlw	243
   275  184D  3449               	retlw	73
   276  184E  3471               	retlw	113
   277  184F                     __end_of__powers_:	
   278  184F                     __npowers_:	
   279  184F  3400               	retlw	0
   280  1850  3480               	retlw	128
   281  1851  343F               	retlw	63
   282  1852  34CD               	retlw	205
   283  1853  34CC               	retlw	204
   284  1854  343D               	retlw	61
   285  1855  34D7               	retlw	215
   286  1856  3423               	retlw	35
   287  1857  343C               	retlw	60
   288  1858  3412               	retlw	18
   289  1859  3483               	retlw	131
   290  185A  343A               	retlw	58
   291  185B  34B7               	retlw	183
   292  185C  34D1               	retlw	209
   293  185D  3438               	retlw	56
   294  185E  34C6               	retlw	198
   295  185F  3427               	retlw	39
   296  1860  3437               	retlw	55
   297  1861  3438               	retlw	56
   298  1862  3486               	retlw	134
   299  1863  3435               	retlw	53
   300  1864  34C0               	retlw	192
   301  1865  34D6               	retlw	214
   302  1866  3433               	retlw	51
   303  1867  34CC               	retlw	204
   304  1868  342B               	retlw	43
   305  1869  3432               	retlw	50
   306  186A  3470               	retlw	112
   307  186B  3489               	retlw	137
   308  186C  3430               	retlw	48
   309  186D  34E7               	retlw	231
   310  186E  34DB               	retlw	219
   311  186F  342E               	retlw	46
   312  1870  34E5               	retlw	229
   313  1871  343C               	retlw	60
   314  1872  341E               	retlw	30
   315  1873  3442               	retlw	66
   316  1874  34A2               	retlw	162
   317  1875  340D               	retlw	13
   318  1876                     __end_of__npowers_:	
   319  0011                     _PIR1bits	set	17
   320  009B                     _ADRESL	set	155
   321  009C                     _ADRESH	set	156
   322  009E                     _ADCON1bits	set	158
   323  009D                     _ADCON0bits	set	157
   324  008C                     _TRISAbits	set	140
   325  008E                     _TRISCbits	set	142
   326  018C                     _ANSELAbits	set	396
   327  019C                     _SPBRGH	set	412
   328  019B                     _SPBRGL	set	411
   329  019E                     _TXSTA	set	414
   330  019D                     _RCSTA	set	413
   331  019F                     _BAUDCON	set	415
   332  018E                     _ANSELC	set	398
   333  019A                     _TXREG	set	410
   334  1876                     STR_1:	
   335  1876  3425               	retlw	37	;'%'
   336  1877  3430               	retlw	48	;'0'
   337  1878  342E               	retlw	46	;'.'
   338  1879  3432               	retlw	50	;'2'
   339  187A  3466               	retlw	102	;'f'
   340  187B  3400               	retlw	0
   341                           
   342                           	psect	cinit
   343  07EE                     start_initialization:	
   344                           ; #config settings
   345                           
   346  07EE                     __initialization:	
   347                           
   348                           ; Clear objects allocated to BANK1
   349  07EE  30A0               	movlw	low __pbssBANK1
   350  07EF  0084               	movwf	4
   351  07F0  3000               	movlw	high __pbssBANK1
   352  07F1  0085               	movwf	5
   353  07F2  3025               	movlw	37
   354  07F3  3191  2109  3187   	fcall	clear_ram0
   355                           
   356                           ; Clear objects allocated to BANK2
   357  07F6  3020               	movlw	low __pbssBANK2
   358  07F7  0084               	movwf	4
   359  07F8  3001               	movlw	high __pbssBANK2
   360  07F9  0085               	movwf	5
   361  07FA  3032               	movlw	50
   362  07FB  3191  2109         	fcall	clear_ram0
   363  07FD                     end_of_initialization:	
   364                           ;End of C runtime variable initialization code
   365                           
   366  07FD                     __end_of__initialization:	
   367  07FD  0020               	movlb	0
   368  07FE  3188  2822         	ljmp	_main	;jump to C main() function
   369                           
   370                           	psect	bssBANK1
   371  00A0                     __pbssBANK1:	
   372  00A0                     _temp_buf:	
   373  00A0                     	ds	30
   374  00BE                     _temp:	
   375  00BE                     	ds	3
   376  00C1                     _count:	
   377  00C1                     	ds	2
   378  00C3                     _adc_value:	
   379  00C3                     	ds	2
   380                           
   381                           	psect	bssBANK2
   382  0120                     __pbssBANK2:	
   383  0120                     _buffer:	
   384  0120                     	ds	50
   385                           
   386                           	psect	clrtext
   387  1109                     clear_ram0:	
   388                           ;	Called with FSR0 containing the base address, and
   389                           ;	WREG with the size to clear
   390                           
   391  1109  0064               	clrwdt	;clear the watchdog before getting into this loop
   392  110A                     clrloop0:	
   393  110A  0180               	clrf	0	;clear RAM location pointed to by FSR
   394  110B  3101               	addfsr 0,1
   395  110C  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   396  110D  290A               	goto	clrloop0	;have we reached the end yet?
   397  110E  3400               	retlw	0	;all done for this memory range, return
   398                           
   399                           	psect	cstackBANK1
   400  00C5                     __pcstackBANK1:	
   401  00C5                     _sprintf$610:	
   402                           
   403                           ; 3 bytes @ 0x0
   404  00C5                     	ds	3
   405  00C8                     sprintf@ap:	
   406                           
   407                           ; 1 bytes @ 0x3
   408  00C8                     	ds	1
   409  00C9                     sprintf@val:	
   410                           
   411                           ; 4 bytes @ 0x4
   412  00C9                     	ds	4
   413  00CD                     sprintf@tmpval:	
   414                           
   415                           ; 4 bytes @ 0x8
   416  00CD                     	ds	4
   417  00D1                     sprintf@exp:	
   418                           
   419                           ; 2 bytes @ 0xC
   420  00D1                     	ds	2
   421  00D3                     sprintf@flag:	
   422                           
   423                           ; 2 bytes @ 0xE
   424  00D3                     	ds	2
   425  00D5                     sprintf@width:	
   426                           
   427                           ; 2 bytes @ 0x10
   428  00D5                     	ds	2
   429  00D7                     sprintf@fval:	
   430                           
   431                           ; 3 bytes @ 0x12
   432  00D7                     	ds	3
   433  00DA                     sprintf@prec:	
   434                           
   435                           ; 2 bytes @ 0x15
   436  00DA                     	ds	2
   437  00DC                     sprintf@sp:	
   438                           
   439                           ; 1 bytes @ 0x17
   440  00DC                     	ds	1
   441  00DD                     sprintf@c:	
   442                           
   443                           ; 1 bytes @ 0x18
   444  00DD                     	ds	1
   445  00DE                     _main$606:	
   446                           
   447                           ; 3 bytes @ 0x19
   448  00DE                     	ds	3
   449  00E1                     main@i:	
   450                           
   451                           ; 2 bytes @ 0x1C
   452  00E1                     	ds	2
   453  00E3                     main@c:	
   454                           
   455                           ; 2 bytes @ 0x1E
   456  00E3                     	ds	2
   457                           
   458                           	psect	cstackCOMMON
   459  0070                     __pcstackCOMMON:	
   460  0070                     ?_isdigit:	
   461  0070                     ?___ftge:	
   462                           ; 1 bit 
   463                           
   464  0070                     ??_isdigit:	
   465                           ; 1 bit 
   466                           
   467  0070                     ?_UART_Write:	
   468                           ; 1 bytes @ 0x0
   469                           
   470  0070                     ??_UART_Write:	
   471                           ; 1 bytes @ 0x0
   472                           
   473  0070                     ?_UART_Init:	
   474                           ; 1 bytes @ 0x0
   475                           
   476  0070                     ??_UART_Init:	
   477                           ; 1 bytes @ 0x0
   478                           
   479  0070                     ?_ADC_Init:	
   480                           ; 1 bytes @ 0x0
   481                           
   482  0070                     ??_ADC_Init:	
   483                           ; 1 bytes @ 0x0
   484                           
   485  0070                     ?_main:	
   486                           ; 1 bytes @ 0x0
   487                           
   488  0070                     ?___bmul:	
   489                           ; 1 bytes @ 0x0
   490                           
   491  0070                     ?___awmod:	
   492                           ; 1 bytes @ 0x0
   493                           
   494  0070                     ?___ftpack:	
   495                           ; 2 bytes @ 0x0
   496                           
   497  0070                     ?___ftneg:	
   498                           ; 3 bytes @ 0x0
   499                           
   500  0070                     ?__tdiv_to_l_:	
   501                           ; 3 bytes @ 0x0
   502                           
   503  0070                     ?__div_to_l_:	
   504                           ; 4 bytes @ 0x0
   505                           
   506  0070                     ?___lldiv:	
   507                           ; 4 bytes @ 0x0
   508                           
   509  0070                     ?___llmod:	
   510                           ; 4 bytes @ 0x0
   511                           
   512  0070                     UART_Write@txData:	
   513                           ; 4 bytes @ 0x0
   514                           
   515  0070                     ___bmul@multiplicand:	
   516                           ; 1 bytes @ 0x0
   517                           
   518  0070                     _isdigit$436:	
   519                           ; 1 bytes @ 0x0
   520                           
   521  0070                     ___awmod@divisor:	
   522                           ; 1 bytes @ 0x0
   523                           
   524  0070                     __div_to_l_@f1:	
   525                           ; 2 bytes @ 0x0
   526                           
   527  0070                     ___ftpack@arg:	
   528                           ; 3 bytes @ 0x0
   529                           
   530  0070                     __tdiv_to_l_@f1:	
   531                           ; 3 bytes @ 0x0
   532                           
   533  0070                     ___ftge@ff1:	
   534                           ; 3 bytes @ 0x0
   535                           
   536  0070                     ___ftneg@f1:	
   537                           ; 3 bytes @ 0x0
   538                           
   539  0070                     ___lldiv@divisor:	
   540                           ; 3 bytes @ 0x0
   541                           
   542  0070                     ___llmod@divisor:	
   543                           ; 4 bytes @ 0x0
   544                           
   545                           
   546                           ; 4 bytes @ 0x0
   547  0070                     	ds	1
   548  0071                     ??___bmul:	
   549  0071                     isdigit@c:	
   550                           ; 1 bytes @ 0x1
   551                           
   552                           
   553                           ; 1 bytes @ 0x1
   554  0071                     	ds	1
   555  0072                     ___bmul@product:	
   556  0072                     ___awmod@dividend:	
   557                           ; 1 bytes @ 0x2
   558                           
   559                           
   560                           ; 2 bytes @ 0x2
   561  0072                     	ds	1
   562  0073                     ??___ftneg:	
   563  0073                     ___bmul@multiplier:	
   564                           ; 1 bytes @ 0x3
   565                           
   566  0073                     ___ftpack@exp:	
   567                           ; 1 bytes @ 0x3
   568                           
   569  0073                     __div_to_l_@f2:	
   570                           ; 1 bytes @ 0x3
   571                           
   572  0073                     __tdiv_to_l_@f2:	
   573                           ; 3 bytes @ 0x3
   574                           
   575  0073                     ___ftge@ff2:	
   576                           ; 3 bytes @ 0x3
   577                           
   578                           
   579                           ; 3 bytes @ 0x3
   580  0073                     	ds	1
   581  0074                     ??___awmod:	
   582  0074                     ___ftpack@sign:	
   583                           ; 1 bytes @ 0x4
   584                           
   585  0074                     ___lldiv@dividend:	
   586                           ; 1 bytes @ 0x4
   587                           
   588  0074                     ___llmod@dividend:	
   589                           ; 4 bytes @ 0x4
   590                           
   591                           
   592                           ; 4 bytes @ 0x4
   593  0074                     	ds	1
   594  0075                     ??___ftpack:	
   595  0075                     ___awmod@counter:	
   596                           ; 1 bytes @ 0x5
   597                           
   598                           
   599                           ; 1 bytes @ 0x5
   600  0075                     	ds	1
   601  0076                     ??__tdiv_to_l_:	
   602  0076                     ??__div_to_l_:	
   603                           ; 1 bytes @ 0x6
   604                           
   605  0076                     ??___ftge:	
   606                           ; 1 bytes @ 0x6
   607                           
   608  0076                     ___awmod@sign:	
   609                           ; 1 bytes @ 0x6
   610                           
   611                           
   612                           ; 1 bytes @ 0x6
   613  0076                     	ds	1
   614  0077                     ?___awdiv:	
   615  0077                     ___awdiv@divisor:	
   616                           ; 2 bytes @ 0x7
   617                           
   618                           
   619                           ; 2 bytes @ 0x7
   620  0077                     	ds	1
   621  0078                     ??___lldiv:	
   622  0078                     ??___llmod:	
   623                           ; 1 bytes @ 0x8
   624                           
   625  0078                     ?___lltoft:	
   626                           ; 1 bytes @ 0x8
   627                           
   628  0078                     ?___lwtoft:	
   629                           ; 3 bytes @ 0x8
   630                           
   631  0078                     ___lwtoft@c:	
   632                           ; 3 bytes @ 0x8
   633                           
   634  0078                     ___lltoft@c:	
   635                           ; 2 bytes @ 0x8
   636                           
   637                           
   638                           ; 4 bytes @ 0x8
   639  0078                     	ds	1
   640  0079                     ___llmod@counter:	
   641  0079                     ___awdiv@dividend:	
   642                           ; 1 bytes @ 0x9
   643                           
   644  0079                     ___lldiv@quotient:	
   645                           ; 2 bytes @ 0x9
   646                           
   647                           
   648                           ; 4 bytes @ 0x9
   649  0079                     	ds	2
   650  007B                     ??___awdiv:	
   651  007B                     ??___lwtoft:	
   652                           ; 1 bytes @ 0xB
   653                           
   654                           
   655                           ; 1 bytes @ 0xB
   656  007B                     	ds	1
   657  007C                     ??___wmul:	
   658  007C                     ??___lltoft:	
   659                           ; 1 bytes @ 0xC
   660                           
   661  007C                     ___wmul@product:	
   662                           ; 1 bytes @ 0xC
   663                           
   664                           
   665                           ; 2 bytes @ 0xC
   666  007C                     	ds	1
   667  007D                     ___lldiv@counter:	
   668  007D                     ___lltoft@exp:	
   669                           ; 1 bytes @ 0xD
   670                           
   671                           
   672                           ; 1 bytes @ 0xD
   673  007D                     	ds	1
   674  007E                     ??___ftsub:	
   675                           
   676                           	psect	cstackBANK0
   677  0020                     __pcstackBANK0:	
   678                           ; 1 bytes @ 0xE
   679                           
   680  0020                     ?___ftdiv:	
   681  0020                     ___awdiv@counter:	
   682                           ; 3 bytes @ 0x0
   683                           
   684  0020                     ___ftdiv@f2:	
   685                           ; 1 bytes @ 0x0
   686                           
   687  0020                     __div_to_l_@quot:	
   688                           ; 3 bytes @ 0x0
   689                           
   690  0020                     __tdiv_to_l_@quot:	
   691                           ; 4 bytes @ 0x0
   692                           
   693                           
   694                           ; 4 bytes @ 0x0
   695  0020                     	ds	1
   696  0021                     ___awdiv@sign:	
   697                           
   698                           ; 1 bytes @ 0x1
   699  0021                     	ds	1
   700  0022                     ___awdiv@quotient:	
   701                           
   702                           ; 2 bytes @ 0x2
   703  0022                     	ds	1
   704  0023                     ___ftdiv@f1:	
   705                           
   706                           ; 3 bytes @ 0x3
   707  0023                     	ds	1
   708  0024                     ?___wmul:	
   709  0024                     __div_to_l_@cntr:	
   710                           ; 2 bytes @ 0x4
   711                           
   712  0024                     __tdiv_to_l_@cntr:	
   713                           ; 1 bytes @ 0x4
   714                           
   715  0024                     ___wmul@multiplier:	
   716                           ; 1 bytes @ 0x4
   717                           
   718                           
   719                           ; 2 bytes @ 0x4
   720  0024                     	ds	1
   721  0025                     __div_to_l_@exp1:	
   722  0025                     __tdiv_to_l_@exp1:	
   723                           ; 1 bytes @ 0x5
   724                           
   725                           
   726                           ; 1 bytes @ 0x5
   727  0025                     	ds	1
   728  0026                     ??___ftdiv:	
   729  0026                     ___wmul@multiplicand:	
   730                           ; 1 bytes @ 0x6
   731                           
   732                           
   733                           ; 2 bytes @ 0x6
   734  0026                     	ds	4
   735  002A                     ___ftdiv@cntr:	
   736                           
   737                           ; 1 bytes @ 0xA
   738  002A                     	ds	1
   739  002B                     ___ftdiv@f3:	
   740                           
   741                           ; 3 bytes @ 0xB
   742  002B                     	ds	3
   743  002E                     ___ftdiv@exp:	
   744                           
   745                           ; 1 bytes @ 0xE
   746  002E                     	ds	1
   747  002F                     ___ftdiv@sign:	
   748                           
   749                           ; 1 bytes @ 0xF
   750  002F                     	ds	1
   751  0030                     ?___ftmul:	
   752  0030                     ___ftmul@f1:	
   753                           ; 3 bytes @ 0x10
   754                           
   755                           
   756                           ; 3 bytes @ 0x10
   757  0030                     	ds	3
   758  0033                     ___ftmul@f2:	
   759                           
   760                           ; 3 bytes @ 0x13
   761  0033                     	ds	3
   762  0036                     ??___ftmul:	
   763                           
   764                           ; 1 bytes @ 0x16
   765  0036                     	ds	4
   766  003A                     ___ftmul@exp:	
   767                           
   768                           ; 1 bytes @ 0x1A
   769  003A                     	ds	1
   770  003B                     ___ftmul@f3_as_product:	
   771                           
   772                           ; 3 bytes @ 0x1B
   773  003B                     	ds	3
   774  003E                     ___ftmul@cntr:	
   775                           
   776                           ; 1 bytes @ 0x1E
   777  003E                     	ds	1
   778  003F                     ___ftmul@sign:	
   779                           
   780                           ; 1 bytes @ 0x1F
   781  003F                     	ds	1
   782  0040                     ?_fround:	
   783  0040                     ?_scale:	
   784                           ; 3 bytes @ 0x20
   785                           
   786                           
   787                           ; 3 bytes @ 0x20
   788  0040                     	ds	3
   789  0043                     ??_fround:	
   790  0043                     ??_scale:	
   791                           ; 1 bytes @ 0x23
   792                           
   793                           
   794                           ; 1 bytes @ 0x23
   795  0043                     	ds	2
   796  0045                     _scale$609:	
   797                           
   798                           ; 3 bytes @ 0x25
   799  0045                     	ds	2
   800  0047                     _fround$608:	
   801                           
   802                           ; 3 bytes @ 0x27
   803  0047                     	ds	1
   804  0048                     scale@scl:	
   805                           
   806                           ; 1 bytes @ 0x28
   807  0048                     	ds	1
   808  0049                     ?___fttol:	
   809  0049                     ___fttol@f1:	
   810                           ; 4 bytes @ 0x29
   811                           
   812                           
   813                           ; 3 bytes @ 0x29
   814  0049                     	ds	1
   815  004A                     _fround$607:	
   816                           
   817                           ; 3 bytes @ 0x2A
   818  004A                     	ds	3
   819  004D                     ??___fttol:	
   820  004D                     fround@prec:	
   821                           ; 1 bytes @ 0x2D
   822                           
   823                           
   824                           ; 1 bytes @ 0x2D
   825  004D                     	ds	1
   826  004E                     ?___ftadd:	
   827  004E                     ___ftadd@f1:	
   828                           ; 3 bytes @ 0x2E
   829                           
   830                           
   831                           ; 3 bytes @ 0x2E
   832  004E                     	ds	3
   833  0051                     ___fttol@sign1:	
   834  0051                     ___ftadd@f2:	
   835                           ; 1 bytes @ 0x31
   836                           
   837                           
   838                           ; 3 bytes @ 0x31
   839  0051                     	ds	1
   840  0052                     ___fttol@lval:	
   841                           
   842                           ; 4 bytes @ 0x32
   843  0052                     	ds	2
   844  0054                     ??___ftadd:	
   845                           
   846                           ; 1 bytes @ 0x34
   847  0054                     	ds	2
   848  0056                     ___fttol@exp1:	
   849                           
   850                           ; 1 bytes @ 0x36
   851  0056                     	ds	2
   852  0058                     ___ftadd@sign:	
   853                           
   854                           ; 1 bytes @ 0x38
   855  0058                     	ds	1
   856  0059                     ___ftadd@exp2:	
   857                           
   858                           ; 1 bytes @ 0x39
   859  0059                     	ds	1
   860  005A                     ___ftadd@exp1:	
   861                           
   862                           ; 1 bytes @ 0x3A
   863  005A                     	ds	1
   864  005B                     ?___ftsub:	
   865  005B                     ___ftsub@f2:	
   866                           ; 3 bytes @ 0x3B
   867                           
   868                           
   869                           ; 3 bytes @ 0x3B
   870  005B                     	ds	3
   871  005E                     ___ftsub@f1:	
   872                           
   873                           ; 3 bytes @ 0x3E
   874  005E                     	ds	3
   875  0061                     ?_sprintf:	
   876  0061                     sprintf@f:	
   877                           ; 2 bytes @ 0x41
   878                           
   879                           
   880                           ; 2 bytes @ 0x41
   881  0061                     	ds	5
   882  0066                     ??_sprintf:	
   883                           
   884                           ; 1 bytes @ 0x46
   885  0066                     	ds	6
   886  006C                     ??_main:	
   887                           
   888                           ; 1 bytes @ 0x4C
   889  006C                     	ds	2
   890                           
   891                           	psect	maintext
   892  0822                     __pmaintext:	
   893 ;;
   894 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   895 ;;
   896 ;; *************** function _main *****************
   897 ;; Defined at:
   898 ;;		line 73 in file "main.c"
   899 ;; Parameters:    Size  Location     Type
   900 ;;		None
   901 ;; Auto vars:     Size  Location     Type
   902 ;;  i               2   28[BANK1 ] int 
   903 ;;  c               2   30[BANK1 ] int 
   904 ;; Return value:  Size  Location     Type
   905 ;;                  1    wreg      void 
   906 ;; Registers used:
   907 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   908 ;; Tracked objects:
   909 ;;		On entry : B1F/0
   910 ;;		On exit  : 0/0
   911 ;;		Unchanged: 0/0
   912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
   913 ;;      Params:         0       0       0       0       0       0       0       0
   914 ;;      Locals:         0       0       7       0       0       0       0       0
   915 ;;      Temps:          0       2       0       0       0       0       0       0
   916 ;;      Totals:         0       2       7       0       0       0       0       0
   917 ;;Total ram usage:        9 bytes
   918 ;; Hardware stack levels required when called:    4
   919 ;; This function calls:
   920 ;;		_ADC_Init
   921 ;;		_UART_Init
   922 ;;		_UART_Write
   923 ;;		___bmul
   924 ;;		___ftadd
   925 ;;		___ftdiv
   926 ;;		___ftmul
   927 ;;		___lwtoft
   928 ;;		_sprintf
   929 ;; This function is called by:
   930 ;;		Startup code after reset
   931 ;; This function uses a non-reentrant model
   932 ;;
   933                           
   934                           
   935                           ;psect for function _main
   936  0822                     _main:	
   937                           
   938                           ;main.c: 76: UART_Init();
   939                           
   940                           ;incstack = 0
   941                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   942  0822  3191  2117  3188   	fcall	_UART_Init
   943                           
   944                           ;main.c: 79: ADC_Init();
   945  0825  3191  2157  3188   	fcall	_ADC_Init
   946  0828                     l2558:	
   947                           ;main.c: 81: while(1)
   948                           
   949                           
   950                           ;main.c: 82: {
   951                           ;main.c: 85: ADCON0bits.GO_nDONE = 1;
   952  0828  0021               	movlb	1	; select bank1
   953  0829  149D               	bsf	29,1	;volatile
   954  082A                     l60:	
   955                           ;main.c: 86: while(ADCON0bits.GO_nDONE == 1);
   956                           
   957  082A  189D               	btfsc	29,1	;volatile
   958  082B  282A               	goto	l60
   959                           
   960                           ;main.c: 89: adc_value = (ADRESH<<8)|ADRESL;
   961  082C  081C               	movf	28,w	;volatile
   962  082D  00C4               	movwf	(_adc_value+1)^(0+128)
   963  082E  081B               	movf	27,w	;volatile
   964  082F  00C3               	movwf	_adc_value^(0+128)
   965                           
   966                           ;main.c: 92: temp_buf[count] = (double)(((adc_value/1024.0)*3.3-0.5)*100);
   967  0830  3000               	movlw	0
   968  0831  0020               	movlb	0	; select bank0
   969  0832  00CE               	movwf	___ftadd@f1
   970  0833  3000               	movlw	0
   971  0834  00CF               	movwf	___ftadd@f1+1
   972  0835  30BF               	movlw	191
   973  0836  00D0               	movwf	___ftadd@f1+2
   974  0837  3033               	movlw	51
   975  0838  00B0               	movwf	___ftmul@f1
   976  0839  3053               	movlw	83
   977  083A  00B1               	movwf	___ftmul@f1+1
   978  083B  3040               	movlw	64
   979  083C  00B2               	movwf	___ftmul@f1+2
   980  083D  3000               	movlw	0
   981  083E  00A0               	movwf	___ftdiv@f2
   982  083F  3080               	movlw	128
   983  0840  00A1               	movwf	___ftdiv@f2+1
   984  0841  3044               	movlw	68
   985  0842  00A2               	movwf	___ftdiv@f2+2
   986  0843  0021               	movlb	1	; select bank1
   987  0844  0844               	movf	(_adc_value+1)^(0+128),w
   988  0845  00F9               	movwf	___lwtoft@c+1
   989  0846  0843               	movf	_adc_value^(0+128),w
   990  0847  00F8               	movwf	___lwtoft@c
   991  0848  3191  2144  3188   	fcall	___lwtoft
   992  084B  0878               	movf	?___lwtoft,w
   993  084C  0020               	movlb	0	; select bank0
   994  084D  00A3               	movwf	___ftdiv@f1
   995  084E  0879               	movf	?___lwtoft+1,w
   996  084F  00A4               	movwf	___ftdiv@f1+1
   997  0850  087A               	movf	?___lwtoft+2,w
   998  0851  00A5               	movwf	___ftdiv@f1+2
   999  0852  3193  23DA  3188   	fcall	___ftdiv
  1000  0855  0020               	movlb	0	; select bank0
  1001  0856  0820               	movf	?___ftdiv,w
  1002  0857  00B3               	movwf	___ftmul@f2
  1003  0858  0821               	movf	?___ftdiv+1,w
  1004  0859  00B4               	movwf	___ftmul@f2+1
  1005  085A  0822               	movf	?___ftdiv+2,w
  1006  085B  00B5               	movwf	___ftmul@f2+2
  1007  085C  3194  2483  3188   	fcall	___ftmul
  1008  085F  0020               	movlb	0	; select bank0
  1009  0860  0830               	movf	?___ftmul,w
  1010  0861  00D1               	movwf	___ftadd@f2
  1011  0862  0831               	movf	?___ftmul+1,w
  1012  0863  00D2               	movwf	___ftadd@f2+1
  1013  0864  0832               	movf	?___ftmul+2,w
  1014  0865  00D3               	movwf	___ftadd@f2+2
  1015  0866  3195  25ED  3188   	fcall	___ftadd
  1016  0869  0020               	movlb	0	; select bank0
  1017  086A  084E               	movf	?___ftadd,w
  1018  086B  0021               	movlb	1	; select bank1
  1019  086C  00DE               	movwf	_main$606^(0+128)
  1020  086D  0020               	movlb	0	; select bank0
  1021  086E  084F               	movf	?___ftadd+1,w
  1022  086F  0021               	movlb	1	; select bank1
  1023  0870  00DF               	movwf	(_main$606+1)^(0+128)
  1024  0871  0020               	movlb	0	; select bank0
  1025  0872  0850               	movf	?___ftadd+2,w
  1026  0873  0021               	movlb	1	; select bank1
  1027  0874  00E0               	movwf	(_main$606+2)^(0+128)
  1028                           
  1029                           ;main.c: 92: temp_buf[count] = (double)(((adc_value/1024.0)*3.3-0.5)*100);
  1030  0875  3003               	movlw	3
  1031  0876  0020               	movlb	0	; select bank0
  1032  0877  00EC               	movwf	??_main
  1033  0878  086C               	movf	??_main,w
  1034  0879  00F0               	movwf	___bmul@multiplicand
  1035  087A  0021               	movlb	1	; select bank1
  1036  087B  0841               	movf	_count^(0+128),w
  1037  087C  3191  2133  3188   	fcall	___bmul
  1038  087F  3EA0               	addlw	(low (_temp_buf| 0))& (0+255)
  1039  0880  0086               	movwf	6
  1040  0881  0187               	clrf	7
  1041  0882  3000               	movlw	0
  1042  0883  0020               	movlb	0	; select bank0
  1043  0884  00B0               	movwf	___ftmul@f1
  1044  0885  30C8               	movlw	200
  1045  0886  00B1               	movwf	___ftmul@f1+1
  1046  0887  3042               	movlw	66
  1047  0888  00B2               	movwf	___ftmul@f1+2
  1048  0889  0021               	movlb	1	; select bank1
  1049  088A  085E               	movf	_main$606^(0+128),w
  1050  088B  0020               	movlb	0	; select bank0
  1051  088C  00B3               	movwf	___ftmul@f2
  1052  088D  0021               	movlb	1	; select bank1
  1053  088E  085F               	movf	(_main$606+1)^(0+128),w
  1054  088F  0020               	movlb	0	; select bank0
  1055  0890  00B4               	movwf	___ftmul@f2+1
  1056  0891  0021               	movlb	1	; select bank1
  1057  0892  0860               	movf	(_main$606+2)^(0+128),w
  1058  0893  0020               	movlb	0	; select bank0
  1059  0894  00B5               	movwf	___ftmul@f2+2
  1060  0895  3194  2483  3188   	fcall	___ftmul
  1061  0898  0020               	movlb	0	; select bank0
  1062  0899  0830               	movf	?___ftmul,w
  1063  089A  3FC0               	movwi [0]fsr1
  1064  089B  0831               	movf	?___ftmul+1,w
  1065  089C  3FC1               	movwi [1]fsr1
  1066  089D  0832               	movf	?___ftmul+2,w
  1067  089E  3FC2               	movwi [2]fsr1
  1068                           
  1069                           ;main.c: 97: count++;
  1070  089F  3001               	movlw	1
  1071  08A0  0021               	movlb	1	; select bank1
  1072  08A1  07C1               	addwf	_count^(0+128),f
  1073  08A2  3000               	movlw	0
  1074  08A3  3DC2               	addwfc	(_count+1)^(0+128),f
  1075                           
  1076                           ;main.c: 100: if(count == 10)
  1077  08A4  300A               	movlw	10
  1078  08A5  0641               	xorwf	_count^(0+128),w
  1079  08A6  0442               	iorwf	(_count+1)^(0+128),w
  1080  08A7  1D03               	btfss	3,2
  1081  08A8  2828               	goto	l2558
  1082                           
  1083                           ;main.c: 101: {
  1084                           ;main.c: 102: count = 0;
  1085  08A9  01C1               	clrf	_count^(0+128)
  1086  08AA  01C2               	clrf	(_count+1)^(0+128)
  1087                           
  1088                           ;main.c: 104: for(int c = 0; c <= 9; c++) temp = temp_buf[c]+temp;
  1089  08AB  01E3               	clrf	main@c^(0+128)
  1090  08AC  01E4               	clrf	(main@c+1)^(0+128)
  1091  08AD  0864               	movf	(main@c+1)^(0+128),w
  1092  08AE  3A80               	xorlw	128
  1093  08AF  0020               	movlb	0	; select bank0
  1094  08B0  00EC               	movwf	??_main
  1095  08B1  3080               	movlw	128
  1096  08B2  026C               	subwf	??_main,w
  1097  08B3  1D03               	skipz
  1098  08B4  28B8               	goto	u4025
  1099  08B5  300A               	movlw	10
  1100  08B6  0021               	movlb	1	; select bank1
  1101  08B7  0263               	subwf	main@c^(0+128),w
  1102  08B8                     u4025:	
  1103  08B8  1803               	btfsc	3,0
  1104  08B9  28F9               	goto	l2582
  1105  08BA                     l2576:	
  1106  08BA  0021               	movlb	1	; select bank1
  1107  08BB  083E               	movf	_temp^(0+128),w
  1108  08BC  0020               	movlb	0	; select bank0
  1109  08BD  00CE               	movwf	___ftadd@f1
  1110  08BE  0021               	movlb	1	; select bank1
  1111  08BF  083F               	movf	(_temp+1)^(0+128),w
  1112  08C0  0020               	movlb	0	; select bank0
  1113  08C1  00CF               	movwf	___ftadd@f1+1
  1114  08C2  0021               	movlb	1	; select bank1
  1115  08C3  0840               	movf	(_temp+2)^(0+128),w
  1116  08C4  0020               	movlb	0	; select bank0
  1117  08C5  00D0               	movwf	___ftadd@f1+2
  1118  08C6  3003               	movlw	3
  1119  08C7  00EC               	movwf	??_main
  1120  08C8  086C               	movf	??_main,w
  1121  08C9  00F0               	movwf	___bmul@multiplicand
  1122  08CA  0021               	movlb	1	; select bank1
  1123  08CB  0863               	movf	main@c^(0+128),w
  1124  08CC  3191  2133  3188   	fcall	___bmul
  1125  08CF  3EA0               	addlw	(low (_temp_buf| 0))& (0+255)
  1126  08D0  0086               	movwf	6
  1127  08D1  0187               	clrf	7
  1128  08D2  3F40               	moviw [0]fsr1
  1129  08D3  0020               	movlb	0	; select bank0
  1130  08D4  00D1               	movwf	___ftadd@f2
  1131  08D5  3F41               	moviw [1]fsr1
  1132  08D6  00D2               	movwf	___ftadd@f2+1
  1133  08D7  3F42               	moviw [2]fsr1
  1134  08D8  00D3               	movwf	___ftadd@f2+2
  1135  08D9  3195  25ED  3188   	fcall	___ftadd
  1136  08DC  0020               	movlb	0	; select bank0
  1137  08DD  084E               	movf	?___ftadd,w
  1138  08DE  0021               	movlb	1	; select bank1
  1139  08DF  00BE               	movwf	_temp^(0+128)
  1140  08E0  0020               	movlb	0	; select bank0
  1141  08E1  084F               	movf	?___ftadd+1,w
  1142  08E2  0021               	movlb	1	; select bank1
  1143  08E3  00BF               	movwf	(_temp+1)^(0+128)
  1144  08E4  0020               	movlb	0	; select bank0
  1145  08E5  0850               	movf	?___ftadd+2,w
  1146  08E6  0021               	movlb	1	; select bank1
  1147  08E7  00C0               	movwf	(_temp+2)^(0+128)
  1148  08E8  3001               	movlw	1
  1149  08E9  07E3               	addwf	main@c^(0+128),f
  1150  08EA  3000               	movlw	0
  1151  08EB  3DE4               	addwfc	(main@c+1)^(0+128),f
  1152  08EC  0864               	movf	(main@c+1)^(0+128),w
  1153  08ED  3A80               	xorlw	128
  1154  08EE  0020               	movlb	0	; select bank0
  1155  08EF  00EC               	movwf	??_main
  1156  08F0  3080               	movlw	128
  1157  08F1  026C               	subwf	??_main,w
  1158  08F2  1D03               	skipz
  1159  08F3  28F7               	goto	u4035
  1160  08F4  300A               	movlw	10
  1161  08F5  0021               	movlb	1	; select bank1
  1162  08F6  0263               	subwf	main@c^(0+128),w
  1163  08F7                     u4035:	
  1164  08F7  1C03               	skipc
  1165  08F8  28BA               	goto	l2576
  1166  08F9                     l2582:	
  1167                           
  1168                           ;main.c: 106: temp = temp/9;
  1169  08F9  3000               	movlw	0
  1170  08FA  0020               	movlb	0	; select bank0
  1171  08FB  00A0               	movwf	___ftdiv@f2
  1172  08FC  3010               	movlw	16
  1173  08FD  00A1               	movwf	___ftdiv@f2+1
  1174  08FE  3041               	movlw	65
  1175  08FF  00A2               	movwf	___ftdiv@f2+2
  1176  0900  0021               	movlb	1	; select bank1
  1177  0901  083E               	movf	_temp^(0+128),w
  1178  0902  0020               	movlb	0	; select bank0
  1179  0903  00A3               	movwf	___ftdiv@f1
  1180  0904  0021               	movlb	1	; select bank1
  1181  0905  083F               	movf	(_temp+1)^(0+128),w
  1182  0906  0020               	movlb	0	; select bank0
  1183  0907  00A4               	movwf	___ftdiv@f1+1
  1184  0908  0021               	movlb	1	; select bank1
  1185  0909  0840               	movf	(_temp+2)^(0+128),w
  1186  090A  0020               	movlb	0	; select bank0
  1187  090B  00A5               	movwf	___ftdiv@f1+2
  1188  090C  3193  23DA  3188   	fcall	___ftdiv
  1189  090F  0020               	movlb	0	; select bank0
  1190  0910  0820               	movf	?___ftdiv,w
  1191  0911  0021               	movlb	1	; select bank1
  1192  0912  00BE               	movwf	_temp^(0+128)
  1193  0913  0020               	movlb	0	; select bank0
  1194  0914  0821               	movf	?___ftdiv+1,w
  1195  0915  0021               	movlb	1	; select bank1
  1196  0916  00BF               	movwf	(_temp+1)^(0+128)
  1197  0917  0020               	movlb	0	; select bank0
  1198  0918  0822               	movf	?___ftdiv+2,w
  1199  0919  0021               	movlb	1	; select bank1
  1200  091A  00C0               	movwf	(_temp+2)^(0+128)
  1201                           
  1202                           ;main.c: 108: sprintf(buffer,"%0.2f",temp);
  1203  091B  3076               	movlw	low (STR_1| (0+32768))
  1204  091C  0020               	movlb	0	; select bank0
  1205  091D  00E1               	movwf	sprintf@f
  1206  091E  3098               	movlw	high (STR_1| (0+32768))
  1207  091F  00E2               	movwf	sprintf@f+1
  1208  0920  0021               	movlb	1	; select bank1
  1209  0921  083E               	movf	_temp^(0+128),w
  1210  0922  0020               	movlb	0	; select bank0
  1211  0923  00E3               	movwf	?_sprintf+2
  1212  0924  0021               	movlb	1	; select bank1
  1213  0925  083F               	movf	(_temp+1)^(0+128),w
  1214  0926  0020               	movlb	0	; select bank0
  1215  0927  00E4               	movwf	?_sprintf+3
  1216  0928  0021               	movlb	1	; select bank1
  1217  0929  0840               	movf	(_temp+2)^(0+128),w
  1218  092A  0020               	movlb	0	; select bank0
  1219  092B  00E5               	movwf	?_sprintf+4
  1220  092C  3020               	movlw	(low (_buffer| (0+256)))& (0+255)
  1221  092D  3184  2438  3188   	fcall	_sprintf
  1222                           
  1223                           ;main.c: 111: for(int i=0;buffer[i]!='\0';i++)
  1224  0930  0021               	movlb	1	; select bank1
  1225  0931  01E1               	clrf	main@i^(0+128)
  1226  0932  01E2               	clrf	(main@i+1)^(0+128)
  1227  0933                     l2592:	
  1228  0933  0861               	movf	main@i^(0+128),w
  1229  0934  3E20               	addlw	(low (_buffer| (0+256)))& (0+255)
  1230  0935  0086               	movwf	6
  1231  0936  3001               	movlw	1	; select bank2/3
  1232  0937  0087               	movwf	7
  1233  0938  0801               	movf	1,w
  1234  0939  1903               	btfsc	3,2
  1235  093A  294A               	goto	l2594
  1236                           
  1237                           ;main.c: 112: UART_Write(buffer[i]);
  1238  093B  0861               	movf	main@i^(0+128),w
  1239  093C  3E20               	addlw	(low (_buffer| (0+256)))& (0+255)
  1240  093D  0086               	movwf	6
  1241  093E  3001               	movlw	1	; select bank2/3
  1242  093F  0087               	movwf	7
  1243  0940  0801               	movf	1,w
  1244  0941  3191  210F  3188   	fcall	_UART_Write
  1245  0944  3001               	movlw	1
  1246  0945  0021               	movlb	1	; select bank1
  1247  0946  07E1               	addwf	main@i^(0+128),f
  1248  0947  3000               	movlw	0
  1249  0948  3DE2               	addwfc	(main@i+1)^(0+128),f
  1250  0949  2933               	goto	l2592
  1251  094A                     l2594:	
  1252                           
  1253                           ;main.c: 115: UART_Write(' ');
  1254  094A  3020               	movlw	32
  1255  094B  3191  210F  3188   	fcall	_UART_Write
  1256                           
  1257                           ;main.c: 116: UART_Write('*');
  1258  094E  302A               	movlw	42
  1259  094F  3191  210F  3188   	fcall	_UART_Write
  1260                           
  1261                           ;main.c: 117: UART_Write('C');
  1262  0952  3043               	movlw	67
  1263  0953  3191  210F  3188   	fcall	_UART_Write
  1264                           
  1265                           ;main.c: 118: UART_Write('\n');
  1266  0956  300A               	movlw	10
  1267  0957  3191  210F  3188   	fcall	_UART_Write
  1268                           
  1269                           ;main.c: 120: _delay((unsigned long)((400)*(8000000/4000.0)));
  1270  095A  3005               	movlw	5
  1271  095B  0020               	movlb	0	; select bank0
  1272  095C  00ED               	movwf	??_main+1
  1273  095D  300F               	movlw	15
  1274  095E  00EC               	movwf	??_main
  1275  095F  30F1               	movlw	241
  1276  0960                     u4057:	
  1277  0960  0B89               	decfsz	9,f
  1278  0961  2960               	goto	u4057
  1279  0962  0BEC               	decfsz	??_main,f
  1280  0963  2960               	goto	u4057
  1281  0964  0BED               	decfsz	??_main+1,f
  1282  0965  2960               	goto	u4057
  1283  0966  2828               	goto	l2558
  1284  0967                     __end_of_main:	
  1285                           
  1286                           	psect	text1
  1287  0438                     __ptext1:	
  1288 ;; *************** function _sprintf *****************
  1289 ;; Defined at:
  1290 ;;		line 492 in file "D:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  1291 ;; Parameters:    Size  Location     Type
  1292 ;;  sp              1    wreg     PTR unsigned char 
  1293 ;;		 -> buffer(50), 
  1294 ;;  f               2   65[BANK0 ] PTR const unsigned char 
  1295 ;;		 -> STR_1(6), 
  1296 ;; Auto vars:     Size  Location     Type
  1297 ;;  sp              1   23[BANK1 ] PTR unsigned char 
  1298 ;;		 -> buffer(50), 
  1299 ;;  tmpval          4    8[BANK1 ] struct .
  1300 ;;  val             4    4[BANK1 ] unsigned long 
  1301 ;;  fval            3   18[BANK1 ] unsigned long 
  1302 ;;  prec            2   21[BANK1 ] int 
  1303 ;;  width           2   16[BANK1 ] int 
  1304 ;;  flag            2   14[BANK1 ] unsigned short 
  1305 ;;  exp             2   12[BANK1 ] int 
  1306 ;;  cp              2    0        PTR const unsigned char 
  1307 ;;  len             2    0        unsigned int 
  1308 ;;  c               1   24[BANK1 ] char 
  1309 ;;  ap              1    3[BANK1 ] PTR void [1]
  1310 ;;		 -> ?_sprintf(2), 
  1311 ;;  d               1    0        unsigned char 
  1312 ;; Return value:  Size  Location     Type
  1313 ;;                  2   65[BANK0 ] int 
  1314 ;; Registers used:
  1315 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1316 ;; Tracked objects:
  1317 ;;		On entry : 0/0
  1318 ;;		On exit  : 0/0
  1319 ;;		Unchanged: 0/0
  1320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1321 ;;      Params:         0       5       0       0       0       0       0       0
  1322 ;;      Locals:         0       0      25       0       0       0       0       0
  1323 ;;      Temps:          0       6       0       0       0       0       0       0
  1324 ;;      Totals:         0      11      25       0       0       0       0       0
  1325 ;;Total ram usage:       36 bytes
  1326 ;; Hardware stack levels used:    1
  1327 ;; Hardware stack levels required when called:    3
  1328 ;; This function calls:
  1329 ;;		___awdiv
  1330 ;;		___ftadd
  1331 ;;		___ftge
  1332 ;;		___ftmul
  1333 ;;		___ftneg
  1334 ;;		___ftsub
  1335 ;;		___fttol
  1336 ;;		___lldiv
  1337 ;;		___llmod
  1338 ;;		___lltoft
  1339 ;;		___wmul
  1340 ;;		__div_to_l_
  1341 ;;		__tdiv_to_l_
  1342 ;;		_fround
  1343 ;;		_isdigit
  1344 ;;		_scale
  1345 ;; This function is called by:
  1346 ;;		_main
  1347 ;; This function uses a non-reentrant model
  1348 ;;
  1349                           
  1350                           
  1351                           ;psect for function _sprintf
  1352  0438                     _sprintf:	
  1353                           
  1354                           ;incstack = 0
  1355                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1356                           ;sprintf@sp stored from wreg
  1357  0438  0021               	movlb	1	; select bank1
  1358  0439  00DC               	movwf	sprintf@sp^(0+128)
  1359                           
  1360                           ;doprnt.c: 494: va_list ap;
  1361                           ;doprnt.c: 499: signed char c;
  1362                           ;doprnt.c: 501: int width;
  1363                           ;doprnt.c: 504: int prec;
  1364                           ;doprnt.c: 508: unsigned short flag;
  1365                           ;doprnt.c: 515: char d;
  1366                           ;doprnt.c: 516: double fval;
  1367                           ;doprnt.c: 517: int exp;
  1368                           ;doprnt.c: 523: union {
  1369                           ;doprnt.c: 524: unsigned long vd;
  1370                           ;doprnt.c: 525: double integ;
  1371                           ;doprnt.c: 526: } tmpval;
  1372                           ;doprnt.c: 528: unsigned long val;
  1373                           ;doprnt.c: 529: unsigned len;
  1374                           ;doprnt.c: 530: const char * cp;
  1375                           ;doprnt.c: 533: *ap = __va_start();
  1376  043A  3063               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  1377  043B  0020               	movlb	0	; select bank0
  1378  043C  00E6               	movwf	??_sprintf
  1379  043D  0866               	movf	??_sprintf,w
  1380  043E  0021               	movlb	1	; select bank1
  1381  043F  00C8               	movwf	sprintf@ap^(0+128)
  1382  0440                     l2490:	
  1383                           ;doprnt.c: 536: while(c = *f++) {
  1384                           
  1385  0440  0020               	movlb	0	; select bank0
  1386  0441  0862               	movf	sprintf@f+1,w
  1387  0442  00E7               	movwf	??_sprintf+1
  1388  0443  0861               	movf	sprintf@f,w
  1389  0444  00E6               	movwf	??_sprintf
  1390  0445  0AE1               	incf	sprintf@f,f
  1391  0446  1903               	skipnz
  1392  0447  0AE2               	incf	sprintf@f+1,f
  1393  0448  0866               	movf	??_sprintf,w
  1394  0449  0084               	movwf	4
  1395  044A  0867               	movf	??_sprintf+1,w
  1396  044B  0085               	movwf	5
  1397  044C  0800               	movf	0,w	;code access
  1398  044D  00E8               	movwf	??_sprintf+2
  1399  044E  0868               	movf	??_sprintf+2,w
  1400  044F  0021               	movlb	1	; select bank1
  1401  0450  00DD               	movwf	sprintf@c^(0+128)
  1402  0451  085D               	movf	sprintf@c^(0+128),w
  1403  0452  1903               	btfsc	3,2
  1404  0453  2FE6               	goto	L11
  1405                           
  1406                           ;doprnt.c: 538: if(c != '%')
  1407  0454  3025               	movlw	37
  1408  0455  065D               	xorwf	sprintf@c^(0+128),w
  1409  0456  1903               	btfsc	3,2
  1410  0457  2C5C               	goto	l2212
  1411                           
  1412                           ;doprnt.c: 540: {
  1413                           ;doprnt.c: 541: ((*sp++ = (c)));
  1414  0458  085D               	movf	sprintf@c^(0+128),w
  1415  0459  0020               	movlb	0	; select bank0
  1416  045A  318F  2FEA         	goto	L6
  1417  045C                     l2212:	
  1418                           ;doprnt.c: 542: continue;
  1419                           
  1420                           
  1421                           ;doprnt.c: 543: }
  1422                           ;doprnt.c: 546: width = 0;
  1423  045C  01D5               	clrf	sprintf@width^(0+128)
  1424  045D  01D6               	clrf	(sprintf@width+1)^(0+128)
  1425                           
  1426                           ;doprnt.c: 548: flag = 0;
  1427  045E  01D3               	clrf	sprintf@flag^(0+128)
  1428  045F  01D4               	clrf	(sprintf@flag+1)^(0+128)
  1429                           
  1430                           ;doprnt.c: 551: switch(*f) {
  1431                           
  1432                           ;doprnt.c: 550: for(;;) {
  1433  0460  2C68               	goto	l2218
  1434  0461                     l111:	
  1435                           ;doprnt.c: 579: case '0':
  1436                           
  1437                           
  1438                           ;doprnt.c: 580: flag |= 0x04;
  1439  0461  0021               	movlb	1	; select bank1
  1440  0462  1553               	bsf	sprintf@flag^(0+128),2
  1441                           
  1442                           ;doprnt.c: 581: f++;
  1443  0463  3001               	movlw	1
  1444  0464  0020               	movlb	0	; select bank0
  1445  0465  07E1               	addwf	sprintf@f,f
  1446  0466  3000               	movlw	0
  1447  0467  3DE2               	addwfc	sprintf@f+1,f
  1448  0468                     l2218:	
  1449                           ;doprnt.c: 584: }
  1450                           
  1451                           ;doprnt.c: 582: continue;
  1452                           
  1453  0468  0020               	movlb	0	; select bank0
  1454  0469  0861               	movf	sprintf@f,w
  1455  046A  0084               	movwf	4
  1456  046B  0862               	movf	sprintf@f+1,w
  1457  046C  0085               	movwf	5
  1458  046D  0800               	movf	0,w	;code access
  1459                           
  1460                           ; Switch size 1, requested type "space"
  1461                           ; Number of cases is 1, Range of values is 48 to 48
  1462                           ; switch strategies available:
  1463                           ; Name         Instructions Cycles
  1464                           ; simple_byte            4     3 (average)
  1465                           ; direct_byte           11     9 (fixed)
  1466                           ; jumptable            263     9 (fixed)
  1467                           ;	Chosen strategy is simple_byte
  1468  046E  3A30               	xorlw	48	; case 48
  1469  046F  1903               	skipnz
  1470  0470  2C61               	goto	l111
  1471  0471  2C72               	goto	l2220
  1472  0472                     l2220:	
  1473                           ;doprnt.c: 586: }
  1474                           
  1475                           ;doprnt.c: 585: break;
  1476                           
  1477                           
  1478                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1479  0472  0861               	movf	sprintf@f,w
  1480  0473  0084               	movwf	4
  1481  0474  0862               	movf	sprintf@f+1,w
  1482  0475  0085               	movwf	5
  1483  0476  0800               	movf	0,w	;code access
  1484  0477  3191  2125  3184   	fcall	_isdigit
  1485  047A  1C03               	btfss	3,0
  1486  047B  2CB9               	goto	l2232
  1487                           
  1488                           ;doprnt.c: 598: width = 0;
  1489  047C  0021               	movlb	1	; select bank1
  1490  047D  01D5               	clrf	sprintf@width^(0+128)
  1491  047E  01D6               	clrf	(sprintf@width+1)^(0+128)
  1492  047F                     l2224:	
  1493                           ;doprnt.c: 599: do {
  1494                           
  1495                           
  1496                           ;doprnt.c: 600: width *= 10;
  1497  047F  300A               	movlw	10
  1498  0480  0020               	movlb	0	; select bank0
  1499  0481  00A4               	movwf	___wmul@multiplier
  1500  0482  3000               	movlw	0
  1501  0483  00A5               	movwf	___wmul@multiplier+1
  1502  0484  0021               	movlb	1	; select bank1
  1503  0485  0856               	movf	(sprintf@width+1)^(0+128),w
  1504  0486  0020               	movlb	0	; select bank0
  1505  0487  00A7               	movwf	___wmul@multiplicand+1
  1506  0488  0021               	movlb	1	; select bank1
  1507  0489  0855               	movf	sprintf@width^(0+128),w
  1508  048A  0020               	movlb	0	; select bank0
  1509  048B  00A6               	movwf	___wmul@multiplicand
  1510  048C  3191  216D  3184   	fcall	___wmul
  1511  048F  0020               	movlb	0	; select bank0
  1512  0490  0825               	movf	?___wmul+1,w
  1513  0491  0021               	movlb	1	; select bank1
  1514  0492  00D6               	movwf	(sprintf@width+1)^(0+128)
  1515  0493  0020               	movlb	0	; select bank0
  1516  0494  0824               	movf	?___wmul,w
  1517  0495  0021               	movlb	1	; select bank1
  1518  0496  00D5               	movwf	sprintf@width^(0+128)
  1519                           
  1520                           ;doprnt.c: 601: width += *f++ - '0';
  1521  0497  0020               	movlb	0	; select bank0
  1522  0498  0861               	movf	sprintf@f,w
  1523  0499  0084               	movwf	4
  1524  049A  0862               	movf	sprintf@f+1,w
  1525  049B  0085               	movwf	5
  1526  049C  0800               	movf	0,w	;code access
  1527  049D  3ED0               	addlw	208
  1528  049E  00E6               	movwf	??_sprintf
  1529  049F  30FF               	movlw	255
  1530  04A0  1803               	skipnc
  1531  04A1  3000               	movlw	0
  1532  04A2  00E7               	movwf	??_sprintf+1
  1533  04A3  0866               	movf	??_sprintf,w
  1534  04A4  0021               	movlb	1	; select bank1
  1535  04A5  07D5               	addwf	sprintf@width^(0+128),f
  1536  04A6  0020               	movlb	0	; select bank0
  1537  04A7  0867               	movf	??_sprintf+1,w
  1538  04A8  0021               	movlb	1	; select bank1
  1539  04A9  3DD6               	addwfc	(sprintf@width+1)^(0+128),f
  1540  04AA  3001               	movlw	1
  1541  04AB  0020               	movlb	0	; select bank0
  1542  04AC  07E1               	addwf	sprintf@f,f
  1543  04AD  3000               	movlw	0
  1544  04AE  3DE2               	addwfc	sprintf@f+1,f
  1545                           
  1546                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1547  04AF  0861               	movf	sprintf@f,w
  1548  04B0  0084               	movwf	4
  1549  04B1  0862               	movf	sprintf@f+1,w
  1550  04B2  0085               	movwf	5
  1551  04B3  0800               	movf	0,w	;code access
  1552  04B4  3191  2125  3184   	fcall	_isdigit
  1553  04B7  1803               	btfsc	3,0
  1554  04B8  2C7F               	goto	l2224
  1555  04B9                     l2232:	
  1556                           
  1557                           ;doprnt.c: 608: }
  1558                           ;doprnt.c: 611: if(*f == '.') {
  1559  04B9  0020               	movlb	0	; select bank0
  1560  04BA  0861               	movf	sprintf@f,w
  1561  04BB  0084               	movwf	4
  1562  04BC  0862               	movf	sprintf@f+1,w
  1563  04BD  0085               	movwf	5
  1564  04BE  0012               	moviw fsr0++
  1565  04BF  3A2E               	xorlw	46
  1566  04C0  1D03               	btfss	3,2
  1567  04C1  2D04               	goto	l2246
  1568                           
  1569                           ;doprnt.c: 612: flag |= 0x4000;
  1570  04C2  0021               	movlb	1	; select bank1
  1571  04C3  1754               	bsf	(sprintf@flag^(0+128)+1),6
  1572                           
  1573                           ;doprnt.c: 613: f++;
  1574  04C4  3001               	movlw	1
  1575  04C5  0020               	movlb	0	; select bank0
  1576  04C6  07E1               	addwf	sprintf@f,f
  1577  04C7  3000               	movlw	0
  1578  04C8  3DE2               	addwfc	sprintf@f+1,f
  1579                           
  1580                           ;doprnt.c: 620: {
  1581                           ;doprnt.c: 621: prec = 0;
  1582  04C9  0021               	movlb	1	; select bank1
  1583  04CA  01DA               	clrf	sprintf@prec^(0+128)
  1584  04CB  01DB               	clrf	(sprintf@prec+1)^(0+128)
  1585  04CC                     l2244:	
  1586                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1587                           
  1588  04CC  0020               	movlb	0	; select bank0
  1589  04CD  0861               	movf	sprintf@f,w
  1590  04CE  0084               	movwf	4
  1591  04CF  0862               	movf	sprintf@f+1,w
  1592  04D0  0085               	movwf	5
  1593  04D1  0800               	movf	0,w	;code access
  1594  04D2  3191  2125  3184   	fcall	_isdigit
  1595  04D5  1C03               	btfss	3,0
  1596  04D6  2D0B               	goto	l2252
  1597                           
  1598                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1599  04D7  0020               	movlb	0	; select bank0
  1600  04D8  0861               	movf	sprintf@f,w
  1601  04D9  0084               	movwf	4
  1602  04DA  0862               	movf	sprintf@f+1,w
  1603  04DB  0085               	movwf	5
  1604  04DC  0800               	movf	0,w	;code access
  1605  04DD  00E6               	movwf	??_sprintf
  1606  04DE  01E7               	clrf	??_sprintf+1
  1607  04DF  0021               	movlb	1	; select bank1
  1608  04E0  085B               	movf	(sprintf@prec+1)^(0+128),w
  1609  04E1  0020               	movlb	0	; select bank0
  1610  04E2  00A5               	movwf	___wmul@multiplier+1
  1611  04E3  0021               	movlb	1	; select bank1
  1612  04E4  085A               	movf	sprintf@prec^(0+128),w
  1613  04E5  0020               	movlb	0	; select bank0
  1614  04E6  00A4               	movwf	___wmul@multiplier
  1615  04E7  300A               	movlw	10
  1616  04E8  00A6               	movwf	___wmul@multiplicand
  1617  04E9  3000               	movlw	0
  1618  04EA  00A7               	movwf	___wmul@multiplicand+1
  1619  04EB  3191  216D  3184   	fcall	___wmul
  1620  04EE  0020               	movlb	0	; select bank0
  1621  04EF  0866               	movf	??_sprintf,w
  1622  04F0  0724               	addwf	?___wmul,w
  1623  04F1  00E8               	movwf	??_sprintf+2
  1624  04F2  0867               	movf	??_sprintf+1,w
  1625  04F3  3D25               	addwfc	?___wmul+1,w
  1626  04F4  00E9               	movwf	??_sprintf+3
  1627  04F5  0868               	movf	??_sprintf+2,w
  1628  04F6  3ED0               	addlw	208
  1629  04F7  0021               	movlb	1	; select bank1
  1630  04F8  00DA               	movwf	sprintf@prec^(0+128)
  1631  04F9  30FF               	movlw	255
  1632  04FA  0020               	movlb	0	; select bank0
  1633  04FB  3D69               	addwfc	??_sprintf+3,w
  1634  04FC  0021               	movlb	1	; select bank1
  1635  04FD  00DB               	movwf	(sprintf@prec+1)^(0+128)
  1636  04FE  3001               	movlw	1
  1637  04FF  0020               	movlb	0	; select bank0
  1638  0500  07E1               	addwf	sprintf@f,f
  1639  0501  3000               	movlw	0
  1640  0502  3DE2               	addwfc	sprintf@f+1,f
  1641  0503  2CCC               	goto	l2244
  1642  0504                     l2246:	
  1643                           ;doprnt.c: 624: }
  1644                           ;doprnt.c: 625: } else {
  1645                           
  1646                           
  1647                           ;doprnt.c: 626: prec = 0;
  1648  0504  0021               	movlb	1	; select bank1
  1649  0505  01DA               	clrf	sprintf@prec^(0+128)
  1650  0506  01DB               	clrf	(sprintf@prec+1)^(0+128)
  1651                           
  1652                           ;doprnt.c: 628: flag |= 0x1000;
  1653  0507  1654               	bsf	(sprintf@flag^(0+128)+1),4
  1654                           
  1655                           ;doprnt.c: 630: }
  1656                           ;doprnt.c: 635: switch(c = *f++) {
  1657  0508  2D0B               	goto	l2252
  1658  0509                     l126:	
  1659                           ;doprnt.c: 662: case 'f':
  1660                           
  1661                           ;doprnt.c: 638: goto alldone;
  1662                           
  1663                           ;doprnt.c: 637: case 0:
  1664                           
  1665                           
  1666                           ;doprnt.c: 663: flag |= 0x400;
  1667  0509  1554               	bsf	(sprintf@flag^(0+128)+1),2
  1668                           
  1669                           ;doprnt.c: 664: break;
  1670  050A  2D21               	goto	l2254
  1671  050B                     l2252:	
  1672                           ;doprnt.c: 822: }
  1673                           
  1674                           ;doprnt.c: 813: continue;
  1675                           
  1676                           ;doprnt.c: 802: default:
  1677                           
  1678  050B  0020               	movlb	0	; select bank0
  1679  050C  0862               	movf	sprintf@f+1,w
  1680  050D  00E7               	movwf	??_sprintf+1
  1681  050E  0861               	movf	sprintf@f,w
  1682  050F  00E6               	movwf	??_sprintf
  1683  0510  0AE1               	incf	sprintf@f,f
  1684  0511  1903               	skipnz
  1685  0512  0AE2               	incf	sprintf@f+1,f
  1686  0513  0866               	movf	??_sprintf,w
  1687  0514  0084               	movwf	4
  1688  0515  0867               	movf	??_sprintf+1,w
  1689  0516  0085               	movwf	5
  1690  0517  0800               	movf	0,w	;code access
  1691  0518  0021               	movlb	1	; select bank1
  1692  0519  00DD               	movwf	sprintf@c^(0+128)
  1693                           
  1694                           ; Switch size 1, requested type "space"
  1695                           ; Number of cases is 2, Range of values is 0 to 102
  1696                           ; switch strategies available:
  1697                           ; Name         Instructions Cycles
  1698                           ; simple_byte            7     4 (average)
  1699                           ; direct_byte          212     6 (fixed)
  1700                           ; jumptable            260     6 (fixed)
  1701                           ;	Chosen strategy is simple_byte
  1702  051A  3A00               	xorlw	0	; case 0
  1703  051B  1903               	skipnz
  1704  051C  2FE6               	goto	L11
  1705  051D  3A66               	xorlw	102	; case 102
  1706  051E  1903               	skipnz
  1707  051F  2D09               	goto	l126
  1708  0520  2C40               	goto	l2490
  1709  0521                     l2254:	
  1710                           
  1711                           ;doprnt.c: 825: if(flag & (0x700)) {
  1712  0521  3000               	movlw	0
  1713  0522  0553               	andwf	sprintf@flag^(0+128),w
  1714  0523  0020               	movlb	0	; select bank0
  1715  0524  00E6               	movwf	??_sprintf
  1716  0525  3007               	movlw	7
  1717  0526  0021               	movlb	1	; select bank1
  1718  0527  0554               	andwf	(sprintf@flag+1)^(0+128),w
  1719  0528  0020               	movlb	0	; select bank0
  1720  0529  00E7               	movwf	??_sprintf+1
  1721  052A  0866               	movf	??_sprintf,w
  1722  052B  0467               	iorwf	??_sprintf+1,w
  1723  052C  1903               	btfsc	3,2
  1724  052D  2FE8               	goto	L13
  1725                           
  1726                           ;doprnt.c: 827: if(flag & 0x1000)
  1727  052E  0021               	movlb	1	; select bank1
  1728  052F  1E54               	btfss	(sprintf@flag+1)^(0+128),4
  1729  0530  2D35               	goto	l2260
  1730                           
  1731                           ;doprnt.c: 829: prec = 6;
  1732  0531  3006               	movlw	6
  1733  0532  00DA               	movwf	sprintf@prec^(0+128)
  1734  0533  3000               	movlw	0
  1735  0534  00DB               	movwf	(sprintf@prec^(0+128)+1)
  1736  0535                     l2260:	
  1737                           
  1738                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1739  0535  0848               	movf	sprintf@ap^(0+128),w
  1740  0536  0086               	movwf	6
  1741  0537  0187               	clrf	7
  1742  0538  3F40               	moviw [0]fsr1
  1743  0539  00D7               	movwf	sprintf@fval^(0+128)
  1744  053A  3F41               	moviw [1]fsr1
  1745  053B  00D8               	movwf	(sprintf@fval+1)^(0+128)
  1746  053C  3F42               	moviw [2]fsr1
  1747  053D  00D9               	movwf	(sprintf@fval+2)^(0+128)
  1748  053E  3003               	movlw	3
  1749  053F  0020               	movlb	0	; select bank0
  1750  0540  00E6               	movwf	??_sprintf
  1751  0541  0866               	movf	??_sprintf,w
  1752  0542  0021               	movlb	1	; select bank1
  1753  0543  07C8               	addwf	sprintf@ap^(0+128),f
  1754                           
  1755                           ;doprnt.c: 831: if(fval < 0.0) {
  1756  0544  0857               	movf	sprintf@fval^(0+128),w
  1757  0545  00F0               	movwf	___ftge@ff1
  1758  0546  0858               	movf	(sprintf@fval+1)^(0+128),w
  1759  0547  00F1               	movwf	___ftge@ff1+1
  1760  0548  0859               	movf	(sprintf@fval+2)^(0+128),w
  1761  0549  00F2               	movwf	___ftge@ff1+2
  1762  054A  3000               	movlw	0
  1763  054B  00F3               	movwf	___ftge@ff2
  1764  054C  3000               	movlw	0
  1765  054D  00F4               	movwf	___ftge@ff2+1
  1766  054E  3000               	movlw	0
  1767  054F  00F5               	movwf	___ftge@ff2+2
  1768  0550  3191  2189  3184   	fcall	___ftge
  1769  0553  1803               	btfsc	3,0
  1770  0554  2D6A               	goto	l2270
  1771                           
  1772                           ;doprnt.c: 832: fval = -fval;
  1773  0555  0021               	movlb	1	; select bank1
  1774  0556  0857               	movf	sprintf@fval^(0+128),w
  1775  0557  00F0               	movwf	___ftneg@f1
  1776  0558  0858               	movf	(sprintf@fval+1)^(0+128),w
  1777  0559  00F1               	movwf	___ftneg@f1+1
  1778  055A  0859               	movf	(sprintf@fval+2)^(0+128),w
  1779  055B  00F2               	movwf	___ftneg@f1+2
  1780  055C  3184  2408  3184   	fcall	___ftneg
  1781  055F  0870               	movf	?___ftneg,w
  1782  0560  0021               	movlb	1	; select bank1
  1783  0561  00D7               	movwf	sprintf@fval^(0+128)
  1784  0562  0871               	movf	?___ftneg+1,w
  1785  0563  00D8               	movwf	(sprintf@fval+1)^(0+128)
  1786  0564  0872               	movf	?___ftneg+2,w
  1787  0565  00D9               	movwf	(sprintf@fval+2)^(0+128)
  1788                           
  1789                           ;doprnt.c: 833: flag |= 0x03;
  1790  0566  3003               	movlw	3
  1791  0567  04D3               	iorwf	sprintf@flag^(0+128),f
  1792  0568  3000               	movlw	0
  1793  0569  04D4               	iorwf	(sprintf@flag+1)^(0+128),f
  1794  056A                     l2270:	
  1795                           
  1796                           ;doprnt.c: 834: }
  1797                           ;doprnt.c: 835: exp = 0;
  1798  056A  0021               	movlb	1	; select bank1
  1799  056B  01D1               	clrf	sprintf@exp^(0+128)
  1800  056C  01D2               	clrf	(sprintf@exp+1)^(0+128)
  1801                           
  1802                           ;doprnt.c: 836: if( fval!=0) {
  1803  056D  0859               	movf	(sprintf@fval+2)^(0+128),w
  1804  056E  0458               	iorwf	(sprintf@fval+1)^(0+128),w
  1805  056F  0457               	iorwf	sprintf@fval^(0+128),w
  1806  0570  1903               	skipnz
  1807  0571  2E2A               	goto	l132
  1808                           
  1809                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1810  0572  30D7               	movlw	low (sprintf@fval| 0)
  1811  0573  0086               	movwf	6
  1812  0574  0187               	clrf	7
  1813  0575  3F40               	moviw [0]fsr1
  1814  0576  0020               	movlb	0	; select bank0
  1815  0577  00E6               	movwf	??_sprintf
  1816  0578  3F41               	moviw [1]fsr1
  1817  0579  00E7               	movwf	??_sprintf+1
  1818  057A  3F42               	moviw [2]fsr1
  1819  057B  00E8               	movwf	??_sprintf+2
  1820  057C  3F43               	moviw [3]fsr1
  1821  057D  00E9               	movwf	??_sprintf+3
  1822  057E  300F               	movlw	15
  1823  057F                     u3475:	
  1824  057F  36E9               	lsrf	??_sprintf+3,f
  1825  0580  0CE8               	rrf	??_sprintf+2,f
  1826  0581  0CE7               	rrf	??_sprintf+1,f
  1827  0582  0CE6               	rrf	??_sprintf,f
  1828  0583  0B89               	decfsz	9,f
  1829  0584  2D7F               	goto	u3475
  1830  0585  30FF               	movlw	255
  1831  0586  0566               	andwf	??_sprintf,w
  1832  0587  00EA               	movwf	??_sprintf+4
  1833  0588  3000               	movlw	0
  1834  0589  0567               	andwf	??_sprintf+1,w
  1835  058A  00EB               	movwf	??_sprintf+5
  1836  058B  086A               	movf	??_sprintf+4,w
  1837  058C  3E82               	addlw	130
  1838  058D  0021               	movlb	1	; select bank1
  1839  058E  00D1               	movwf	sprintf@exp^(0+128)
  1840  058F  30FF               	movlw	255
  1841  0590  0020               	movlb	0	; select bank0
  1842  0591  3D6B               	addwfc	??_sprintf+5,w
  1843  0592  0021               	movlb	1	; select bank1
  1844  0593  00D2               	movwf	(sprintf@exp+1)^(0+128)
  1845                           
  1846                           ;doprnt.c: 838: exp--;
  1847  0594  30FF               	movlw	255
  1848  0595  07D1               	addwf	sprintf@exp^(0+128),f
  1849  0596  30FF               	movlw	255
  1850  0597  3DD2               	addwfc	(sprintf@exp+1)^(0+128),f
  1851                           
  1852                           ;doprnt.c: 839: exp *= 3;
  1853  0598  3003               	movlw	3
  1854  0599  0020               	movlb	0	; select bank0
  1855  059A  00A4               	movwf	___wmul@multiplier
  1856  059B  3000               	movlw	0
  1857  059C  00A5               	movwf	___wmul@multiplier+1
  1858  059D  0021               	movlb	1	; select bank1
  1859  059E  0852               	movf	(sprintf@exp+1)^(0+128),w
  1860  059F  0020               	movlb	0	; select bank0
  1861  05A0  00A7               	movwf	___wmul@multiplicand+1
  1862  05A1  0021               	movlb	1	; select bank1
  1863  05A2  0851               	movf	sprintf@exp^(0+128),w
  1864  05A3  0020               	movlb	0	; select bank0
  1865  05A4  00A6               	movwf	___wmul@multiplicand
  1866  05A5  3191  216D  3184   	fcall	___wmul
  1867  05A8  0020               	movlb	0	; select bank0
  1868  05A9  0825               	movf	?___wmul+1,w
  1869  05AA  0021               	movlb	1	; select bank1
  1870  05AB  00D2               	movwf	(sprintf@exp+1)^(0+128)
  1871  05AC  0020               	movlb	0	; select bank0
  1872  05AD  0824               	movf	?___wmul,w
  1873  05AE  0021               	movlb	1	; select bank1
  1874  05AF  00D1               	movwf	sprintf@exp^(0+128)
  1875                           
  1876                           ;doprnt.c: 840: exp /= 10;
  1877  05B0  300A               	movlw	10
  1878  05B1  00F7               	movwf	___awdiv@divisor
  1879  05B2  3000               	movlw	0
  1880  05B3  00F8               	movwf	___awdiv@divisor+1
  1881  05B4  0852               	movf	(sprintf@exp+1)^(0+128),w
  1882  05B5  00FA               	movwf	___awdiv@dividend+1
  1883  05B6  0851               	movf	sprintf@exp^(0+128),w
  1884  05B7  00F9               	movwf	___awdiv@dividend
  1885  05B8  3192  229D  3184   	fcall	___awdiv
  1886  05BB  0878               	movf	?___awdiv+1,w
  1887  05BC  0021               	movlb	1	; select bank1
  1888  05BD  00D2               	movwf	(sprintf@exp+1)^(0+128)
  1889  05BE  0877               	movf	?___awdiv,w
  1890  05BF  00D1               	movwf	sprintf@exp^(0+128)
  1891                           
  1892                           ;doprnt.c: 841: if(exp < 0)
  1893  05C0  1FD2               	btfss	(sprintf@exp+1)^(0+128),7
  1894  05C1  2DC6               	goto	l2286
  1895                           
  1896                           ;doprnt.c: 842: exp--;
  1897  05C2  30FF               	movlw	255
  1898  05C3  07D1               	addwf	sprintf@exp^(0+128),f
  1899  05C4  30FF               	movlw	255
  1900  05C5  3DD2               	addwfc	(sprintf@exp+1)^(0+128),f
  1901  05C6                     l2286:	
  1902                           
  1903                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1904  05C6  0351               	decf	sprintf@exp^(0+128),w
  1905  05C7  3AFF               	xorlw	255
  1906  05C8  318A  22CC  3184   	fcall	_scale
  1907  05CB  0020               	movlb	0	; select bank0
  1908  05CC  0840               	movf	?_scale,w
  1909  05CD  0021               	movlb	1	; select bank1
  1910  05CE  00CD               	movwf	sprintf@tmpval^(0+128)
  1911  05CF  0020               	movlb	0	; select bank0
  1912  05D0  0841               	movf	?_scale+1,w
  1913  05D1  0021               	movlb	1	; select bank1
  1914  05D2  00CE               	movwf	(sprintf@tmpval+1)^(0+128)
  1915  05D3  0020               	movlb	0	; select bank0
  1916  05D4  0842               	movf	?_scale+2,w
  1917  05D5  0021               	movlb	1	; select bank1
  1918  05D6  00CF               	movwf	(sprintf@tmpval+2)^(0+128)
  1919                           
  1920                           ;doprnt.c: 847: tmpval.integ *= fval;
  1921  05D7  0857               	movf	sprintf@fval^(0+128),w
  1922  05D8  0020               	movlb	0	; select bank0
  1923  05D9  00B0               	movwf	___ftmul@f1
  1924  05DA  0021               	movlb	1	; select bank1
  1925  05DB  0858               	movf	(sprintf@fval+1)^(0+128),w
  1926  05DC  0020               	movlb	0	; select bank0
  1927  05DD  00B1               	movwf	___ftmul@f1+1
  1928  05DE  0021               	movlb	1	; select bank1
  1929  05DF  0859               	movf	(sprintf@fval+2)^(0+128),w
  1930  05E0  0020               	movlb	0	; select bank0
  1931  05E1  00B2               	movwf	___ftmul@f1+2
  1932  05E2  0021               	movlb	1	; select bank1
  1933  05E3  084D               	movf	sprintf@tmpval^(0+128),w
  1934  05E4  0020               	movlb	0	; select bank0
  1935  05E5  00B3               	movwf	___ftmul@f2
  1936  05E6  0021               	movlb	1	; select bank1
  1937  05E7  084E               	movf	(sprintf@tmpval+1)^(0+128),w
  1938  05E8  0020               	movlb	0	; select bank0
  1939  05E9  00B4               	movwf	___ftmul@f2+1
  1940  05EA  0021               	movlb	1	; select bank1
  1941  05EB  084F               	movf	(sprintf@tmpval+2)^(0+128),w
  1942  05EC  0020               	movlb	0	; select bank0
  1943  05ED  00B5               	movwf	___ftmul@f2+2
  1944  05EE  3194  2483  3184   	fcall	___ftmul
  1945  05F1  0020               	movlb	0	; select bank0
  1946  05F2  0830               	movf	?___ftmul,w
  1947  05F3  0021               	movlb	1	; select bank1
  1948  05F4  00CD               	movwf	sprintf@tmpval^(0+128)
  1949  05F5  0020               	movlb	0	; select bank0
  1950  05F6  0831               	movf	?___ftmul+1,w
  1951  05F7  0021               	movlb	1	; select bank1
  1952  05F8  00CE               	movwf	(sprintf@tmpval+1)^(0+128)
  1953  05F9  0020               	movlb	0	; select bank0
  1954  05FA  0832               	movf	?___ftmul+2,w
  1955  05FB  0021               	movlb	1	; select bank1
  1956  05FC  00CF               	movwf	(sprintf@tmpval+2)^(0+128)
  1957                           
  1958                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1959  05FD  084D               	movf	sprintf@tmpval^(0+128),w
  1960  05FE  00F0               	movwf	___ftge@ff1
  1961  05FF  084E               	movf	(sprintf@tmpval+1)^(0+128),w
  1962  0600  00F1               	movwf	___ftge@ff1+1
  1963  0601  084F               	movf	(sprintf@tmpval+2)^(0+128),w
  1964  0602  00F2               	movwf	___ftge@ff1+2
  1965  0603  3000               	movlw	0
  1966  0604  00F3               	movwf	___ftge@ff2
  1967  0605  3080               	movlw	128
  1968  0606  00F4               	movwf	___ftge@ff2+1
  1969  0607  303F               	movlw	63
  1970  0608  00F5               	movwf	___ftge@ff2+2
  1971  0609  3191  2189  3184   	fcall	___ftge
  1972  060C  1803               	btfsc	3,0
  1973  060D  2E13               	goto	l2294
  1974                           
  1975                           ;doprnt.c: 849: exp--;
  1976  060E  30FF               	movlw	255
  1977  060F  0021               	movlb	1	; select bank1
  1978  0610  07D1               	addwf	sprintf@exp^(0+128),f
  1979  0611  30FF               	movlw	255
  1980  0612  2E29               	goto	L2
  1981  0613                     l2294:	
  1982                           
  1983                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1984  0613  0021               	movlb	1	; select bank1
  1985  0614  084D               	movf	sprintf@tmpval^(0+128),w
  1986  0615  00F0               	movwf	___ftge@ff1
  1987  0616  084E               	movf	(sprintf@tmpval+1)^(0+128),w
  1988  0617  00F1               	movwf	___ftge@ff1+1
  1989  0618  084F               	movf	(sprintf@tmpval+2)^(0+128),w
  1990  0619  00F2               	movwf	___ftge@ff1+2
  1991  061A  3000               	movlw	0
  1992  061B  00F3               	movwf	___ftge@ff2
  1993  061C  3020               	movlw	32
  1994  061D  00F4               	movwf	___ftge@ff2+1
  1995  061E  3041               	movlw	65
  1996  061F  00F5               	movwf	___ftge@ff2+2
  1997  0620  3191  2189  3184   	fcall	___ftge
  1998  0623  1C03               	btfss	3,0
  1999  0624  2E2A               	goto	l132
  2000                           
  2001                           ;doprnt.c: 851: exp++;
  2002  0625  3001               	movlw	1
  2003  0626  0021               	movlb	1	; select bank1
  2004  0627  07D1               	addwf	sprintf@exp^(0+128),f
  2005  0628  3000               	movlw	0
  2006  0629                     L2:	
  2007  0629  3DD2               	addwfc	(sprintf@exp+1)^(0+128),f
  2008  062A                     l132:	
  2009                           
  2010                           ;doprnt.c: 852: }
  2011                           ;doprnt.c: 1112: if(prec <= 12)
  2012  062A  0021               	movlb	1	; select bank1
  2013  062B  085B               	movf	(sprintf@prec+1)^(0+128),w
  2014  062C  3A80               	xorlw	128
  2015  062D  0020               	movlb	0	; select bank0
  2016  062E  00E6               	movwf	??_sprintf
  2017  062F  3080               	movlw	128
  2018  0630  0266               	subwf	??_sprintf,w
  2019  0631  1D03               	skipz
  2020  0632  2E36               	goto	u3515
  2021  0633  300D               	movlw	13
  2022  0634  0021               	movlb	1	; select bank1
  2023  0635  025A               	subwf	sprintf@prec^(0+128),w
  2024  0636                     u3515:	
  2025  0636  1803               	skipnc
  2026  0637  2E5F               	goto	l2300
  2027                           
  2028                           ;doprnt.c: 1113: fval += fround(prec);
  2029  0638  0021               	movlb	1	; select bank1
  2030  0639  085A               	movf	sprintf@prec^(0+128),w
  2031  063A  3189  2167  3184   	fcall	_fround
  2032  063D  0020               	movlb	0	; select bank0
  2033  063E  0840               	movf	?_fround,w
  2034  063F  00CE               	movwf	___ftadd@f1
  2035  0640  0841               	movf	?_fround+1,w
  2036  0641  00CF               	movwf	___ftadd@f1+1
  2037  0642  0842               	movf	?_fround+2,w
  2038  0643  00D0               	movwf	___ftadd@f1+2
  2039  0644  0021               	movlb	1	; select bank1
  2040  0645  0857               	movf	sprintf@fval^(0+128),w
  2041  0646  0020               	movlb	0	; select bank0
  2042  0647  00D1               	movwf	___ftadd@f2
  2043  0648  0021               	movlb	1	; select bank1
  2044  0649  0858               	movf	(sprintf@fval+1)^(0+128),w
  2045  064A  0020               	movlb	0	; select bank0
  2046  064B  00D2               	movwf	___ftadd@f2+1
  2047  064C  0021               	movlb	1	; select bank1
  2048  064D  0859               	movf	(sprintf@fval+2)^(0+128),w
  2049  064E  0020               	movlb	0	; select bank0
  2050  064F  00D3               	movwf	___ftadd@f2+2
  2051  0650  3195  25ED  3184   	fcall	___ftadd
  2052  0653  0020               	movlb	0	; select bank0
  2053  0654  084E               	movf	?___ftadd,w
  2054  0655  0021               	movlb	1	; select bank1
  2055  0656  00D7               	movwf	sprintf@fval^(0+128)
  2056  0657  0020               	movlb	0	; select bank0
  2057  0658  084F               	movf	?___ftadd+1,w
  2058  0659  0021               	movlb	1	; select bank1
  2059  065A  00D8               	movwf	(sprintf@fval+1)^(0+128)
  2060  065B  0020               	movlb	0	; select bank0
  2061  065C  0850               	movf	?___ftadd+2,w
  2062  065D  0021               	movlb	1	; select bank1
  2063  065E  00D9               	movwf	(sprintf@fval+2)^(0+128)
  2064  065F                     l2300:	
  2065                           
  2066                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2067  065F  0021               	movlb	1	; select bank1
  2068  0660  0852               	movf	(sprintf@exp+1)^(0+128),w
  2069  0661  3A80               	xorlw	128
  2070  0662  0020               	movlb	0	; select bank0
  2071  0663  00E6               	movwf	??_sprintf
  2072  0664  3080               	movlw	128
  2073  0665  0266               	subwf	??_sprintf,w
  2074  0666  1D03               	skipz
  2075  0667  2E6B               	goto	u3525
  2076  0668  300A               	movlw	10
  2077  0669  0021               	movlb	1	; select bank1
  2078  066A  0251               	subwf	sprintf@exp^(0+128),w
  2079  066B                     u3525:	
  2080  066B  1803               	skipnc
  2081  066C  2E96               	goto	l2308
  2082  066D  0021               	movlb	1	; select bank1
  2083  066E  0859               	movf	(sprintf@fval+2)^(0+128),w
  2084  066F  0458               	iorwf	(sprintf@fval+1)^(0+128),w
  2085  0670  0457               	iorwf	sprintf@fval^(0+128),w
  2086  0671  1903               	skipnz
  2087  0672  2EDE               	goto	l2322
  2088  0673  0857               	movf	sprintf@fval^(0+128),w
  2089  0674  0020               	movlb	0	; select bank0
  2090  0675  00C9               	movwf	___fttol@f1
  2091  0676  0021               	movlb	1	; select bank1
  2092  0677  0858               	movf	(sprintf@fval+1)^(0+128),w
  2093  0678  0020               	movlb	0	; select bank0
  2094  0679  00CA               	movwf	___fttol@f1+1
  2095  067A  0021               	movlb	1	; select bank1
  2096  067B  0859               	movf	(sprintf@fval+2)^(0+128),w
  2097  067C  0020               	movlb	0	; select bank0
  2098  067D  00CB               	movwf	___fttol@f1+2
  2099  067E  3193  2353  3184   	fcall	___fttol
  2100  0681  0020               	movlb	0	; select bank0
  2101  0682  084C               	movf	?___fttol+3,w
  2102  0683  044B               	iorwf	?___fttol+2,w
  2103  0684  044A               	iorwf	?___fttol+1,w
  2104  0685  0449               	iorwf	?___fttol,w
  2105  0686  1D03               	skipz
  2106  0687  2EDE               	goto	l2322
  2107  0688  0021               	movlb	1	; select bank1
  2108  0689  0852               	movf	(sprintf@exp+1)^(0+128),w
  2109  068A  3A80               	xorlw	128
  2110  068B  0020               	movlb	0	; select bank0
  2111  068C  00E6               	movwf	??_sprintf
  2112  068D  3080               	movlw	128
  2113  068E  0266               	subwf	??_sprintf,w
  2114  068F  1D03               	skipz
  2115  0690  2E94               	goto	u3555
  2116  0691  3002               	movlw	2
  2117  0692  0021               	movlb	1	; select bank1
  2118  0693  0251               	subwf	sprintf@exp^(0+128),w
  2119  0694                     u3555:	
  2120  0694  1C03               	skipc
  2121  0695  2EDE               	goto	l2322
  2122  0696                     l2308:	
  2123                           
  2124                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2125  0696  0021               	movlb	1	; select bank1
  2126  0697  084D               	movf	sprintf@tmpval^(0+128),w
  2127  0698  00F0               	movwf	___ftge@ff1
  2128  0699  084E               	movf	(sprintf@tmpval+1)^(0+128),w
  2129  069A  00F1               	movwf	___ftge@ff1+1
  2130  069B  084F               	movf	(sprintf@tmpval+2)^(0+128),w
  2131  069C  00F2               	movwf	___ftge@ff1+2
  2132  069D  3070               	movlw	112
  2133  069E  00F3               	movwf	___ftge@ff2
  2134  069F  3089               	movlw	137
  2135  06A0  00F4               	movwf	___ftge@ff2+1
  2136  06A1  3040               	movlw	64
  2137  06A2  00F5               	movwf	___ftge@ff2+2
  2138  06A3  3191  2189  3184   	fcall	___ftge
  2139  06A6  1803               	btfsc	3,0
  2140  06A7  2EAA               	goto	l2312
  2141                           
  2142                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2143  06A8  30F7               	movlw	247
  2144  06A9  2EAB               	goto	L3
  2145  06AA                     l2312:	
  2146                           ;doprnt.c: 1122: }else{
  2147                           
  2148                           
  2149                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2150  06AA  30F8               	movlw	248
  2151  06AB                     L3:	
  2152  06AB  0021               	movlb	1	; select bank1
  2153  06AC  07D1               	addwf	sprintf@exp^(0+128),f
  2154  06AD  30FF               	movlw	255
  2155  06AE  3DD2               	addwfc	(sprintf@exp+1)^(0+128),f
  2156                           
  2157                           ;doprnt.c: 1124: }
  2158                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  2159  06AF  0851               	movf	sprintf@exp^(0+128),w
  2160  06B0  318A  22CC  3184   	fcall	_scale
  2161  06B3  0020               	movlb	0	; select bank0
  2162  06B4  0840               	movf	?_scale,w
  2163  06B5  0021               	movlb	1	; select bank1
  2164  06B6  00CD               	movwf	sprintf@tmpval^(0+128)
  2165  06B7  0020               	movlb	0	; select bank0
  2166  06B8  0841               	movf	?_scale+1,w
  2167  06B9  0021               	movlb	1	; select bank1
  2168  06BA  00CE               	movwf	(sprintf@tmpval+1)^(0+128)
  2169  06BB  0020               	movlb	0	; select bank0
  2170  06BC  0842               	movf	?_scale+2,w
  2171  06BD  0021               	movlb	1	; select bank1
  2172  06BE  00CF               	movwf	(sprintf@tmpval+2)^(0+128)
  2173                           
  2174                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2175  06BF  0857               	movf	sprintf@fval^(0+128),w
  2176  06C0  00F0               	movwf	__tdiv_to_l_@f1
  2177  06C1  0858               	movf	(sprintf@fval+1)^(0+128),w
  2178  06C2  00F1               	movwf	__tdiv_to_l_@f1+1
  2179  06C3  0859               	movf	(sprintf@fval+2)^(0+128),w
  2180  06C4  00F2               	movwf	__tdiv_to_l_@f1+2
  2181  06C5  084D               	movf	sprintf@tmpval^(0+128),w
  2182  06C6  00F3               	movwf	__tdiv_to_l_@f2
  2183  06C7  084E               	movf	(sprintf@tmpval+1)^(0+128),w
  2184  06C8  00F4               	movwf	__tdiv_to_l_@f2+1
  2185  06C9  084F               	movf	(sprintf@tmpval+2)^(0+128),w
  2186  06CA  00F5               	movwf	__tdiv_to_l_@f2+2
  2187  06CB  3195  2537  3184   	fcall	__tdiv_to_l_
  2188  06CE  0873               	movf	?__tdiv_to_l_+3,w
  2189  06CF  0021               	movlb	1	; select bank1
  2190  06D0  00CC               	movwf	(sprintf@val+3)^(0+128)
  2191  06D1  0872               	movf	?__tdiv_to_l_+2,w
  2192  06D2  00CB               	movwf	(sprintf@val+2)^(0+128)
  2193  06D3  0871               	movf	?__tdiv_to_l_+1,w
  2194  06D4  00CA               	movwf	(sprintf@val+1)^(0+128)
  2195  06D5  0870               	movf	?__tdiv_to_l_,w
  2196  06D6  00C9               	movwf	sprintf@val^(0+128)
  2197                           
  2198                           ;doprnt.c: 1129: fval = 0.0;
  2199  06D7  3000               	movlw	0
  2200  06D8  00D7               	movwf	sprintf@fval^(0+128)
  2201  06D9  3000               	movlw	0
  2202  06DA  00D8               	movwf	(sprintf@fval+1)^(0+128)
  2203  06DB  3000               	movlw	0
  2204  06DC  00D9               	movwf	(sprintf@fval+2)^(0+128)
  2205                           
  2206                           ;doprnt.c: 1130: } else {
  2207  06DD  2F2C               	goto	l2326
  2208  06DE                     l2322:	
  2209                           
  2210                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2211  06DE  0021               	movlb	1	; select bank1
  2212  06DF  0857               	movf	sprintf@fval^(0+128),w
  2213  06E0  0020               	movlb	0	; select bank0
  2214  06E1  00C9               	movwf	___fttol@f1
  2215  06E2  0021               	movlb	1	; select bank1
  2216  06E3  0858               	movf	(sprintf@fval+1)^(0+128),w
  2217  06E4  0020               	movlb	0	; select bank0
  2218  06E5  00CA               	movwf	___fttol@f1+1
  2219  06E6  0021               	movlb	1	; select bank1
  2220  06E7  0859               	movf	(sprintf@fval+2)^(0+128),w
  2221  06E8  0020               	movlb	0	; select bank0
  2222  06E9  00CB               	movwf	___fttol@f1+2
  2223  06EA  3193  2353  3184   	fcall	___fttol
  2224  06ED  0020               	movlb	0	; select bank0
  2225  06EE  084C               	movf	?___fttol+3,w
  2226  06EF  0021               	movlb	1	; select bank1
  2227  06F0  00CC               	movwf	(sprintf@val+3)^(0+128)
  2228  06F1  0020               	movlb	0	; select bank0
  2229  06F2  084B               	movf	?___fttol+2,w
  2230  06F3  0021               	movlb	1	; select bank1
  2231  06F4  00CB               	movwf	(sprintf@val+2)^(0+128)
  2232  06F5  0020               	movlb	0	; select bank0
  2233  06F6  084A               	movf	?___fttol+1,w
  2234  06F7  0021               	movlb	1	; select bank1
  2235  06F8  00CA               	movwf	(sprintf@val+1)^(0+128)
  2236  06F9  0020               	movlb	0	; select bank0
  2237  06FA  0849               	movf	?___fttol,w
  2238  06FB  0021               	movlb	1	; select bank1
  2239  06FC  00C9               	movwf	sprintf@val^(0+128)
  2240                           
  2241                           ;doprnt.c: 1132: fval -= (double)val;
  2242  06FD  084C               	movf	(sprintf@val+3)^(0+128),w
  2243  06FE  00FB               	movwf	___lltoft@c+3
  2244  06FF  084B               	movf	(sprintf@val+2)^(0+128),w
  2245  0700  00FA               	movwf	___lltoft@c+2
  2246  0701  084A               	movf	(sprintf@val+1)^(0+128),w
  2247  0702  00F9               	movwf	___lltoft@c+1
  2248  0703  0849               	movf	sprintf@val^(0+128),w
  2249  0704  00F8               	movwf	___lltoft@c
  2250  0705  3184  2410  3184   	fcall	___lltoft
  2251  0708  0878               	movf	?___lltoft,w
  2252  0709  0020               	movlb	0	; select bank0
  2253  070A  00DB               	movwf	___ftsub@f2
  2254  070B  0879               	movf	?___lltoft+1,w
  2255  070C  00DC               	movwf	___ftsub@f2+1
  2256  070D  087A               	movf	?___lltoft+2,w
  2257  070E  00DD               	movwf	___ftsub@f2+2
  2258  070F  0021               	movlb	1	; select bank1
  2259  0710  0857               	movf	sprintf@fval^(0+128),w
  2260  0711  0020               	movlb	0	; select bank0
  2261  0712  00DE               	movwf	___ftsub@f1
  2262  0713  0021               	movlb	1	; select bank1
  2263  0714  0858               	movf	(sprintf@fval+1)^(0+128),w
  2264  0715  0020               	movlb	0	; select bank0
  2265  0716  00DF               	movwf	___ftsub@f1+1
  2266  0717  0021               	movlb	1	; select bank1
  2267  0718  0859               	movf	(sprintf@fval+2)^(0+128),w
  2268  0719  0020               	movlb	0	; select bank0
  2269  071A  00E0               	movwf	___ftsub@f1+2
  2270  071B  3188  2004  3184   	fcall	___ftsub
  2271  071E  0020               	movlb	0	; select bank0
  2272  071F  085B               	movf	?___ftsub,w
  2273  0720  0021               	movlb	1	; select bank1
  2274  0721  00D7               	movwf	sprintf@fval^(0+128)
  2275  0722  0020               	movlb	0	; select bank0
  2276  0723  085C               	movf	?___ftsub+1,w
  2277  0724  0021               	movlb	1	; select bank1
  2278  0725  00D8               	movwf	(sprintf@fval+1)^(0+128)
  2279  0726  0020               	movlb	0	; select bank0
  2280  0727  085D               	movf	?___ftsub+2,w
  2281  0728  0021               	movlb	1	; select bank1
  2282  0729  00D9               	movwf	(sprintf@fval+2)^(0+128)
  2283                           
  2284                           ;doprnt.c: 1133: exp = 0;
  2285  072A  01D1               	clrf	sprintf@exp^(0+128)
  2286  072B  01D2               	clrf	(sprintf@exp+1)^(0+128)
  2287  072C                     l2326:	
  2288                           
  2289                           ;doprnt.c: 1134: }
  2290                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2291  072C  01DD               	clrf	sprintf@c^(0+128)
  2292  072D  0ADD               	incf	sprintf@c^(0+128),f
  2293  072E  300A               	movlw	10
  2294  072F  065D               	xorwf	sprintf@c^(0+128),w
  2295  0730  1903               	btfsc	3,2
  2296  0731  2F69               	goto	l2338
  2297  0732                     l2332:	
  2298                           
  2299                           ;doprnt.c: 1137: if(val < dpowers[c])
  2300  0732  085D               	movf	sprintf@c^(0+128),w
  2301  0733  0020               	movlb	0	; select bank0
  2302  0734  00E6               	movwf	??_sprintf
  2303  0735  01E7               	clrf	??_sprintf+1
  2304  0736  35E6               	lslf	??_sprintf,f
  2305  0737  0DE7               	rlf	??_sprintf+1,f
  2306  0738  35E6               	lslf	??_sprintf,f
  2307  0739  0DE7               	rlf	??_sprintf+1,f
  2308  073A  3000               	movlw	low (_dpowers| (0+32768))
  2309  073B  0766               	addwf	??_sprintf,w
  2310  073C  0084               	movwf	4
  2311  073D  3098               	movlw	high (_dpowers| (0+32768))
  2312  073E  3D67               	addwfc	??_sprintf+1,w
  2313  073F  0085               	movwf	5
  2314  0740  3F00               	moviw [0]fsr0
  2315  0741  00E8               	movwf	??_sprintf+2
  2316  0742  3F01               	moviw [1]fsr0
  2317  0743  00E9               	movwf	??_sprintf+3
  2318  0744  3F02               	moviw [2]fsr0
  2319  0745  00EA               	movwf	??_sprintf+4
  2320  0746  3F03               	moviw [3]fsr0
  2321  0747  00EB               	movwf	??_sprintf+5
  2322  0748  086B               	movf	??_sprintf+5,w
  2323  0749  0021               	movlb	1	; select bank1
  2324  074A  024C               	subwf	(sprintf@val+3)^(0+128),w
  2325  074B  1D03               	skipz
  2326  074C  2F5D               	goto	u3585
  2327  074D  0020               	movlb	0	; select bank0
  2328  074E  086A               	movf	??_sprintf+4,w
  2329  074F  0021               	movlb	1	; select bank1
  2330  0750  024B               	subwf	(sprintf@val+2)^(0+128),w
  2331  0751  1D03               	skipz
  2332  0752  2F5D               	goto	u3585
  2333  0753  0020               	movlb	0	; select bank0
  2334  0754  0869               	movf	??_sprintf+3,w
  2335  0755  0021               	movlb	1	; select bank1
  2336  0756  024A               	subwf	(sprintf@val+1)^(0+128),w
  2337  0757  1D03               	skipz
  2338  0758  2F5D               	goto	u3585
  2339  0759  0020               	movlb	0	; select bank0
  2340  075A  0868               	movf	??_sprintf+2,w
  2341  075B  0021               	movlb	1	; select bank1
  2342  075C  0249               	subwf	sprintf@val^(0+128),w
  2343  075D                     u3585:	
  2344  075D  1C03               	btfss	3,0
  2345  075E  2F69               	goto	l2338
  2346                           
  2347                           ;doprnt.c: 1138: break;
  2348  075F  3001               	movlw	1
  2349  0760  0020               	movlb	0	; select bank0
  2350  0761  00E6               	movwf	??_sprintf
  2351  0762  0866               	movf	??_sprintf,w
  2352  0763  0021               	movlb	1	; select bank1
  2353  0764  07DD               	addwf	sprintf@c^(0+128),f
  2354  0765  300A               	movlw	10
  2355  0766  065D               	xorwf	sprintf@c^(0+128),w
  2356  0767  1D03               	btfss	3,2
  2357  0768  2F32               	goto	l2332
  2358  0769                     l2338:	
  2359                           
  2360                           ;doprnt.c: 1142: width -= prec + c + exp;
  2361  0769  085D               	movf	sprintf@c^(0+128),w
  2362  076A  0020               	movlb	0	; select bank0
  2363  076B  00E6               	movwf	??_sprintf
  2364  076C  01E7               	clrf	??_sprintf+1
  2365  076D  1BE6               	btfsc	??_sprintf,7
  2366  076E  03E7               	decf	??_sprintf+1,f
  2367  076F  0021               	movlb	1	; select bank1
  2368  0770  085A               	movf	sprintf@prec^(0+128),w
  2369  0771  0020               	movlb	0	; select bank0
  2370  0772  0766               	addwf	??_sprintf,w
  2371  0773  00E8               	movwf	??_sprintf+2
  2372  0774  0021               	movlb	1	; select bank1
  2373  0775  085B               	movf	(sprintf@prec+1)^(0+128),w
  2374  0776  0020               	movlb	0	; select bank0
  2375  0777  3D67               	addwfc	??_sprintf+1,w
  2376  0778  00E9               	movwf	??_sprintf+3
  2377  0779  0021               	movlb	1	; select bank1
  2378  077A  0851               	movf	sprintf@exp^(0+128),w
  2379  077B  0020               	movlb	0	; select bank0
  2380  077C  0768               	addwf	??_sprintf+2,w
  2381  077D  00EA               	movwf	??_sprintf+4
  2382  077E  0021               	movlb	1	; select bank1
  2383  077F  0852               	movf	(sprintf@exp+1)^(0+128),w
  2384  0780  0020               	movlb	0	; select bank0
  2385  0781  3D69               	addwfc	??_sprintf+3,w
  2386  0782  00EB               	movwf	??_sprintf+5
  2387  0783  086A               	movf	??_sprintf+4,w
  2388  0784  0021               	movlb	1	; select bank1
  2389  0785  02D5               	subwf	sprintf@width^(0+128),f
  2390  0786  0020               	movlb	0	; select bank0
  2391  0787  086B               	movf	??_sprintf+5,w
  2392  0788  0021               	movlb	1	; select bank1
  2393  0789  3BD6               	subwfb	(sprintf@width+1)^(0+128),f
  2394                           
  2395                           ;doprnt.c: 1143: if(
  2396                           ;doprnt.c: 1147: prec)
  2397  078A  085A               	movf	sprintf@prec^(0+128),w
  2398  078B  045B               	iorwf	(sprintf@prec+1)^(0+128),w
  2399  078C  1903               	btfsc	3,2
  2400  078D  2F92               	goto	l2342
  2401                           
  2402                           ;doprnt.c: 1148: width--;
  2403  078E  30FF               	movlw	255
  2404  078F  07D5               	addwf	sprintf@width^(0+128),f
  2405  0790  30FF               	movlw	255
  2406  0791  3DD6               	addwfc	(sprintf@width+1)^(0+128),f
  2407  0792                     l2342:	
  2408                           
  2409                           ;doprnt.c: 1149: if(flag & 0x03)
  2410  0792  3003               	movlw	3
  2411  0793  0553               	andwf	sprintf@flag^(0+128),w
  2412  0794  0020               	movlb	0	; select bank0
  2413  0795  00E6               	movwf	??_sprintf
  2414  0796  3000               	movlw	0
  2415  0797  0021               	movlb	1	; select bank1
  2416  0798  0554               	andwf	(sprintf@flag+1)^(0+128),w
  2417  0799  0020               	movlb	0	; select bank0
  2418  079A  00E7               	movwf	??_sprintf+1
  2419  079B  0866               	movf	??_sprintf,w
  2420  079C  0467               	iorwf	??_sprintf+1,w
  2421  079D  1903               	btfsc	3,2
  2422  079E  2FA4               	goto	l2346
  2423                           
  2424                           ;doprnt.c: 1150: width--;
  2425  079F  30FF               	movlw	255
  2426  07A0  0021               	movlb	1	; select bank1
  2427  07A1  07D5               	addwf	sprintf@width^(0+128),f
  2428  07A2  30FF               	movlw	255
  2429  07A3  3DD6               	addwfc	(sprintf@width+1)^(0+128),f
  2430  07A4                     l2346:	
  2431                           
  2432                           ;doprnt.c: 1153: if(flag & 0x04) {
  2433  07A4  0021               	movlb	1	; select bank1
  2434  07A5  1D53               	btfss	sprintf@flag^(0+128),2
  2435  07A6  2FEA               	goto	L15
  2436                           
  2437                           ;doprnt.c: 1157: if(flag & 0x03)
  2438  07A7  3003               	movlw	3
  2439  07A8  0553               	andwf	sprintf@flag^(0+128),w
  2440  07A9  0020               	movlb	0	; select bank0
  2441  07AA  00E6               	movwf	??_sprintf
  2442  07AB  3000               	movlw	0
  2443  07AC  0021               	movlb	1	; select bank1
  2444  07AD  0554               	andwf	(sprintf@flag+1)^(0+128),w
  2445  07AE  0020               	movlb	0	; select bank0
  2446  07AF  00E7               	movwf	??_sprintf+1
  2447  07B0  0866               	movf	??_sprintf,w
  2448  07B1  0467               	iorwf	??_sprintf+1,w
  2449  07B2  1903               	btfsc	3,2
  2450  07B3  2FC3               	goto	l2360
  2451                           
  2452                           ;doprnt.c: 1159: ((*sp++ = ('-')));
  2453  07B4  302D               	movlw	45
  2454  07B5  00E6               	movwf	??_sprintf
  2455  07B6  0021               	movlb	1	; select bank1
  2456  07B7  085C               	movf	sprintf@sp^(0+128),w
  2457  07B8  0086               	movwf	6
  2458  07B9  3001               	movlw	1	; select bank2/3
  2459  07BA  0087               	movwf	7
  2460  07BB  0020               	movlb	0	; select bank0
  2461  07BC  0866               	movf	??_sprintf,w
  2462  07BD  0081               	movwf	1
  2463  07BE  3001               	movlw	1
  2464  07BF  00E6               	movwf	??_sprintf
  2465  07C0  0866               	movf	??_sprintf,w
  2466  07C1  0021               	movlb	1	; select bank1
  2467  07C2  07DC               	addwf	sprintf@sp^(0+128),f
  2468  07C3                     l2360:	
  2469                           ;doprnt.c: 1168: while(width > 0) {
  2470                           
  2471  07C3  0021               	movlb	1	; select bank1
  2472  07C4  0856               	movf	(sprintf@width+1)^(0+128),w
  2473  07C5  3A80               	xorlw	128
  2474  07C6  0020               	movlb	0	; select bank0
  2475  07C7  00E6               	movwf	??_sprintf
  2476  07C8  3080               	movlw	128
  2477  07C9  0266               	subwf	??_sprintf,w
  2478  07CA  1D03               	skipz
  2479  07CB  2FCF               	goto	u3645
  2480  07CC  3001               	movlw	1
  2481  07CD  0021               	movlb	1	; select bank1
  2482  07CE  0255               	subwf	sprintf@width^(0+128),w
  2483  07CF                     u3645:	
  2484  07CF  1C03               	btfss	3,0
  2485  07D0  2FEC               	goto	L17
  2486                           
  2487                           ;doprnt.c: 1169: ((*sp++ = ('0')));
  2488  07D1  3030               	movlw	48
  2489  07D2  0020               	movlb	0	; select bank0
  2490  07D3  00E6               	movwf	??_sprintf
  2491  07D4  0021               	movlb	1	; select bank1
  2492  07D5  085C               	movf	sprintf@sp^(0+128),w
  2493  07D6  0086               	movwf	6
  2494  07D7  3001               	movlw	1	; select bank2/3
  2495  07D8  0087               	movwf	7
  2496  07D9  0020               	movlb	0	; select bank0
  2497  07DA  0866               	movf	??_sprintf,w
  2498  07DB  0081               	movwf	1
  2499  07DC  3001               	movlw	1
  2500  07DD  00E6               	movwf	??_sprintf
  2501  07DE  0866               	movf	??_sprintf,w
  2502  07DF  0021               	movlb	1	; select bank1
  2503  07E0  07DC               	addwf	sprintf@sp^(0+128),f
  2504                           
  2505                           ;doprnt.c: 1170: width--;
  2506  07E1  30FF               	movlw	255
  2507  07E2  07D5               	addwf	sprintf@width^(0+128),f
  2508  07E3  30FF               	movlw	255
  2509  07E4  3DD6               	addwfc	(sprintf@width+1)^(0+128),f
  2510  07E5  2FC3               	goto	l2360
  2511  07E6                     L11:	
  2512  07E6                     L10:	
  2513  07E6  318F  2FFA         	ljmp	l2492
  2514  07E8                     L13:	
  2515  07E8                     L12:	
  2516  07E8  318E  2EE4         	ljmp	l2430
  2517  07EA                     L15:	
  2518  07EA                     L14:	
  2519  07EA  318D  2D24         	ljmp	l2368
  2520  07EC                     L17:	
  2521  07EC                     L16:	
  2522  07EC  318D  2D4F         	ljmp	l2384
  2523                           
  2524                           	psect	text2
  2525  0ACC                     __ptext2:	
  2526 ;; *************** function _scale *****************
  2527 ;; Defined at:
  2528 ;;		line 425 in file "D:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  2529 ;; Parameters:    Size  Location     Type
  2530 ;;  scl             1    wreg     char 
  2531 ;; Auto vars:     Size  Location     Type
  2532 ;;  scl             1   40[BANK0 ] char 
  2533 ;; Return value:  Size  Location     Type
  2534 ;;                  3   32[BANK0 ] char 
  2535 ;; Registers used:
  2536 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2537 ;; Tracked objects:
  2538 ;;		On entry : 0/0
  2539 ;;		On exit  : 0/0
  2540 ;;		Unchanged: 0/0
  2541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2542 ;;      Params:         0       3       0       0       0       0       0       0
  2543 ;;      Locals:         0       4       0       0       0       0       0       0
  2544 ;;      Temps:          0       2       0       0       0       0       0       0
  2545 ;;      Totals:         0       9       0       0       0       0       0       0
  2546 ;;Total ram usage:        9 bytes
  2547 ;; Hardware stack levels used:    1
  2548 ;; Hardware stack levels required when called:    2
  2549 ;; This function calls:
  2550 ;;		___awdiv
  2551 ;;		___awmod
  2552 ;;		___ftmul
  2553 ;;		___wmul
  2554 ;; This function is called by:
  2555 ;;		_sprintf
  2556 ;; This function uses a non-reentrant model
  2557 ;;
  2558                           
  2559                           
  2560                           ;psect for function _scale
  2561  0ACC                     _scale:	
  2562                           
  2563                           ;incstack = 0
  2564                           ; Regs used in _scale: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2565                           ;scale@scl stored from wreg
  2566  0ACC  0020               	movlb	0	; select bank0
  2567  0ACD  00C8               	movwf	scale@scl
  2568                           
  2569                           ;doprnt.c: 428: if(scl < 0) {
  2570  0ACE  1FC8               	btfss	scale@scl,7
  2571  0ACF  2BF1               	goto	l1910
  2572                           
  2573                           ;doprnt.c: 429: scl = -scl;
  2574  0AD0  09C8               	comf	scale@scl,f
  2575  0AD1  0AC8               	incf	scale@scl,f
  2576                           
  2577                           ;doprnt.c: 430: if(scl>=110)
  2578  0AD2  0848               	movf	scale@scl,w
  2579  0AD3  3A80               	xorlw	128
  2580  0AD4  3E12               	addlw	-238
  2581  0AD5  1C03               	skipc
  2582  0AD6  2B75               	goto	l1900
  2583                           
  2584                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2585  0AD7  300A               	movlw	10
  2586  0AD8  00F7               	movwf	___awdiv@divisor
  2587  0AD9  3000               	movlw	0
  2588  0ADA  00F8               	movwf	___awdiv@divisor+1
  2589  0ADB  0848               	movf	scale@scl,w
  2590  0ADC  00F2               	movwf	___awmod@dividend
  2591  0ADD  01F3               	clrf	___awmod@dividend+1
  2592  0ADE  1BF2               	btfsc	___awmod@dividend,7
  2593  0ADF  03F3               	decf	___awmod@dividend+1,f
  2594  0AE0  3064               	movlw	100
  2595  0AE1  00F0               	movwf	___awmod@divisor
  2596  0AE2  3000               	movlw	0
  2597  0AE3  00F1               	movwf	___awmod@divisor+1
  2598  0AE4  3192  2206  318A   	fcall	___awmod
  2599  0AE7  0871               	movf	?___awmod+1,w
  2600  0AE8  00FA               	movwf	___awdiv@dividend+1
  2601  0AE9  0870               	movf	?___awmod,w
  2602  0AEA  00F9               	movwf	___awdiv@dividend
  2603  0AEB  3192  229D  318A   	fcall	___awdiv
  2604  0AEE  0877               	movf	?___awdiv,w
  2605  0AEF  3E09               	addlw	9
  2606  0AF0  0020               	movlb	0	; select bank0
  2607  0AF1  00A4               	movwf	___wmul@multiplier
  2608  0AF2  3000               	movlw	0
  2609  0AF3  3D78               	addwfc	?___awdiv+1,w
  2610  0AF4  00A5               	movwf	___wmul@multiplier+1
  2611  0AF5  3003               	movlw	3
  2612  0AF6  00A6               	movwf	___wmul@multiplicand
  2613  0AF7  3000               	movlw	0
  2614  0AF8  00A7               	movwf	___wmul@multiplicand+1
  2615  0AF9  3191  216D  318A   	fcall	___wmul
  2616  0AFC  0020               	movlb	0	; select bank0
  2617  0AFD  0825               	movf	?___wmul+1,w
  2618  0AFE  0085               	movwf	5
  2619  0AFF  0824               	movf	?___wmul,w
  2620  0B00  0084               	movwf	4
  2621  0B01  304F               	movlw	low (__npowers_| (0+32768))
  2622  0B02  0784               	addwf	4,f
  2623  0B03  3098               	movlw	high (__npowers_| (0+32768))
  2624  0B04  3D85               	addwfc	5,f
  2625  0B05  3F00               	moviw [0]fsr0
  2626  0B06  00B0               	movwf	___ftmul@f1
  2627  0B07  3F01               	moviw [1]fsr0
  2628  0B08  00B1               	movwf	___ftmul@f1+1
  2629  0B09  3F02               	moviw [2]fsr0
  2630  0B0A  00B2               	movwf	___ftmul@f1+2
  2631  0B0B  3064               	movlw	100
  2632  0B0C  00F7               	movwf	___awdiv@divisor
  2633  0B0D  3000               	movlw	0
  2634  0B0E  00F8               	movwf	___awdiv@divisor+1
  2635  0B0F  0848               	movf	scale@scl,w
  2636  0B10  00F9               	movwf	___awdiv@dividend
  2637  0B11  01FA               	clrf	___awdiv@dividend+1
  2638  0B12  1BF9               	btfsc	___awdiv@dividend,7
  2639  0B13  03FA               	decf	___awdiv@dividend+1,f
  2640  0B14  3192  229D  318A   	fcall	___awdiv
  2641  0B17  0877               	movf	?___awdiv,w
  2642  0B18  3E12               	addlw	18
  2643  0B19  0020               	movlb	0	; select bank0
  2644  0B1A  00A4               	movwf	___wmul@multiplier
  2645  0B1B  3000               	movlw	0
  2646  0B1C  3D78               	addwfc	?___awdiv+1,w
  2647  0B1D  00A5               	movwf	___wmul@multiplier+1
  2648  0B1E  3003               	movlw	3
  2649  0B1F  00A6               	movwf	___wmul@multiplicand
  2650  0B20  3000               	movlw	0
  2651  0B21  00A7               	movwf	___wmul@multiplicand+1
  2652  0B22  3191  216D  318A   	fcall	___wmul
  2653  0B25  0020               	movlb	0	; select bank0
  2654  0B26  0825               	movf	?___wmul+1,w
  2655  0B27  0085               	movwf	5
  2656  0B28  0824               	movf	?___wmul,w
  2657  0B29  0084               	movwf	4
  2658  0B2A  304F               	movlw	low (__npowers_| (0+32768))
  2659  0B2B  0784               	addwf	4,f
  2660  0B2C  3098               	movlw	high (__npowers_| (0+32768))
  2661  0B2D  3D85               	addwfc	5,f
  2662  0B2E  3F00               	moviw [0]fsr0
  2663  0B2F  00B3               	movwf	___ftmul@f2
  2664  0B30  3F01               	moviw [1]fsr0
  2665  0B31  00B4               	movwf	___ftmul@f2+1
  2666  0B32  3F02               	moviw [2]fsr0
  2667  0B33  00B5               	movwf	___ftmul@f2+2
  2668  0B34  3194  2483  318A   	fcall	___ftmul
  2669  0B37  0020               	movlb	0	; select bank0
  2670  0B38  0830               	movf	?___ftmul,w
  2671  0B39  00C5               	movwf	_scale$609
  2672  0B3A  0831               	movf	?___ftmul+1,w
  2673  0B3B  00C6               	movwf	_scale$609+1
  2674  0B3C  0832               	movf	?___ftmul+2,w
  2675  0B3D  00C7               	movwf	_scale$609+2
  2676                           
  2677                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2678  0B3E  0848               	movf	scale@scl,w
  2679  0B3F  00F2               	movwf	___awmod@dividend
  2680  0B40  01F3               	clrf	___awmod@dividend+1
  2681  0B41  1BF2               	btfsc	___awmod@dividend,7
  2682  0B42  03F3               	decf	___awmod@dividend+1,f
  2683  0B43  300A               	movlw	10
  2684  0B44  00F0               	movwf	___awmod@divisor
  2685  0B45  3000               	movlw	0
  2686  0B46  00F1               	movwf	___awmod@divisor+1
  2687  0B47  3192  2206  318A   	fcall	___awmod
  2688  0B4A  0871               	movf	?___awmod+1,w
  2689  0B4B  0020               	movlb	0	; select bank0
  2690  0B4C  00A5               	movwf	___wmul@multiplier+1
  2691  0B4D  0870               	movf	?___awmod,w
  2692  0B4E  00A4               	movwf	___wmul@multiplier
  2693  0B4F  3003               	movlw	3
  2694  0B50  00A6               	movwf	___wmul@multiplicand
  2695  0B51  3000               	movlw	0
  2696  0B52  00A7               	movwf	___wmul@multiplicand+1
  2697  0B53  3191  216D  318A   	fcall	___wmul
  2698  0B56  0020               	movlb	0	; select bank0
  2699  0B57  0825               	movf	?___wmul+1,w
  2700  0B58  0085               	movwf	5
  2701  0B59  0824               	movf	?___wmul,w
  2702  0B5A  0084               	movwf	4
  2703  0B5B  304F               	movlw	low (__npowers_| (0+32768))
  2704  0B5C  0784               	addwf	4,f
  2705  0B5D  3098               	movlw	high (__npowers_| (0+32768))
  2706  0B5E  3D85               	addwfc	5,f
  2707  0B5F  3F00               	moviw [0]fsr0
  2708  0B60  00B0               	movwf	___ftmul@f1
  2709  0B61  3F01               	moviw [1]fsr0
  2710  0B62  00B1               	movwf	___ftmul@f1+1
  2711  0B63  3F02               	moviw [2]fsr0
  2712  0B64  00B2               	movwf	___ftmul@f1+2
  2713  0B65  0845               	movf	_scale$609,w
  2714  0B66  00B3               	movwf	___ftmul@f2
  2715  0B67  0846               	movf	_scale$609+1,w
  2716  0B68  00B4               	movwf	___ftmul@f2+1
  2717  0B69  0847               	movf	_scale$609+2,w
  2718  0B6A  00B5               	movwf	___ftmul@f2+2
  2719  0B6B  3194  2483         	fcall	___ftmul
  2720  0B6D  0020               	movlb	0	; select bank0
  2721  0B6E  0830               	movf	?___ftmul,w
  2722  0B6F  00C0               	movwf	?_scale
  2723  0B70  0831               	movf	?___ftmul+1,w
  2724  0B71  00C1               	movwf	?_scale+1
  2725  0B72  0832               	movf	?___ftmul+2,w
  2726  0B73  00C2               	movwf	?_scale+2
  2727  0B74  0008               	return
  2728  0B75                     l1900:	
  2729                           
  2730                           ;doprnt.c: 432: else if(scl > 10)
  2731  0B75  0848               	movf	scale@scl,w
  2732  0B76  3A80               	xorlw	128
  2733  0B77  3E75               	addlw	-139
  2734  0B78  1C03               	skipc
  2735  0B79  2BD4               	goto	l1906
  2736                           
  2737                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  2738  0B7A  0848               	movf	scale@scl,w
  2739  0B7B  00F2               	movwf	___awmod@dividend
  2740  0B7C  01F3               	clrf	___awmod@dividend+1
  2741  0B7D  1BF2               	btfsc	___awmod@dividend,7
  2742  0B7E  03F3               	decf	___awmod@dividend+1,f
  2743  0B7F  300A               	movlw	10
  2744  0B80  00F0               	movwf	___awmod@divisor
  2745  0B81  3000               	movlw	0
  2746  0B82  00F1               	movwf	___awmod@divisor+1
  2747  0B83  3192  2206  318A   	fcall	___awmod
  2748  0B86  0871               	movf	?___awmod+1,w
  2749  0B87  0020               	movlb	0	; select bank0
  2750  0B88  00A5               	movwf	___wmul@multiplier+1
  2751  0B89  0870               	movf	?___awmod,w
  2752  0B8A  00A4               	movwf	___wmul@multiplier
  2753  0B8B  3003               	movlw	3
  2754  0B8C  00A6               	movwf	___wmul@multiplicand
  2755  0B8D  3000               	movlw	0
  2756  0B8E  00A7               	movwf	___wmul@multiplicand+1
  2757  0B8F  3191  216D  318A   	fcall	___wmul
  2758  0B92  0020               	movlb	0	; select bank0
  2759  0B93  0825               	movf	?___wmul+1,w
  2760  0B94  0085               	movwf	5
  2761  0B95  0824               	movf	?___wmul,w
  2762  0B96  0084               	movwf	4
  2763  0B97  304F               	movlw	low (__npowers_| (0+32768))
  2764  0B98  0784               	addwf	4,f
  2765  0B99  3098               	movlw	high (__npowers_| (0+32768))
  2766  0B9A  3D85               	addwfc	5,f
  2767  0B9B  3F00               	moviw [0]fsr0
  2768  0B9C  00B0               	movwf	___ftmul@f1
  2769  0B9D  3F01               	moviw [1]fsr0
  2770  0B9E  00B1               	movwf	___ftmul@f1+1
  2771  0B9F  3F02               	moviw [2]fsr0
  2772  0BA0  00B2               	movwf	___ftmul@f1+2
  2773  0BA1  300A               	movlw	10
  2774  0BA2  00F7               	movwf	___awdiv@divisor
  2775  0BA3  3000               	movlw	0
  2776  0BA4  00F8               	movwf	___awdiv@divisor+1
  2777  0BA5  0848               	movf	scale@scl,w
  2778  0BA6  00F9               	movwf	___awdiv@dividend
  2779  0BA7  01FA               	clrf	___awdiv@dividend+1
  2780  0BA8  1BF9               	btfsc	___awdiv@dividend,7
  2781  0BA9  03FA               	decf	___awdiv@dividend+1,f
  2782  0BAA  3192  229D  318A   	fcall	___awdiv
  2783  0BAD  0877               	movf	?___awdiv,w
  2784  0BAE  3E09               	addlw	9
  2785  0BAF  0020               	movlb	0	; select bank0
  2786  0BB0  00A4               	movwf	___wmul@multiplier
  2787  0BB1  3000               	movlw	0
  2788  0BB2  3D78               	addwfc	?___awdiv+1,w
  2789  0BB3  00A5               	movwf	___wmul@multiplier+1
  2790  0BB4  3003               	movlw	3
  2791  0BB5  00A6               	movwf	___wmul@multiplicand
  2792  0BB6  3000               	movlw	0
  2793  0BB7  00A7               	movwf	___wmul@multiplicand+1
  2794  0BB8  3191  216D  318A   	fcall	___wmul
  2795  0BBB  0020               	movlb	0	; select bank0
  2796  0BBC  0825               	movf	?___wmul+1,w
  2797  0BBD  0085               	movwf	5
  2798  0BBE  0824               	movf	?___wmul,w
  2799  0BBF  0084               	movwf	4
  2800  0BC0  304F               	movlw	low (__npowers_| (0+32768))
  2801  0BC1  0784               	addwf	4,f
  2802  0BC2  3098               	movlw	high (__npowers_| (0+32768))
  2803  0BC3  3D85               	addwfc	5,f
  2804  0BC4  3F00               	moviw [0]fsr0
  2805  0BC5  00B3               	movwf	___ftmul@f2
  2806  0BC6  3F01               	moviw [1]fsr0
  2807  0BC7  00B4               	movwf	___ftmul@f2+1
  2808  0BC8  3F02               	moviw [2]fsr0
  2809  0BC9  00B5               	movwf	___ftmul@f2+2
  2810  0BCA  3194  2483         	fcall	___ftmul
  2811  0BCC  0020               	movlb	0	; select bank0
  2812  0BCD  0830               	movf	?___ftmul,w
  2813  0BCE  00C0               	movwf	?_scale
  2814  0BCF  0831               	movf	?___ftmul+1,w
  2815  0BD0  00C1               	movwf	?_scale+1
  2816  0BD1  0832               	movf	?___ftmul+2,w
  2817  0BD2  00C2               	movwf	?_scale+2
  2818  0BD3  0008               	return
  2819  0BD4                     l1906:	
  2820                           
  2821                           ;doprnt.c: 434: return _npowers_[scl];
  2822  0BD4  0848               	movf	scale@scl,w
  2823  0BD5  00C3               	movwf	??_scale
  2824  0BD6  01C4               	clrf	??_scale+1
  2825  0BD7  0843               	movf	??_scale,w
  2826  0BD8  00A4               	movwf	___wmul@multiplier
  2827  0BD9  0844               	movf	??_scale+1,w
  2828  0BDA  00A5               	movwf	___wmul@multiplier+1
  2829  0BDB  3003               	movlw	3
  2830  0BDC  00A6               	movwf	___wmul@multiplicand
  2831  0BDD  3000               	movlw	0
  2832  0BDE  00A7               	movwf	___wmul@multiplicand+1
  2833  0BDF  3191  216D         	fcall	___wmul
  2834  0BE1  0020               	movlb	0	; select bank0
  2835  0BE2  0825               	movf	?___wmul+1,w
  2836  0BE3  0085               	movwf	5
  2837  0BE4  0824               	movf	?___wmul,w
  2838  0BE5  0084               	movwf	4
  2839  0BE6  304F               	movlw	low (__npowers_| (0+32768))
  2840  0BE7  0784               	addwf	4,f
  2841  0BE8  3098               	movlw	high (__npowers_| (0+32768))
  2842  0BE9  3D85               	addwfc	5,f
  2843  0BEA  3F00               	moviw [0]fsr0
  2844  0BEB  00C0               	movwf	?_scale
  2845  0BEC  3F01               	moviw [1]fsr0
  2846  0BED  00C1               	movwf	?_scale+1
  2847  0BEE  3F02               	moviw [2]fsr0
  2848  0BEF  00C2               	movwf	?_scale+2
  2849  0BF0  0008               	return
  2850  0BF1                     l1910:	
  2851                           
  2852                           ;doprnt.c: 435: }
  2853                           ;doprnt.c: 436: if(scl>=110)
  2854  0BF1  0848               	movf	scale@scl,w
  2855  0BF2  3A80               	xorlw	128
  2856  0BF3  3E12               	addlw	-238
  2857  0BF4  1C03               	skipc
  2858  0BF5  2C94               	goto	l1918
  2859                           
  2860                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2861  0BF6  300A               	movlw	10
  2862  0BF7  00F7               	movwf	___awdiv@divisor
  2863  0BF8  3000               	movlw	0
  2864  0BF9  00F8               	movwf	___awdiv@divisor+1
  2865  0BFA  0848               	movf	scale@scl,w
  2866  0BFB  00F2               	movwf	___awmod@dividend
  2867  0BFC  01F3               	clrf	___awmod@dividend+1
  2868  0BFD  1BF2               	btfsc	___awmod@dividend,7
  2869  0BFE  03F3               	decf	___awmod@dividend+1,f
  2870  0BFF  3064               	movlw	100
  2871  0C00  00F0               	movwf	___awmod@divisor
  2872  0C01  3000               	movlw	0
  2873  0C02  00F1               	movwf	___awmod@divisor+1
  2874  0C03  3192  2206  318A   	fcall	___awmod
  2875  0C06  0871               	movf	?___awmod+1,w
  2876  0C07  00FA               	movwf	___awdiv@dividend+1
  2877  0C08  0870               	movf	?___awmod,w
  2878  0C09  00F9               	movwf	___awdiv@dividend
  2879  0C0A  3192  229D  318A   	fcall	___awdiv
  2880  0C0D  0877               	movf	?___awdiv,w
  2881  0C0E  3E09               	addlw	9
  2882  0C0F  0020               	movlb	0	; select bank0
  2883  0C10  00A4               	movwf	___wmul@multiplier
  2884  0C11  3000               	movlw	0
  2885  0C12  3D78               	addwfc	?___awdiv+1,w
  2886  0C13  00A5               	movwf	___wmul@multiplier+1
  2887  0C14  3003               	movlw	3
  2888  0C15  00A6               	movwf	___wmul@multiplicand
  2889  0C16  3000               	movlw	0
  2890  0C17  00A7               	movwf	___wmul@multiplicand+1
  2891  0C18  3191  216D  318A   	fcall	___wmul
  2892  0C1B  0020               	movlb	0	; select bank0
  2893  0C1C  0825               	movf	?___wmul+1,w
  2894  0C1D  0085               	movwf	5
  2895  0C1E  0824               	movf	?___wmul,w
  2896  0C1F  0084               	movwf	4
  2897  0C20  3028               	movlw	low (__powers_| (0+32768))
  2898  0C21  0784               	addwf	4,f
  2899  0C22  3098               	movlw	high (__powers_| (0+32768))
  2900  0C23  3D85               	addwfc	5,f
  2901  0C24  3F00               	moviw [0]fsr0
  2902  0C25  00B0               	movwf	___ftmul@f1
  2903  0C26  3F01               	moviw [1]fsr0
  2904  0C27  00B1               	movwf	___ftmul@f1+1
  2905  0C28  3F02               	moviw [2]fsr0
  2906  0C29  00B2               	movwf	___ftmul@f1+2
  2907  0C2A  3064               	movlw	100
  2908  0C2B  00F7               	movwf	___awdiv@divisor
  2909  0C2C  3000               	movlw	0
  2910  0C2D  00F8               	movwf	___awdiv@divisor+1
  2911  0C2E  0848               	movf	scale@scl,w
  2912  0C2F  00F9               	movwf	___awdiv@dividend
  2913  0C30  01FA               	clrf	___awdiv@dividend+1
  2914  0C31  1BF9               	btfsc	___awdiv@dividend,7
  2915  0C32  03FA               	decf	___awdiv@dividend+1,f
  2916  0C33  3192  229D  318A   	fcall	___awdiv
  2917  0C36  0877               	movf	?___awdiv,w
  2918  0C37  3E12               	addlw	18
  2919  0C38  0020               	movlb	0	; select bank0
  2920  0C39  00A4               	movwf	___wmul@multiplier
  2921  0C3A  3000               	movlw	0
  2922  0C3B  3D78               	addwfc	?___awdiv+1,w
  2923  0C3C  00A5               	movwf	___wmul@multiplier+1
  2924  0C3D  3003               	movlw	3
  2925  0C3E  00A6               	movwf	___wmul@multiplicand
  2926  0C3F  3000               	movlw	0
  2927  0C40  00A7               	movwf	___wmul@multiplicand+1
  2928  0C41  3191  216D  318A   	fcall	___wmul
  2929  0C44  0020               	movlb	0	; select bank0
  2930  0C45  0825               	movf	?___wmul+1,w
  2931  0C46  0085               	movwf	5
  2932  0C47  0824               	movf	?___wmul,w
  2933  0C48  0084               	movwf	4
  2934  0C49  3028               	movlw	low (__powers_| (0+32768))
  2935  0C4A  0784               	addwf	4,f
  2936  0C4B  3098               	movlw	high (__powers_| (0+32768))
  2937  0C4C  3D85               	addwfc	5,f
  2938  0C4D  3F00               	moviw [0]fsr0
  2939  0C4E  00B3               	movwf	___ftmul@f2
  2940  0C4F  3F01               	moviw [1]fsr0
  2941  0C50  00B4               	movwf	___ftmul@f2+1
  2942  0C51  3F02               	moviw [2]fsr0
  2943  0C52  00B5               	movwf	___ftmul@f2+2
  2944  0C53  3194  2483  318A   	fcall	___ftmul
  2945  0C56  0020               	movlb	0	; select bank0
  2946  0C57  0830               	movf	?___ftmul,w
  2947  0C58  00C5               	movwf	_scale$609
  2948  0C59  0831               	movf	?___ftmul+1,w
  2949  0C5A  00C6               	movwf	_scale$609+1
  2950  0C5B  0832               	movf	?___ftmul+2,w
  2951  0C5C  00C7               	movwf	_scale$609+2
  2952                           
  2953                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2954  0C5D  0848               	movf	scale@scl,w
  2955  0C5E  00F2               	movwf	___awmod@dividend
  2956  0C5F  01F3               	clrf	___awmod@dividend+1
  2957  0C60  1BF2               	btfsc	___awmod@dividend,7
  2958  0C61  03F3               	decf	___awmod@dividend+1,f
  2959  0C62  300A               	movlw	10
  2960  0C63  00F0               	movwf	___awmod@divisor
  2961  0C64  3000               	movlw	0
  2962  0C65  00F1               	movwf	___awmod@divisor+1
  2963  0C66  3192  2206  318A   	fcall	___awmod
  2964  0C69  0871               	movf	?___awmod+1,w
  2965  0C6A  0020               	movlb	0	; select bank0
  2966  0C6B  00A5               	movwf	___wmul@multiplier+1
  2967  0C6C  0870               	movf	?___awmod,w
  2968  0C6D  00A4               	movwf	___wmul@multiplier
  2969  0C6E  3003               	movlw	3
  2970  0C6F  00A6               	movwf	___wmul@multiplicand
  2971  0C70  3000               	movlw	0
  2972  0C71  00A7               	movwf	___wmul@multiplicand+1
  2973  0C72  3191  216D  318A   	fcall	___wmul
  2974  0C75  0020               	movlb	0	; select bank0
  2975  0C76  0825               	movf	?___wmul+1,w
  2976  0C77  0085               	movwf	5
  2977  0C78  0824               	movf	?___wmul,w
  2978  0C79  0084               	movwf	4
  2979  0C7A  3028               	movlw	low (__powers_| (0+32768))
  2980  0C7B  0784               	addwf	4,f
  2981  0C7C  3098               	movlw	high (__powers_| (0+32768))
  2982  0C7D  3D85               	addwfc	5,f
  2983  0C7E  3F00               	moviw [0]fsr0
  2984  0C7F  00B0               	movwf	___ftmul@f1
  2985  0C80  3F01               	moviw [1]fsr0
  2986  0C81  00B1               	movwf	___ftmul@f1+1
  2987  0C82  3F02               	moviw [2]fsr0
  2988  0C83  00B2               	movwf	___ftmul@f1+2
  2989  0C84  0845               	movf	_scale$609,w
  2990  0C85  00B3               	movwf	___ftmul@f2
  2991  0C86  0846               	movf	_scale$609+1,w
  2992  0C87  00B4               	movwf	___ftmul@f2+1
  2993  0C88  0847               	movf	_scale$609+2,w
  2994  0C89  00B5               	movwf	___ftmul@f2+2
  2995  0C8A  3194  2483         	fcall	___ftmul
  2996  0C8C  0020               	movlb	0	; select bank0
  2997  0C8D  0830               	movf	?___ftmul,w
  2998  0C8E  00C0               	movwf	?_scale
  2999  0C8F  0831               	movf	?___ftmul+1,w
  3000  0C90  00C1               	movwf	?_scale+1
  3001  0C91  0832               	movf	?___ftmul+2,w
  3002  0C92  00C2               	movwf	?_scale+2
  3003  0C93  0008               	return
  3004  0C94                     l1918:	
  3005                           
  3006                           ;doprnt.c: 438: else if(scl > 10)
  3007  0C94  0848               	movf	scale@scl,w
  3008  0C95  3A80               	xorlw	128
  3009  0C96  3E75               	addlw	-139
  3010  0C97  1C03               	skipc
  3011  0C98  2CF3               	goto	l1924
  3012                           
  3013                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3014  0C99  0848               	movf	scale@scl,w
  3015  0C9A  00F2               	movwf	___awmod@dividend
  3016  0C9B  01F3               	clrf	___awmod@dividend+1
  3017  0C9C  1BF2               	btfsc	___awmod@dividend,7
  3018  0C9D  03F3               	decf	___awmod@dividend+1,f
  3019  0C9E  300A               	movlw	10
  3020  0C9F  00F0               	movwf	___awmod@divisor
  3021  0CA0  3000               	movlw	0
  3022  0CA1  00F1               	movwf	___awmod@divisor+1
  3023  0CA2  3192  2206  318A   	fcall	___awmod
  3024  0CA5  0871               	movf	?___awmod+1,w
  3025  0CA6  0020               	movlb	0	; select bank0
  3026  0CA7  00A5               	movwf	___wmul@multiplier+1
  3027  0CA8  0870               	movf	?___awmod,w
  3028  0CA9  00A4               	movwf	___wmul@multiplier
  3029  0CAA  3003               	movlw	3
  3030  0CAB  00A6               	movwf	___wmul@multiplicand
  3031  0CAC  3000               	movlw	0
  3032  0CAD  00A7               	movwf	___wmul@multiplicand+1
  3033  0CAE  3191  216D  318A   	fcall	___wmul
  3034  0CB1  0020               	movlb	0	; select bank0
  3035  0CB2  0825               	movf	?___wmul+1,w
  3036  0CB3  0085               	movwf	5
  3037  0CB4  0824               	movf	?___wmul,w
  3038  0CB5  0084               	movwf	4
  3039  0CB6  3028               	movlw	low (__powers_| (0+32768))
  3040  0CB7  0784               	addwf	4,f
  3041  0CB8  3098               	movlw	high (__powers_| (0+32768))
  3042  0CB9  3D85               	addwfc	5,f
  3043  0CBA  3F00               	moviw [0]fsr0
  3044  0CBB  00B0               	movwf	___ftmul@f1
  3045  0CBC  3F01               	moviw [1]fsr0
  3046  0CBD  00B1               	movwf	___ftmul@f1+1
  3047  0CBE  3F02               	moviw [2]fsr0
  3048  0CBF  00B2               	movwf	___ftmul@f1+2
  3049  0CC0  300A               	movlw	10
  3050  0CC1  00F7               	movwf	___awdiv@divisor
  3051  0CC2  3000               	movlw	0
  3052  0CC3  00F8               	movwf	___awdiv@divisor+1
  3053  0CC4  0848               	movf	scale@scl,w
  3054  0CC5  00F9               	movwf	___awdiv@dividend
  3055  0CC6  01FA               	clrf	___awdiv@dividend+1
  3056  0CC7  1BF9               	btfsc	___awdiv@dividend,7
  3057  0CC8  03FA               	decf	___awdiv@dividend+1,f
  3058  0CC9  3192  229D  318A   	fcall	___awdiv
  3059  0CCC  0877               	movf	?___awdiv,w
  3060  0CCD  3E09               	addlw	9
  3061  0CCE  0020               	movlb	0	; select bank0
  3062  0CCF  00A4               	movwf	___wmul@multiplier
  3063  0CD0  3000               	movlw	0
  3064  0CD1  3D78               	addwfc	?___awdiv+1,w
  3065  0CD2  00A5               	movwf	___wmul@multiplier+1
  3066  0CD3  3003               	movlw	3
  3067  0CD4  00A6               	movwf	___wmul@multiplicand
  3068  0CD5  3000               	movlw	0
  3069  0CD6  00A7               	movwf	___wmul@multiplicand+1
  3070  0CD7  3191  216D  318A   	fcall	___wmul
  3071  0CDA  0020               	movlb	0	; select bank0
  3072  0CDB  0825               	movf	?___wmul+1,w
  3073  0CDC  0085               	movwf	5
  3074  0CDD  0824               	movf	?___wmul,w
  3075  0CDE  0084               	movwf	4
  3076  0CDF  3028               	movlw	low (__powers_| (0+32768))
  3077  0CE0  0784               	addwf	4,f
  3078  0CE1  3098               	movlw	high (__powers_| (0+32768))
  3079  0CE2  3D85               	addwfc	5,f
  3080  0CE3  3F00               	moviw [0]fsr0
  3081  0CE4  00B3               	movwf	___ftmul@f2
  3082  0CE5  3F01               	moviw [1]fsr0
  3083  0CE6  00B4               	movwf	___ftmul@f2+1
  3084  0CE7  3F02               	moviw [2]fsr0
  3085  0CE8  00B5               	movwf	___ftmul@f2+2
  3086  0CE9  3194  2483         	fcall	___ftmul
  3087  0CEB  0020               	movlb	0	; select bank0
  3088  0CEC  0830               	movf	?___ftmul,w
  3089  0CED  00C0               	movwf	?_scale
  3090  0CEE  0831               	movf	?___ftmul+1,w
  3091  0CEF  00C1               	movwf	?_scale+1
  3092  0CF0  0832               	movf	?___ftmul+2,w
  3093  0CF1  00C2               	movwf	?_scale+2
  3094  0CF2  0008               	return
  3095  0CF3                     l1924:	
  3096                           
  3097                           ;doprnt.c: 440: return _powers_[scl];
  3098  0CF3  0848               	movf	scale@scl,w
  3099  0CF4  00C3               	movwf	??_scale
  3100  0CF5  01C4               	clrf	??_scale+1
  3101  0CF6  0843               	movf	??_scale,w
  3102  0CF7  00A4               	movwf	___wmul@multiplier
  3103  0CF8  0844               	movf	??_scale+1,w
  3104  0CF9  00A5               	movwf	___wmul@multiplier+1
  3105  0CFA  3003               	movlw	3
  3106  0CFB  00A6               	movwf	___wmul@multiplicand
  3107  0CFC  3000               	movlw	0
  3108  0CFD  00A7               	movwf	___wmul@multiplicand+1
  3109  0CFE  3191  216D         	fcall	___wmul
  3110  0D00  0020               	movlb	0	; select bank0
  3111  0D01  0825               	movf	?___wmul+1,w
  3112  0D02  0085               	movwf	5
  3113  0D03  0824               	movf	?___wmul,w
  3114  0D04  0084               	movwf	4
  3115  0D05  3028               	movlw	low (__powers_| (0+32768))
  3116  0D06  0784               	addwf	4,f
  3117  0D07  3098               	movlw	high (__powers_| (0+32768))
  3118  0D08  3D85               	addwfc	5,f
  3119  0D09  3F00               	moviw [0]fsr0
  3120  0D0A  00C0               	movwf	?_scale
  3121  0D0B  3F01               	moviw [1]fsr0
  3122  0D0C  00C1               	movwf	?_scale+1
  3123  0D0D  3F02               	moviw [2]fsr0
  3124  0D0E  00C2               	movwf	?_scale+2
  3125  0D0F  0008               	return
  3126  0D10                     __end_of_scale:	
  3127                           
  3128                           	psect	text3
  3129  1125                     __ptext3:	
  3130 ;; *************** function _isdigit *****************
  3131 ;; Defined at:
  3132 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  3133 ;; Parameters:    Size  Location     Type
  3134 ;;  c               1    wreg     unsigned char 
  3135 ;; Auto vars:     Size  Location     Type
  3136 ;;  c               1    1[COMMON] unsigned char 
  3137 ;; Return value:  Size  Location     Type
  3138 ;;		None               void
  3139 ;; Registers used:
  3140 ;;		wreg, status,2, status,0
  3141 ;; Tracked objects:
  3142 ;;		On entry : 0/0
  3143 ;;		On exit  : 0/0
  3144 ;;		Unchanged: 0/0
  3145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3146 ;;      Params:         0       0       0       0       0       0       0       0
  3147 ;;      Locals:         2       0       0       0       0       0       0       0
  3148 ;;      Temps:          0       0       0       0       0       0       0       0
  3149 ;;      Totals:         2       0       0       0       0       0       0       0
  3150 ;;Total ram usage:        2 bytes
  3151 ;; Hardware stack levels used:    1
  3152 ;; This function calls:
  3153 ;;		Nothing
  3154 ;; This function is called by:
  3155 ;;		_sprintf
  3156 ;; This function uses a non-reentrant model
  3157 ;;
  3158                           
  3159                           
  3160                           ;psect for function _isdigit
  3161  1125                     _isdigit:	
  3162                           
  3163                           ;incstack = 0
  3164                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  3165                           ;isdigit@c stored from wreg
  3166  1125  00F1               	movwf	isdigit@c
  3167  1126  01F0               	clrf	_isdigit$436
  3168  1127  303A               	movlw	58
  3169  1128  0271               	subwf	isdigit@c,w
  3170  1129  1803               	skipnc
  3171  112A  2931               	goto	l1936
  3172  112B  3030               	movlw	48
  3173  112C  0271               	subwf	isdigit@c,w
  3174  112D  1C03               	skipc
  3175  112E  2931               	goto	l1936
  3176  112F  01F0               	clrf	_isdigit$436
  3177  1130  0AF0               	incf	_isdigit$436,f
  3178  1131                     l1936:	
  3179  1131  0C70               	rrf	_isdigit$436,w
  3180  1132  0008               	return
  3181  1133                     __end_of_isdigit:	
  3182                           
  3183                           	psect	text4
  3184  0967                     __ptext4:	
  3185 ;; *************** function _fround *****************
  3186 ;; Defined at:
  3187 ;;		line 409 in file "D:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  3188 ;; Parameters:    Size  Location     Type
  3189 ;;  prec            1    wreg     unsigned char 
  3190 ;; Auto vars:     Size  Location     Type
  3191 ;;  prec            1   45[BANK0 ] unsigned char 
  3192 ;; Return value:  Size  Location     Type
  3193 ;;                  3   32[BANK0 ] unsigned char 
  3194 ;; Registers used:
  3195 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3196 ;; Tracked objects:
  3197 ;;		On entry : 0/0
  3198 ;;		On exit  : 0/0
  3199 ;;		Unchanged: 0/0
  3200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3201 ;;      Params:         0       3       0       0       0       0       0       0
  3202 ;;      Locals:         0       7       0       0       0       0       0       0
  3203 ;;      Temps:          0       4       0       0       0       0       0       0
  3204 ;;      Totals:         0      14       0       0       0       0       0       0
  3205 ;;Total ram usage:       14 bytes
  3206 ;; Hardware stack levels used:    1
  3207 ;; Hardware stack levels required when called:    2
  3208 ;; This function calls:
  3209 ;;		___awdiv
  3210 ;;		___awmod
  3211 ;;		___ftmul
  3212 ;;		___wmul
  3213 ;; This function is called by:
  3214 ;;		_sprintf
  3215 ;; This function uses a non-reentrant model
  3216 ;;
  3217                           
  3218                           
  3219                           ;psect for function _fround
  3220  0967                     _fround:	
  3221                           
  3222                           ;incstack = 0
  3223                           ; Regs used in _fround: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3224                           ;fround@prec stored from wreg
  3225  0967  0020               	movlb	0	; select bank0
  3226  0968  00CD               	movwf	fround@prec
  3227                           
  3228                           ;doprnt.c: 413: if(prec>=110)
  3229  0969  306E               	movlw	110
  3230  096A  024D               	subwf	fround@prec,w
  3231  096B  1C03               	skipc
  3232  096C  2A27               	goto	l1876
  3233                           
  3234                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3235  096D  300A               	movlw	10
  3236  096E  00F7               	movwf	___awdiv@divisor
  3237  096F  3000               	movlw	0
  3238  0970  00F8               	movwf	___awdiv@divisor+1
  3239  0971  084D               	movf	fround@prec,w
  3240  0972  00C3               	movwf	??_fround
  3241  0973  01C4               	clrf	??_fround+1
  3242  0974  0843               	movf	??_fround,w
  3243  0975  00F2               	movwf	___awmod@dividend
  3244  0976  0844               	movf	??_fround+1,w
  3245  0977  00F3               	movwf	___awmod@dividend+1
  3246  0978  3064               	movlw	100
  3247  0979  00F0               	movwf	___awmod@divisor
  3248  097A  3000               	movlw	0
  3249  097B  00F1               	movwf	___awmod@divisor+1
  3250  097C  3192  2206  3189   	fcall	___awmod
  3251  097F  0871               	movf	?___awmod+1,w
  3252  0980  00FA               	movwf	___awdiv@dividend+1
  3253  0981  0870               	movf	?___awmod,w
  3254  0982  00F9               	movwf	___awdiv@dividend
  3255  0983  3192  229D  3189   	fcall	___awdiv
  3256  0986  0877               	movf	?___awdiv,w
  3257  0987  3E09               	addlw	9
  3258  0988  0020               	movlb	0	; select bank0
  3259  0989  00A4               	movwf	___wmul@multiplier
  3260  098A  3000               	movlw	0
  3261  098B  3D78               	addwfc	?___awdiv+1,w
  3262  098C  00A5               	movwf	___wmul@multiplier+1
  3263  098D  3003               	movlw	3
  3264  098E  00A6               	movwf	___wmul@multiplicand
  3265  098F  3000               	movlw	0
  3266  0990  00A7               	movwf	___wmul@multiplicand+1
  3267  0991  3191  216D  3189   	fcall	___wmul
  3268  0994  0020               	movlb	0	; select bank0
  3269  0995  0825               	movf	?___wmul+1,w
  3270  0996  0085               	movwf	5
  3271  0997  0824               	movf	?___wmul,w
  3272  0998  0084               	movwf	4
  3273  0999  304F               	movlw	low (__npowers_| (0+32768))
  3274  099A  0784               	addwf	4,f
  3275  099B  3098               	movlw	high (__npowers_| (0+32768))
  3276  099C  3D85               	addwfc	5,f
  3277  099D  3F00               	moviw [0]fsr0
  3278  099E  00B0               	movwf	___ftmul@f1
  3279  099F  3F01               	moviw [1]fsr0
  3280  09A0  00B1               	movwf	___ftmul@f1+1
  3281  09A1  3F02               	moviw [2]fsr0
  3282  09A2  00B2               	movwf	___ftmul@f1+2
  3283  09A3  3064               	movlw	100
  3284  09A4  00F7               	movwf	___awdiv@divisor
  3285  09A5  3000               	movlw	0
  3286  09A6  00F8               	movwf	___awdiv@divisor+1
  3287  09A7  084D               	movf	fround@prec,w
  3288  09A8  00C5               	movwf	??_fround+2
  3289  09A9  01C6               	clrf	??_fround+3
  3290  09AA  0845               	movf	??_fround+2,w
  3291  09AB  00F9               	movwf	___awdiv@dividend
  3292  09AC  0846               	movf	??_fround+3,w
  3293  09AD  00FA               	movwf	___awdiv@dividend+1
  3294  09AE  3192  229D  3189   	fcall	___awdiv
  3295  09B1  0877               	movf	?___awdiv,w
  3296  09B2  3E12               	addlw	18
  3297  09B3  0020               	movlb	0	; select bank0
  3298  09B4  00A4               	movwf	___wmul@multiplier
  3299  09B5  3000               	movlw	0
  3300  09B6  3D78               	addwfc	?___awdiv+1,w
  3301  09B7  00A5               	movwf	___wmul@multiplier+1
  3302  09B8  3003               	movlw	3
  3303  09B9  00A6               	movwf	___wmul@multiplicand
  3304  09BA  3000               	movlw	0
  3305  09BB  00A7               	movwf	___wmul@multiplicand+1
  3306  09BC  3191  216D  3189   	fcall	___wmul
  3307  09BF  0020               	movlb	0	; select bank0
  3308  09C0  0825               	movf	?___wmul+1,w
  3309  09C1  0085               	movwf	5
  3310  09C2  0824               	movf	?___wmul,w
  3311  09C3  0084               	movwf	4
  3312  09C4  304F               	movlw	low (__npowers_| (0+32768))
  3313  09C5  0784               	addwf	4,f
  3314  09C6  3098               	movlw	high (__npowers_| (0+32768))
  3315  09C7  3D85               	addwfc	5,f
  3316  09C8  3F00               	moviw [0]fsr0
  3317  09C9  00B3               	movwf	___ftmul@f2
  3318  09CA  3F01               	moviw [1]fsr0
  3319  09CB  00B4               	movwf	___ftmul@f2+1
  3320  09CC  3F02               	moviw [2]fsr0
  3321  09CD  00B5               	movwf	___ftmul@f2+2
  3322  09CE  3194  2483  3189   	fcall	___ftmul
  3323  09D1  0020               	movlb	0	; select bank0
  3324  09D2  0830               	movf	?___ftmul,w
  3325  09D3  00CA               	movwf	_fround$607
  3326  09D4  0831               	movf	?___ftmul+1,w
  3327  09D5  00CB               	movwf	_fround$607+1
  3328  09D6  0832               	movf	?___ftmul+2,w
  3329  09D7  00CC               	movwf	_fround$607+2
  3330                           
  3331                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3332  09D8  084D               	movf	fround@prec,w
  3333  09D9  00C3               	movwf	??_fround
  3334  09DA  01C4               	clrf	??_fround+1
  3335  09DB  0843               	movf	??_fround,w
  3336  09DC  00F2               	movwf	___awmod@dividend
  3337  09DD  0844               	movf	??_fround+1,w
  3338  09DE  00F3               	movwf	___awmod@dividend+1
  3339  09DF  300A               	movlw	10
  3340  09E0  00F0               	movwf	___awmod@divisor
  3341  09E1  3000               	movlw	0
  3342  09E2  00F1               	movwf	___awmod@divisor+1
  3343  09E3  3192  2206  3189   	fcall	___awmod
  3344  09E6  0871               	movf	?___awmod+1,w
  3345  09E7  0020               	movlb	0	; select bank0
  3346  09E8  00A5               	movwf	___wmul@multiplier+1
  3347  09E9  0870               	movf	?___awmod,w
  3348  09EA  00A4               	movwf	___wmul@multiplier
  3349  09EB  3003               	movlw	3
  3350  09EC  00A6               	movwf	___wmul@multiplicand
  3351  09ED  3000               	movlw	0
  3352  09EE  00A7               	movwf	___wmul@multiplicand+1
  3353  09EF  3191  216D  3189   	fcall	___wmul
  3354  09F2  0020               	movlb	0	; select bank0
  3355  09F3  0825               	movf	?___wmul+1,w
  3356  09F4  0085               	movwf	5
  3357  09F5  0824               	movf	?___wmul,w
  3358  09F6  0084               	movwf	4
  3359  09F7  304F               	movlw	low (__npowers_| (0+32768))
  3360  09F8  0784               	addwf	4,f
  3361  09F9  3098               	movlw	high (__npowers_| (0+32768))
  3362  09FA  3D85               	addwfc	5,f
  3363  09FB  3F00               	moviw [0]fsr0
  3364  09FC  00B0               	movwf	___ftmul@f1
  3365  09FD  3F01               	moviw [1]fsr0
  3366  09FE  00B1               	movwf	___ftmul@f1+1
  3367  09FF  3F02               	moviw [2]fsr0
  3368  0A00  00B2               	movwf	___ftmul@f1+2
  3369  0A01  084A               	movf	_fround$607,w
  3370  0A02  00B3               	movwf	___ftmul@f2
  3371  0A03  084B               	movf	_fround$607+1,w
  3372  0A04  00B4               	movwf	___ftmul@f2+1
  3373  0A05  084C               	movf	_fround$607+2,w
  3374  0A06  00B5               	movwf	___ftmul@f2+2
  3375  0A07  3194  2483  3189   	fcall	___ftmul
  3376  0A0A  0020               	movlb	0	; select bank0
  3377  0A0B  0830               	movf	?___ftmul,w
  3378  0A0C  00C7               	movwf	_fround$608
  3379  0A0D  0831               	movf	?___ftmul+1,w
  3380  0A0E  00C8               	movwf	_fround$608+1
  3381  0A0F  0832               	movf	?___ftmul+2,w
  3382  0A10  00C9               	movwf	_fround$608+2
  3383                           
  3384                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3385  0A11  3000               	movlw	0
  3386  0A12  00B0               	movwf	___ftmul@f1
  3387  0A13  3000               	movlw	0
  3388  0A14  00B1               	movwf	___ftmul@f1+1
  3389  0A15  303F               	movlw	63
  3390  0A16  00B2               	movwf	___ftmul@f1+2
  3391  0A17  0847               	movf	_fround$608,w
  3392  0A18  00B3               	movwf	___ftmul@f2
  3393  0A19  0848               	movf	_fround$608+1,w
  3394  0A1A  00B4               	movwf	___ftmul@f2+1
  3395  0A1B  0849               	movf	_fround$608+2,w
  3396  0A1C  00B5               	movwf	___ftmul@f2+2
  3397  0A1D  3194  2483         	fcall	___ftmul
  3398  0A1F  0020               	movlb	0	; select bank0
  3399  0A20  0830               	movf	?___ftmul,w
  3400  0A21  00C0               	movwf	?_fround
  3401  0A22  0831               	movf	?___ftmul+1,w
  3402  0A23  00C1               	movwf	?_fround+1
  3403  0A24  0832               	movf	?___ftmul+2,w
  3404  0A25  00C2               	movwf	?_fround+2
  3405  0A26  0008               	return
  3406  0A27                     l1876:	
  3407                           
  3408                           ;doprnt.c: 415: else if(prec > 10)
  3409  0A27  300B               	movlw	11
  3410  0A28  024D               	subwf	fround@prec,w
  3411  0A29  1C03               	skipc
  3412  0A2A  2A9F               	goto	l1884
  3413                           
  3414                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3415  0A2B  084D               	movf	fround@prec,w
  3416  0A2C  00C3               	movwf	??_fround
  3417  0A2D  01C4               	clrf	??_fround+1
  3418  0A2E  0843               	movf	??_fround,w
  3419  0A2F  00F2               	movwf	___awmod@dividend
  3420  0A30  0844               	movf	??_fround+1,w
  3421  0A31  00F3               	movwf	___awmod@dividend+1
  3422  0A32  300A               	movlw	10
  3423  0A33  00F0               	movwf	___awmod@divisor
  3424  0A34  3000               	movlw	0
  3425  0A35  00F1               	movwf	___awmod@divisor+1
  3426  0A36  3192  2206  3189   	fcall	___awmod
  3427  0A39  0871               	movf	?___awmod+1,w
  3428  0A3A  0020               	movlb	0	; select bank0
  3429  0A3B  00A5               	movwf	___wmul@multiplier+1
  3430  0A3C  0870               	movf	?___awmod,w
  3431  0A3D  00A4               	movwf	___wmul@multiplier
  3432  0A3E  3003               	movlw	3
  3433  0A3F  00A6               	movwf	___wmul@multiplicand
  3434  0A40  3000               	movlw	0
  3435  0A41  00A7               	movwf	___wmul@multiplicand+1
  3436  0A42  3191  216D  3189   	fcall	___wmul
  3437  0A45  0020               	movlb	0	; select bank0
  3438  0A46  0825               	movf	?___wmul+1,w
  3439  0A47  0085               	movwf	5
  3440  0A48  0824               	movf	?___wmul,w
  3441  0A49  0084               	movwf	4
  3442  0A4A  304F               	movlw	low (__npowers_| (0+32768))
  3443  0A4B  0784               	addwf	4,f
  3444  0A4C  3098               	movlw	high (__npowers_| (0+32768))
  3445  0A4D  3D85               	addwfc	5,f
  3446  0A4E  3F00               	moviw [0]fsr0
  3447  0A4F  00B0               	movwf	___ftmul@f1
  3448  0A50  3F01               	moviw [1]fsr0
  3449  0A51  00B1               	movwf	___ftmul@f1+1
  3450  0A52  3F02               	moviw [2]fsr0
  3451  0A53  00B2               	movwf	___ftmul@f1+2
  3452  0A54  300A               	movlw	10
  3453  0A55  00F7               	movwf	___awdiv@divisor
  3454  0A56  3000               	movlw	0
  3455  0A57  00F8               	movwf	___awdiv@divisor+1
  3456  0A58  084D               	movf	fround@prec,w
  3457  0A59  00C5               	movwf	??_fround+2
  3458  0A5A  01C6               	clrf	??_fround+3
  3459  0A5B  0845               	movf	??_fround+2,w
  3460  0A5C  00F9               	movwf	___awdiv@dividend
  3461  0A5D  0846               	movf	??_fround+3,w
  3462  0A5E  00FA               	movwf	___awdiv@dividend+1
  3463  0A5F  3192  229D  3189   	fcall	___awdiv
  3464  0A62  0877               	movf	?___awdiv,w
  3465  0A63  3E09               	addlw	9
  3466  0A64  0020               	movlb	0	; select bank0
  3467  0A65  00A4               	movwf	___wmul@multiplier
  3468  0A66  3000               	movlw	0
  3469  0A67  3D78               	addwfc	?___awdiv+1,w
  3470  0A68  00A5               	movwf	___wmul@multiplier+1
  3471  0A69  3003               	movlw	3
  3472  0A6A  00A6               	movwf	___wmul@multiplicand
  3473  0A6B  3000               	movlw	0
  3474  0A6C  00A7               	movwf	___wmul@multiplicand+1
  3475  0A6D  3191  216D  3189   	fcall	___wmul
  3476  0A70  0020               	movlb	0	; select bank0
  3477  0A71  0825               	movf	?___wmul+1,w
  3478  0A72  0085               	movwf	5
  3479  0A73  0824               	movf	?___wmul,w
  3480  0A74  0084               	movwf	4
  3481  0A75  304F               	movlw	low (__npowers_| (0+32768))
  3482  0A76  0784               	addwf	4,f
  3483  0A77  3098               	movlw	high (__npowers_| (0+32768))
  3484  0A78  3D85               	addwfc	5,f
  3485  0A79  3F00               	moviw [0]fsr0
  3486  0A7A  00B3               	movwf	___ftmul@f2
  3487  0A7B  3F01               	moviw [1]fsr0
  3488  0A7C  00B4               	movwf	___ftmul@f2+1
  3489  0A7D  3F02               	moviw [2]fsr0
  3490  0A7E  00B5               	movwf	___ftmul@f2+2
  3491  0A7F  3194  2483  3189   	fcall	___ftmul
  3492  0A82  0020               	movlb	0	; select bank0
  3493  0A83  0830               	movf	?___ftmul,w
  3494  0A84  00CA               	movwf	_fround$607
  3495  0A85  0831               	movf	?___ftmul+1,w
  3496  0A86  00CB               	movwf	_fround$607+1
  3497  0A87  0832               	movf	?___ftmul+2,w
  3498  0A88  00CC               	movwf	_fround$607+2
  3499                           
  3500                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3501  0A89  3000               	movlw	0
  3502  0A8A  00B0               	movwf	___ftmul@f1
  3503  0A8B  3000               	movlw	0
  3504  0A8C  00B1               	movwf	___ftmul@f1+1
  3505  0A8D  303F               	movlw	63
  3506  0A8E  00B2               	movwf	___ftmul@f1+2
  3507  0A8F  084A               	movf	_fround$607,w
  3508  0A90  00B3               	movwf	___ftmul@f2
  3509  0A91  084B               	movf	_fround$607+1,w
  3510  0A92  00B4               	movwf	___ftmul@f2+1
  3511  0A93  084C               	movf	_fround$607+2,w
  3512  0A94  00B5               	movwf	___ftmul@f2+2
  3513  0A95  3194  2483         	fcall	___ftmul
  3514  0A97  0020               	movlb	0	; select bank0
  3515  0A98  0830               	movf	?___ftmul,w
  3516  0A99  00C0               	movwf	?_fround
  3517  0A9A  0831               	movf	?___ftmul+1,w
  3518  0A9B  00C1               	movwf	?_fround+1
  3519  0A9C  0832               	movf	?___ftmul+2,w
  3520  0A9D  00C2               	movwf	?_fround+2
  3521  0A9E  0008               	return
  3522  0A9F                     l1884:	
  3523                           
  3524                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3525  0A9F  3000               	movlw	0
  3526  0AA0  00B0               	movwf	___ftmul@f1
  3527  0AA1  3000               	movlw	0
  3528  0AA2  00B1               	movwf	___ftmul@f1+1
  3529  0AA3  303F               	movlw	63
  3530  0AA4  00B2               	movwf	___ftmul@f1+2
  3531  0AA5  084D               	movf	fround@prec,w
  3532  0AA6  00C3               	movwf	??_fround
  3533  0AA7  01C4               	clrf	??_fround+1
  3534  0AA8  0843               	movf	??_fround,w
  3535  0AA9  00A4               	movwf	___wmul@multiplier
  3536  0AAA  0844               	movf	??_fround+1,w
  3537  0AAB  00A5               	movwf	___wmul@multiplier+1
  3538  0AAC  3003               	movlw	3
  3539  0AAD  00A6               	movwf	___wmul@multiplicand
  3540  0AAE  3000               	movlw	0
  3541  0AAF  00A7               	movwf	___wmul@multiplicand+1
  3542  0AB0  3191  216D  3189   	fcall	___wmul
  3543  0AB3  0020               	movlb	0	; select bank0
  3544  0AB4  0825               	movf	?___wmul+1,w
  3545  0AB5  0085               	movwf	5
  3546  0AB6  0824               	movf	?___wmul,w
  3547  0AB7  0084               	movwf	4
  3548  0AB8  304F               	movlw	low (__npowers_| (0+32768))
  3549  0AB9  0784               	addwf	4,f
  3550  0ABA  3098               	movlw	high (__npowers_| (0+32768))
  3551  0ABB  3D85               	addwfc	5,f
  3552  0ABC  3F00               	moviw [0]fsr0
  3553  0ABD  00B3               	movwf	___ftmul@f2
  3554  0ABE  3F01               	moviw [1]fsr0
  3555  0ABF  00B4               	movwf	___ftmul@f2+1
  3556  0AC0  3F02               	moviw [2]fsr0
  3557  0AC1  00B5               	movwf	___ftmul@f2+2
  3558  0AC2  3194  2483         	fcall	___ftmul
  3559  0AC4  0020               	movlb	0	; select bank0
  3560  0AC5  0830               	movf	?___ftmul,w
  3561  0AC6  00C0               	movwf	?_fround
  3562  0AC7  0831               	movf	?___ftmul+1,w
  3563  0AC8  00C1               	movwf	?_fround+1
  3564  0AC9  0832               	movf	?___ftmul+2,w
  3565  0ACA  00C2               	movwf	?_fround+2
  3566  0ACB  0008               	return
  3567  0ACC                     __end_of_fround:	
  3568                           
  3569                           	psect	text5
  3570  116D                     __ptext5:	
  3571 ;; *************** function ___wmul *****************
  3572 ;; Defined at:
  3573 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  3574 ;; Parameters:    Size  Location     Type
  3575 ;;  multiplier      2    4[BANK0 ] unsigned int 
  3576 ;;  multiplicand    2    6[BANK0 ] unsigned int 
  3577 ;; Auto vars:     Size  Location     Type
  3578 ;;  product         2   12[COMMON] unsigned int 
  3579 ;; Return value:  Size  Location     Type
  3580 ;;                  2    4[BANK0 ] unsigned int 
  3581 ;; Registers used:
  3582 ;;		wreg, status,2, status,0
  3583 ;; Tracked objects:
  3584 ;;		On entry : 0/0
  3585 ;;		On exit  : 0/0
  3586 ;;		Unchanged: 0/0
  3587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3588 ;;      Params:         0       4       0       0       0       0       0       0
  3589 ;;      Locals:         2       0       0       0       0       0       0       0
  3590 ;;      Temps:          0       0       0       0       0       0       0       0
  3591 ;;      Totals:         2       4       0       0       0       0       0       0
  3592 ;;Total ram usage:        6 bytes
  3593 ;; Hardware stack levels used:    1
  3594 ;; This function calls:
  3595 ;;		Nothing
  3596 ;; This function is called by:
  3597 ;;		_fround
  3598 ;;		_scale
  3599 ;;		_sprintf
  3600 ;; This function uses a non-reentrant model
  3601 ;;
  3602                           
  3603                           
  3604                           ;psect for function ___wmul
  3605  116D                     ___wmul:	
  3606                           
  3607                           ;incstack = 0
  3608                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3609  116D  01FC               	clrf	___wmul@product
  3610  116E  01FD               	clrf	___wmul@product+1
  3611  116F                     l1652:	
  3612  116F  0020               	movlb	0	; select bank0
  3613  1170  1C24               	btfss	___wmul@multiplier,0
  3614  1171  2976               	goto	l203
  3615  1172  0826               	movf	___wmul@multiplicand,w
  3616  1173  07FC               	addwf	___wmul@product,f
  3617  1174  0827               	movf	___wmul@multiplicand+1,w
  3618  1175  3DFD               	addwfc	___wmul@product+1,f
  3619  1176                     l203:	
  3620  1176  3001               	movlw	1
  3621  1177                     u2165:	
  3622  1177  35A6               	lslf	___wmul@multiplicand,f
  3623  1178  0DA7               	rlf	___wmul@multiplicand+1,f
  3624  1179  0B89               	decfsz	9,f
  3625  117A  2977               	goto	u2165
  3626  117B  3001               	movlw	1
  3627  117C                     u2175:	
  3628  117C  36A5               	lsrf	___wmul@multiplier+1,f
  3629  117D  0CA4               	rrf	___wmul@multiplier,f
  3630  117E  0B89               	decfsz	9,f
  3631  117F  297C               	goto	u2175
  3632  1180  0824               	movf	___wmul@multiplier,w
  3633  1181  0425               	iorwf	___wmul@multiplier+1,w
  3634  1182  1D03               	btfss	3,2
  3635  1183  296F               	goto	l1652
  3636  1184  087D               	movf	___wmul@product+1,w
  3637  1185  00A5               	movwf	?___wmul+1
  3638  1186  087C               	movf	___wmul@product,w
  3639  1187  00A4               	movwf	?___wmul
  3640  1188  0008               	return
  3641  1189                     __end_of___wmul:	
  3642                           
  3643                           	psect	text6
  3644  1483                     __ptext6:	
  3645 ;; *************** function ___ftmul *****************
  3646 ;; Defined at:
  3647 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftmul.c"
  3648 ;; Parameters:    Size  Location     Type
  3649 ;;  f1              3   16[BANK0 ] float 
  3650 ;;  f2              3   19[BANK0 ] float 
  3651 ;; Auto vars:     Size  Location     Type
  3652 ;;  f3_as_produc    3   27[BANK0 ] unsigned um
  3653 ;;  sign            1   31[BANK0 ] unsigned char 
  3654 ;;  cntr            1   30[BANK0 ] unsigned char 
  3655 ;;  exp             1   26[BANK0 ] unsigned char 
  3656 ;; Return value:  Size  Location     Type
  3657 ;;                  3   16[BANK0 ] float 
  3658 ;; Registers used:
  3659 ;;		wreg, status,2, status,0, pclath, cstack
  3660 ;; Tracked objects:
  3661 ;;		On entry : 0/0
  3662 ;;		On exit  : 0/0
  3663 ;;		Unchanged: 0/0
  3664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3665 ;;      Params:         0       6       0       0       0       0       0       0
  3666 ;;      Locals:         0       6       0       0       0       0       0       0
  3667 ;;      Temps:          0       4       0       0       0       0       0       0
  3668 ;;      Totals:         0      16       0       0       0       0       0       0
  3669 ;;Total ram usage:       16 bytes
  3670 ;; Hardware stack levels used:    1
  3671 ;; Hardware stack levels required when called:    1
  3672 ;; This function calls:
  3673 ;;		___ftpack
  3674 ;; This function is called by:
  3675 ;;		_main
  3676 ;;		_fround
  3677 ;;		_scale
  3678 ;;		_sprintf
  3679 ;; This function uses a non-reentrant model
  3680 ;;
  3681                           
  3682                           
  3683                           ;psect for function ___ftmul
  3684  1483                     ___ftmul:	
  3685                           
  3686                           ;incstack = 0
  3687                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  3688  1483  0020               	movlb	0	; select bank0
  3689  1484  0830               	movf	___ftmul@f1,w
  3690  1485  00B6               	movwf	??___ftmul
  3691  1486  0831               	movf	___ftmul@f1+1,w
  3692  1487  00B7               	movwf	??___ftmul+1
  3693  1488  0832               	movf	___ftmul@f1+2,w
  3694  1489  00B8               	movwf	??___ftmul+2
  3695  148A  1003               	clrc
  3696  148B  0D37               	rlf	??___ftmul+1,w
  3697  148C  0D38               	rlf	??___ftmul+2,w
  3698  148D  00B9               	movwf	??___ftmul+3
  3699  148E  0839               	movf	??___ftmul+3,w
  3700  148F  00BA               	movwf	___ftmul@exp
  3701  1490  083A               	movf	___ftmul@exp,w
  3702  1491  1D03               	btfss	3,2
  3703  1492  2C9A               	goto	l1822
  3704  1493  3000               	movlw	0
  3705  1494  00B0               	movwf	?___ftmul
  3706  1495  3000               	movlw	0
  3707  1496  00B1               	movwf	?___ftmul+1
  3708  1497  3000               	movlw	0
  3709  1498  00B2               	movwf	?___ftmul+2
  3710  1499  0008               	return
  3711  149A                     l1822:	
  3712  149A  0833               	movf	___ftmul@f2,w
  3713  149B  00B6               	movwf	??___ftmul
  3714  149C  0834               	movf	___ftmul@f2+1,w
  3715  149D  00B7               	movwf	??___ftmul+1
  3716  149E  0835               	movf	___ftmul@f2+2,w
  3717  149F  00B8               	movwf	??___ftmul+2
  3718  14A0  1003               	clrc
  3719  14A1  0D37               	rlf	??___ftmul+1,w
  3720  14A2  0D38               	rlf	??___ftmul+2,w
  3721  14A3  00B9               	movwf	??___ftmul+3
  3722  14A4  0839               	movf	??___ftmul+3,w
  3723  14A5  00BF               	movwf	___ftmul@sign
  3724  14A6  083F               	movf	___ftmul@sign,w
  3725  14A7  1D03               	btfss	3,2
  3726  14A8  2CB0               	goto	l1828
  3727  14A9  3000               	movlw	0
  3728  14AA  00B0               	movwf	?___ftmul
  3729  14AB  3000               	movlw	0
  3730  14AC  00B1               	movwf	?___ftmul+1
  3731  14AD  3000               	movlw	0
  3732  14AE  00B2               	movwf	?___ftmul+2
  3733  14AF  0008               	return
  3734  14B0                     l1828:	
  3735  14B0  083F               	movf	___ftmul@sign,w
  3736  14B1  3E7B               	addlw	123
  3737  14B2  00B6               	movwf	??___ftmul
  3738  14B3  0836               	movf	??___ftmul,w
  3739  14B4  07BA               	addwf	___ftmul@exp,f
  3740  14B5  0830               	movf	___ftmul@f1,w
  3741  14B6  00B6               	movwf	??___ftmul
  3742  14B7  0831               	movf	___ftmul@f1+1,w
  3743  14B8  00B7               	movwf	??___ftmul+1
  3744  14B9  0832               	movf	___ftmul@f1+2,w
  3745  14BA  00B8               	movwf	??___ftmul+2
  3746  14BB  3010               	movlw	16
  3747  14BC                     u2635:	
  3748  14BC  36B8               	lsrf	??___ftmul+2,f
  3749  14BD  0CB7               	rrf	??___ftmul+1,f
  3750  14BE  0CB6               	rrf	??___ftmul,f
  3751  14BF  0B89               	decfsz	9,f
  3752  14C0  2CBC               	goto	u2635
  3753  14C1  0836               	movf	??___ftmul,w
  3754  14C2  00B9               	movwf	??___ftmul+3
  3755  14C3  0839               	movf	??___ftmul+3,w
  3756  14C4  00BF               	movwf	___ftmul@sign
  3757  14C5  0833               	movf	___ftmul@f2,w
  3758  14C6  00B6               	movwf	??___ftmul
  3759  14C7  0834               	movf	___ftmul@f2+1,w
  3760  14C8  00B7               	movwf	??___ftmul+1
  3761  14C9  0835               	movf	___ftmul@f2+2,w
  3762  14CA  00B8               	movwf	??___ftmul+2
  3763  14CB  3010               	movlw	16
  3764  14CC                     u2645:	
  3765  14CC  36B8               	lsrf	??___ftmul+2,f
  3766  14CD  0CB7               	rrf	??___ftmul+1,f
  3767  14CE  0CB6               	rrf	??___ftmul,f
  3768  14CF  0B89               	decfsz	9,f
  3769  14D0  2CCC               	goto	u2645
  3770  14D1  0836               	movf	??___ftmul,w
  3771  14D2  00B9               	movwf	??___ftmul+3
  3772  14D3  0839               	movf	??___ftmul+3,w
  3773  14D4  06BF               	xorwf	___ftmul@sign,f
  3774  14D5  3080               	movlw	128
  3775  14D6  00B6               	movwf	??___ftmul
  3776  14D7  0836               	movf	??___ftmul,w
  3777  14D8  05BF               	andwf	___ftmul@sign,f
  3778  14D9  17B1               	bsf	___ftmul@f1+1,7
  3779  14DA  17B4               	bsf	___ftmul@f2+1,7
  3780  14DB  30FF               	movlw	255
  3781  14DC  05B3               	andwf	___ftmul@f2,f
  3782  14DD  30FF               	movlw	255
  3783  14DE  05B4               	andwf	___ftmul@f2+1,f
  3784  14DF  3000               	movlw	0
  3785  14E0  05B5               	andwf	___ftmul@f2+2,f
  3786  14E1  3000               	movlw	0
  3787  14E2  00BB               	movwf	___ftmul@f3_as_product
  3788  14E3  3000               	movlw	0
  3789  14E4  00BC               	movwf	___ftmul@f3_as_product+1
  3790  14E5  3000               	movlw	0
  3791  14E6  00BD               	movwf	___ftmul@f3_as_product+2
  3792  14E7  3007               	movlw	7
  3793  14E8  00B6               	movwf	??___ftmul
  3794  14E9  0836               	movf	??___ftmul,w
  3795  14EA  00BE               	movwf	___ftmul@cntr
  3796  14EB                     l1840:	
  3797  14EB  1C30               	btfss	___ftmul@f1,0
  3798  14EC  2CF3               	goto	l1844
  3799  14ED  0833               	movf	___ftmul@f2,w
  3800  14EE  07BB               	addwf	___ftmul@f3_as_product,f
  3801  14EF  0834               	movf	___ftmul@f2+1,w
  3802  14F0  3DBC               	addwfc	___ftmul@f3_as_product+1,f
  3803  14F1  0835               	movf	___ftmul@f2+2,w
  3804  14F2  3DBD               	addwfc	___ftmul@f3_as_product+2,f
  3805  14F3                     l1844:	
  3806  14F3  3001               	movlw	1
  3807  14F4                     u2665:	
  3808  14F4  36B2               	lsrf	___ftmul@f1+2,f
  3809  14F5  0CB1               	rrf	___ftmul@f1+1,f
  3810  14F6  0CB0               	rrf	___ftmul@f1,f
  3811  14F7  0B89               	decfsz	9,f
  3812  14F8  2CF4               	goto	u2665
  3813  14F9  3001               	movlw	1
  3814  14FA                     u2675:	
  3815  14FA  35B3               	lslf	___ftmul@f2,f
  3816  14FB  0DB4               	rlf	___ftmul@f2+1,f
  3817  14FC  0DB5               	rlf	___ftmul@f2+2,f
  3818  14FD  0B89               	decfsz	9,f
  3819  14FE  2CFA               	goto	u2675
  3820  14FF  3001               	movlw	1
  3821  1500  02BE               	subwf	___ftmul@cntr,f
  3822  1501  1D03               	btfss	3,2
  3823  1502  2CEB               	goto	l1840
  3824  1503  3009               	movlw	9
  3825  1504  00B6               	movwf	??___ftmul
  3826  1505  0836               	movf	??___ftmul,w
  3827  1506  00BE               	movwf	___ftmul@cntr
  3828  1507                     l1852:	
  3829  1507  1C30               	btfss	___ftmul@f1,0
  3830  1508  2D0F               	goto	l1856
  3831  1509  0833               	movf	___ftmul@f2,w
  3832  150A  07BB               	addwf	___ftmul@f3_as_product,f
  3833  150B  0834               	movf	___ftmul@f2+1,w
  3834  150C  3DBC               	addwfc	___ftmul@f3_as_product+1,f
  3835  150D  0835               	movf	___ftmul@f2+2,w
  3836  150E  3DBD               	addwfc	___ftmul@f3_as_product+2,f
  3837  150F                     l1856:	
  3838  150F  3001               	movlw	1
  3839  1510                     u2705:	
  3840  1510  36B2               	lsrf	___ftmul@f1+2,f
  3841  1511  0CB1               	rrf	___ftmul@f1+1,f
  3842  1512  0CB0               	rrf	___ftmul@f1,f
  3843  1513  0B89               	decfsz	9,f
  3844  1514  2D10               	goto	u2705
  3845  1515  3001               	movlw	1
  3846  1516                     u2715:	
  3847  1516  36BD               	lsrf	___ftmul@f3_as_product+2,f
  3848  1517  0CBC               	rrf	___ftmul@f3_as_product+1,f
  3849  1518  0CBB               	rrf	___ftmul@f3_as_product,f
  3850  1519  0B89               	decfsz	9,f
  3851  151A  2D16               	goto	u2715
  3852  151B  3001               	movlw	1
  3853  151C  02BE               	subwf	___ftmul@cntr,f
  3854  151D  1D03               	btfss	3,2
  3855  151E  2D07               	goto	l1852
  3856  151F  083B               	movf	___ftmul@f3_as_product,w
  3857  1520  00F0               	movwf	___ftpack@arg
  3858  1521  083C               	movf	___ftmul@f3_as_product+1,w
  3859  1522  00F1               	movwf	___ftpack@arg+1
  3860  1523  083D               	movf	___ftmul@f3_as_product+2,w
  3861  1524  00F2               	movwf	___ftpack@arg+2
  3862  1525  083A               	movf	___ftmul@exp,w
  3863  1526  00B6               	movwf	??___ftmul
  3864  1527  0836               	movf	??___ftmul,w
  3865  1528  00F3               	movwf	___ftpack@exp
  3866  1529  083F               	movf	___ftmul@sign,w
  3867  152A  00B7               	movwf	??___ftmul+1
  3868  152B  0837               	movf	??___ftmul+1,w
  3869  152C  00F4               	movwf	___ftpack@sign
  3870  152D  3192  22EF         	fcall	___ftpack
  3871  152F  0870               	movf	?___ftpack,w
  3872  1530  0020               	movlb	0	; select bank0
  3873  1531  00B0               	movwf	?___ftmul
  3874  1532  0871               	movf	?___ftpack+1,w
  3875  1533  00B1               	movwf	?___ftmul+1
  3876  1534  0872               	movf	?___ftpack+2,w
  3877  1535  00B2               	movwf	?___ftmul+2
  3878  1536  0008               	return
  3879  1537                     __end_of___ftmul:	
  3880                           
  3881                           	psect	text7
  3882  1206                     __ptext7:	
  3883 ;; *************** function ___awmod *****************
  3884 ;; Defined at:
  3885 ;;		line 6 in file "D:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awmod.c"
  3886 ;; Parameters:    Size  Location     Type
  3887 ;;  divisor         2    0[COMMON] int 
  3888 ;;  dividend        2    2[COMMON] int 
  3889 ;; Auto vars:     Size  Location     Type
  3890 ;;  sign            1    6[COMMON] unsigned char 
  3891 ;;  counter         1    5[COMMON] unsigned char 
  3892 ;; Return value:  Size  Location     Type
  3893 ;;                  2    0[COMMON] int 
  3894 ;; Registers used:
  3895 ;;		wreg, status,2, status,0
  3896 ;; Tracked objects:
  3897 ;;		On entry : 0/0
  3898 ;;		On exit  : 0/0
  3899 ;;		Unchanged: 0/0
  3900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3901 ;;      Params:         4       0       0       0       0       0       0       0
  3902 ;;      Locals:         2       0       0       0       0       0       0       0
  3903 ;;      Temps:          1       0       0       0       0       0       0       0
  3904 ;;      Totals:         7       0       0       0       0       0       0       0
  3905 ;;Total ram usage:        7 bytes
  3906 ;; Hardware stack levels used:    1
  3907 ;; This function calls:
  3908 ;;		Nothing
  3909 ;; This function is called by:
  3910 ;;		_fround
  3911 ;;		_scale
  3912 ;; This function uses a non-reentrant model
  3913 ;;
  3914                           
  3915                           
  3916                           ;psect for function ___awmod
  3917  1206                     ___awmod:	
  3918                           
  3919                           ;incstack = 0
  3920                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  3921  1206  01F6               	clrf	___awmod@sign
  3922  1207  1FF3               	btfss	___awmod@dividend+1,7
  3923  1208  2A10               	goto	l1716
  3924  1209  09F2               	comf	___awmod@dividend,f
  3925  120A  09F3               	comf	___awmod@dividend+1,f
  3926  120B  0AF2               	incf	___awmod@dividend,f
  3927  120C  1903               	skipnz
  3928  120D  0AF3               	incf	___awmod@dividend+1,f
  3929  120E  01F6               	clrf	___awmod@sign
  3930  120F  0AF6               	incf	___awmod@sign,f
  3931  1210                     l1716:	
  3932  1210  1FF1               	btfss	___awmod@divisor+1,7
  3933  1211  2A17               	goto	l1720
  3934  1212  09F0               	comf	___awmod@divisor,f
  3935  1213  09F1               	comf	___awmod@divisor+1,f
  3936  1214  0AF0               	incf	___awmod@divisor,f
  3937  1215  1903               	skipnz
  3938  1216  0AF1               	incf	___awmod@divisor+1,f
  3939  1217                     l1720:	
  3940  1217  0870               	movf	___awmod@divisor,w
  3941  1218  0471               	iorwf	___awmod@divisor+1,w
  3942  1219  1903               	btfsc	3,2
  3943  121A  2A3E               	goto	l1738
  3944  121B  01F5               	clrf	___awmod@counter
  3945  121C  0AF5               	incf	___awmod@counter,f
  3946  121D                     l1728:	
  3947  121D  1BF1               	btfsc	___awmod@divisor+1,7
  3948  121E  2A29               	goto	l1730
  3949  121F  3001               	movlw	1
  3950  1220                     u2325:	
  3951  1220  35F0               	lslf	___awmod@divisor,f
  3952  1221  0DF1               	rlf	___awmod@divisor+1,f
  3953  1222  0B89               	decfsz	9,f
  3954  1223  2A20               	goto	u2325
  3955  1224  3001               	movlw	1
  3956  1225  00F4               	movwf	??___awmod
  3957  1226  0874               	movf	??___awmod,w
  3958  1227  07F5               	addwf	___awmod@counter,f
  3959  1228  2A1D               	goto	l1728
  3960  1229                     l1730:	
  3961  1229  0871               	movf	___awmod@divisor+1,w
  3962  122A  0273               	subwf	___awmod@dividend+1,w
  3963  122B  1D03               	skipz
  3964  122C  2A2F               	goto	u2345
  3965  122D  0870               	movf	___awmod@divisor,w
  3966  122E  0272               	subwf	___awmod@dividend,w
  3967  122F                     u2345:	
  3968  122F  1C03               	skipc
  3969  1230  2A35               	goto	l1734
  3970  1231  0870               	movf	___awmod@divisor,w
  3971  1232  02F2               	subwf	___awmod@dividend,f
  3972  1233  0871               	movf	___awmod@divisor+1,w
  3973  1234  3BF3               	subwfb	___awmod@dividend+1,f
  3974  1235                     l1734:	
  3975  1235  3001               	movlw	1
  3976  1236                     u2355:	
  3977  1236  36F1               	lsrf	___awmod@divisor+1,f
  3978  1237  0CF0               	rrf	___awmod@divisor,f
  3979  1238  0B89               	decfsz	9,f
  3980  1239  2A36               	goto	u2355
  3981  123A  3001               	movlw	1
  3982  123B  02F5               	subwf	___awmod@counter,f
  3983  123C  1D03               	btfss	3,2
  3984  123D  2A29               	goto	l1730
  3985  123E                     l1738:	
  3986  123E  0876               	movf	___awmod@sign,w
  3987  123F  1903               	btfsc	3,2
  3988  1240  2A46               	goto	l1742
  3989  1241  09F2               	comf	___awmod@dividend,f
  3990  1242  09F3               	comf	___awmod@dividend+1,f
  3991  1243  0AF2               	incf	___awmod@dividend,f
  3992  1244  1903               	skipnz
  3993  1245  0AF3               	incf	___awmod@dividend+1,f
  3994  1246                     l1742:	
  3995  1246  0873               	movf	___awmod@dividend+1,w
  3996  1247  00F1               	movwf	?___awmod+1
  3997  1248  0872               	movf	___awmod@dividend,w
  3998  1249  00F0               	movwf	?___awmod
  3999  124A  0008               	return
  4000  124B                     __end_of___awmod:	
  4001                           
  4002                           	psect	text8
  4003  129D                     __ptext8:	
  4004 ;; *************** function ___awdiv *****************
  4005 ;; Defined at:
  4006 ;;		line 6 in file "D:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
  4007 ;; Parameters:    Size  Location     Type
  4008 ;;  divisor         2    7[COMMON] int 
  4009 ;;  dividend        2    9[COMMON] int 
  4010 ;; Auto vars:     Size  Location     Type
  4011 ;;  quotient        2    2[BANK0 ] int 
  4012 ;;  sign            1    1[BANK0 ] unsigned char 
  4013 ;;  counter         1    0[BANK0 ] unsigned char 
  4014 ;; Return value:  Size  Location     Type
  4015 ;;                  2    7[COMMON] int 
  4016 ;; Registers used:
  4017 ;;		wreg, status,2, status,0
  4018 ;; Tracked objects:
  4019 ;;		On entry : 0/0
  4020 ;;		On exit  : 0/0
  4021 ;;		Unchanged: 0/0
  4022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4023 ;;      Params:         4       0       0       0       0       0       0       0
  4024 ;;      Locals:         0       4       0       0       0       0       0       0
  4025 ;;      Temps:          1       0       0       0       0       0       0       0
  4026 ;;      Totals:         5       4       0       0       0       0       0       0
  4027 ;;Total ram usage:        9 bytes
  4028 ;; Hardware stack levels used:    1
  4029 ;; This function calls:
  4030 ;;		Nothing
  4031 ;; This function is called by:
  4032 ;;		_fround
  4033 ;;		_scale
  4034 ;;		_sprintf
  4035 ;; This function uses a non-reentrant model
  4036 ;;
  4037                           
  4038                           
  4039                           ;psect for function ___awdiv
  4040  129D                     ___awdiv:	
  4041                           
  4042                           ;incstack = 0
  4043                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  4044  129D  0020               	movlb	0	; select bank0
  4045  129E  01A1               	clrf	___awdiv@sign
  4046  129F  1FF8               	btfss	___awdiv@divisor+1,7
  4047  12A0  2AA8               	goto	l1672
  4048  12A1  09F7               	comf	___awdiv@divisor,f
  4049  12A2  09F8               	comf	___awdiv@divisor+1,f
  4050  12A3  0AF7               	incf	___awdiv@divisor,f
  4051  12A4  1903               	skipnz
  4052  12A5  0AF8               	incf	___awdiv@divisor+1,f
  4053  12A6  01A1               	clrf	___awdiv@sign
  4054  12A7  0AA1               	incf	___awdiv@sign,f
  4055  12A8                     l1672:	
  4056  12A8  1FFA               	btfss	___awdiv@dividend+1,7
  4057  12A9  2AB3               	goto	l1678
  4058  12AA  09F9               	comf	___awdiv@dividend,f
  4059  12AB  09FA               	comf	___awdiv@dividend+1,f
  4060  12AC  0AF9               	incf	___awdiv@dividend,f
  4061  12AD  1903               	skipnz
  4062  12AE  0AFA               	incf	___awdiv@dividend+1,f
  4063  12AF  3001               	movlw	1
  4064  12B0  00FB               	movwf	??___awdiv
  4065  12B1  087B               	movf	??___awdiv,w
  4066  12B2  06A1               	xorwf	___awdiv@sign,f
  4067  12B3                     l1678:	
  4068  12B3  01A2               	clrf	___awdiv@quotient
  4069  12B4  01A3               	clrf	___awdiv@quotient+1
  4070  12B5  0877               	movf	___awdiv@divisor,w
  4071  12B6  0478               	iorwf	___awdiv@divisor+1,w
  4072  12B7  1903               	btfsc	3,2
  4073  12B8  2AE2               	goto	l1700
  4074  12B9  01A0               	clrf	___awdiv@counter
  4075  12BA  0AA0               	incf	___awdiv@counter,f
  4076  12BB                     l1688:	
  4077  12BB  1BF8               	btfsc	___awdiv@divisor+1,7
  4078  12BC  2AC7               	goto	l1690
  4079  12BD  3001               	movlw	1
  4080  12BE                     u2225:	
  4081  12BE  35F7               	lslf	___awdiv@divisor,f
  4082  12BF  0DF8               	rlf	___awdiv@divisor+1,f
  4083  12C0  0B89               	decfsz	9,f
  4084  12C1  2ABE               	goto	u2225
  4085  12C2  3001               	movlw	1
  4086  12C3  00FB               	movwf	??___awdiv
  4087  12C4  087B               	movf	??___awdiv,w
  4088  12C5  07A0               	addwf	___awdiv@counter,f
  4089  12C6  2ABB               	goto	l1688
  4090  12C7                     l1690:	
  4091  12C7  3001               	movlw	1
  4092  12C8                     u2245:	
  4093  12C8  35A2               	lslf	___awdiv@quotient,f
  4094  12C9  0DA3               	rlf	___awdiv@quotient+1,f
  4095  12CA  0B89               	decfsz	9,f
  4096  12CB  2AC8               	goto	u2245
  4097  12CC  0878               	movf	___awdiv@divisor+1,w
  4098  12CD  027A               	subwf	___awdiv@dividend+1,w
  4099  12CE  1D03               	skipz
  4100  12CF  2AD2               	goto	u2255
  4101  12D0  0877               	movf	___awdiv@divisor,w
  4102  12D1  0279               	subwf	___awdiv@dividend,w
  4103  12D2                     u2255:	
  4104  12D2  1C03               	skipc
  4105  12D3  2AD9               	goto	l1696
  4106  12D4  0877               	movf	___awdiv@divisor,w
  4107  12D5  02F9               	subwf	___awdiv@dividend,f
  4108  12D6  0878               	movf	___awdiv@divisor+1,w
  4109  12D7  3BFA               	subwfb	___awdiv@dividend+1,f
  4110  12D8  1422               	bsf	___awdiv@quotient,0
  4111  12D9                     l1696:	
  4112  12D9  3001               	movlw	1
  4113  12DA                     u2265:	
  4114  12DA  36F8               	lsrf	___awdiv@divisor+1,f
  4115  12DB  0CF7               	rrf	___awdiv@divisor,f
  4116  12DC  0B89               	decfsz	9,f
  4117  12DD  2ADA               	goto	u2265
  4118  12DE  3001               	movlw	1
  4119  12DF  02A0               	subwf	___awdiv@counter,f
  4120  12E0  1D03               	btfss	3,2
  4121  12E1  2AC7               	goto	l1690
  4122  12E2                     l1700:	
  4123  12E2  0821               	movf	___awdiv@sign,w
  4124  12E3  1903               	btfsc	3,2
  4125  12E4  2AEA               	goto	l1704
  4126  12E5  09A2               	comf	___awdiv@quotient,f
  4127  12E6  09A3               	comf	___awdiv@quotient+1,f
  4128  12E7  0AA2               	incf	___awdiv@quotient,f
  4129  12E8  1903               	skipnz
  4130  12E9  0AA3               	incf	___awdiv@quotient+1,f
  4131  12EA                     l1704:	
  4132  12EA  0823               	movf	___awdiv@quotient+1,w
  4133  12EB  00F8               	movwf	?___awdiv+1
  4134  12EC  0822               	movf	___awdiv@quotient,w
  4135  12ED  00F7               	movwf	?___awdiv
  4136  12EE  0008               	return
  4137  12EF                     __end_of___awdiv:	
  4138                           
  4139                           	psect	text9
  4140  1537                     __ptext9:	
  4141 ;; *************** function __tdiv_to_l_ *****************
  4142 ;; Defined at:
  4143 ;;		line 60 in file "D:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftdivl.c"
  4144 ;; Parameters:    Size  Location     Type
  4145 ;;  f1              3    0[COMMON] float 
  4146 ;;  f2              3    3[COMMON] float 
  4147 ;; Auto vars:     Size  Location     Type
  4148 ;;  quot            4    0[BANK0 ] unsigned long 
  4149 ;;  exp1            1    5[BANK0 ] unsigned char 
  4150 ;;  cntr            1    4[BANK0 ] unsigned char 
  4151 ;; Return value:  Size  Location     Type
  4152 ;;                  4    0[COMMON] unsigned long 
  4153 ;; Registers used:
  4154 ;;		wreg, status,2, status,0
  4155 ;; Tracked objects:
  4156 ;;		On entry : 0/0
  4157 ;;		On exit  : 0/0
  4158 ;;		Unchanged: 0/0
  4159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4160 ;;      Params:         6       0       0       0       0       0       0       0
  4161 ;;      Locals:         0       6       0       0       0       0       0       0
  4162 ;;      Temps:          4       0       0       0       0       0       0       0
  4163 ;;      Totals:        10       6       0       0       0       0       0       0
  4164 ;;Total ram usage:       16 bytes
  4165 ;; Hardware stack levels used:    1
  4166 ;; This function calls:
  4167 ;;		Nothing
  4168 ;; This function is called by:
  4169 ;;		_sprintf
  4170 ;; This function uses a non-reentrant model
  4171 ;;
  4172                           
  4173                           
  4174                           ;psect for function __tdiv_to_l_
  4175  1537                     __tdiv_to_l_:	
  4176                           
  4177                           ;incstack = 0
  4178                           ; Regs used in __tdiv_to_l_: [wreg+status,2+status,0]
  4179  1537  0870               	movf	__tdiv_to_l_@f1,w
  4180  1538  00F6               	movwf	??__tdiv_to_l_
  4181  1539  0871               	movf	__tdiv_to_l_@f1+1,w
  4182  153A  00F7               	movwf	??__tdiv_to_l_+1
  4183  153B  0872               	movf	__tdiv_to_l_@f1+2,w
  4184  153C  00F8               	movwf	??__tdiv_to_l_+2
  4185  153D  1003               	clrc
  4186  153E  0D77               	rlf	??__tdiv_to_l_+1,w
  4187  153F  0D78               	rlf	??__tdiv_to_l_+2,w
  4188  1540  00F9               	movwf	??__tdiv_to_l_+3
  4189  1541  0879               	movf	??__tdiv_to_l_+3,w
  4190  1542  0020               	movlb	0	; select bank0
  4191  1543  00A5               	movwf	__tdiv_to_l_@exp1
  4192  1544  0825               	movf	__tdiv_to_l_@exp1,w
  4193  1545  1D03               	btfss	3,2
  4194  1546  2D50               	goto	l1946
  4195  1547  3000               	movlw	0
  4196  1548  00F3               	movwf	?__tdiv_to_l_+3
  4197  1549  3000               	movlw	0
  4198  154A  00F2               	movwf	?__tdiv_to_l_+2
  4199  154B  3000               	movlw	0
  4200  154C  00F1               	movwf	?__tdiv_to_l_+1
  4201  154D  3000               	movlw	0
  4202  154E  00F0               	movwf	?__tdiv_to_l_
  4203  154F  0008               	return
  4204  1550                     l1946:	
  4205  1550  0873               	movf	__tdiv_to_l_@f2,w
  4206  1551  00F6               	movwf	??__tdiv_to_l_
  4207  1552  0874               	movf	__tdiv_to_l_@f2+1,w
  4208  1553  00F7               	movwf	??__tdiv_to_l_+1
  4209  1554  0875               	movf	__tdiv_to_l_@f2+2,w
  4210  1555  00F8               	movwf	??__tdiv_to_l_+2
  4211  1556  1003               	clrc
  4212  1557  0D77               	rlf	??__tdiv_to_l_+1,w
  4213  1558  0D78               	rlf	??__tdiv_to_l_+2,w
  4214  1559  00F9               	movwf	??__tdiv_to_l_+3
  4215  155A  0879               	movf	??__tdiv_to_l_+3,w
  4216  155B  00A4               	movwf	__tdiv_to_l_@cntr
  4217  155C  0824               	movf	__tdiv_to_l_@cntr,w
  4218  155D  1D03               	btfss	3,2
  4219  155E  2D68               	goto	l438
  4220  155F  3000               	movlw	0
  4221  1560  00F3               	movwf	?__tdiv_to_l_+3
  4222  1561  3000               	movlw	0
  4223  1562  00F2               	movwf	?__tdiv_to_l_+2
  4224  1563  3000               	movlw	0
  4225  1564  00F1               	movwf	?__tdiv_to_l_+1
  4226  1565  3000               	movlw	0
  4227  1566  00F0               	movwf	?__tdiv_to_l_
  4228  1567  0008               	return
  4229  1568                     l438:	
  4230  1568  17F1               	bsf	__tdiv_to_l_@f1+1,7
  4231  1569  30FF               	movlw	255
  4232  156A  05F0               	andwf	__tdiv_to_l_@f1,f
  4233  156B  30FF               	movlw	255
  4234  156C  05F1               	andwf	__tdiv_to_l_@f1+1,f
  4235  156D  3000               	movlw	0
  4236  156E  05F2               	andwf	__tdiv_to_l_@f1+2,f
  4237  156F  17F4               	bsf	__tdiv_to_l_@f2+1,7
  4238  1570  30FF               	movlw	255
  4239  1571  05F3               	andwf	__tdiv_to_l_@f2,f
  4240  1572  30FF               	movlw	255
  4241  1573  05F4               	andwf	__tdiv_to_l_@f2+1,f
  4242  1574  3000               	movlw	0
  4243  1575  05F5               	andwf	__tdiv_to_l_@f2+2,f
  4244  1576  3000               	movlw	0
  4245  1577  00A3               	movwf	__tdiv_to_l_@quot+3
  4246  1578  3000               	movlw	0
  4247  1579  00A2               	movwf	__tdiv_to_l_@quot+2
  4248  157A  3000               	movlw	0
  4249  157B  00A1               	movwf	__tdiv_to_l_@quot+1
  4250  157C  3000               	movlw	0
  4251  157D  00A0               	movwf	__tdiv_to_l_@quot
  4252  157E  307F               	movlw	127
  4253  157F  02A5               	subwf	__tdiv_to_l_@exp1,f
  4254  1580  3098               	movlw	152
  4255  1581  0724               	addwf	__tdiv_to_l_@cntr,w
  4256  1582  00F6               	movwf	??__tdiv_to_l_
  4257  1583  0876               	movf	??__tdiv_to_l_,w
  4258  1584  02A5               	subwf	__tdiv_to_l_@exp1,f
  4259  1585  3018               	movlw	24
  4260  1586  00F6               	movwf	??__tdiv_to_l_
  4261  1587  0876               	movf	??__tdiv_to_l_,w
  4262  1588  00A4               	movwf	__tdiv_to_l_@cntr
  4263  1589                     l1960:	
  4264  1589  3001               	movlw	1
  4265  158A                     u2845:	
  4266  158A  35A0               	lslf	__tdiv_to_l_@quot,f
  4267  158B  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  4268  158C  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  4269  158D  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  4270  158E  0B89               	decfsz	9,f
  4271  158F  2D8A               	goto	u2845
  4272  1590  0875               	movf	__tdiv_to_l_@f2+2,w
  4273  1591  0272               	subwf	__tdiv_to_l_@f1+2,w
  4274  1592  1D03               	skipz
  4275  1593  2D9A               	goto	u2855
  4276  1594  0874               	movf	__tdiv_to_l_@f2+1,w
  4277  1595  0271               	subwf	__tdiv_to_l_@f1+1,w
  4278  1596  1D03               	skipz
  4279  1597  2D9A               	goto	u2855
  4280  1598  0873               	movf	__tdiv_to_l_@f2,w
  4281  1599  0270               	subwf	__tdiv_to_l_@f1,w
  4282  159A                     u2855:	
  4283  159A  1C03               	skipc
  4284  159B  2DA3               	goto	l1968
  4285  159C  0873               	movf	__tdiv_to_l_@f2,w
  4286  159D  02F0               	subwf	__tdiv_to_l_@f1,f
  4287  159E  0874               	movf	__tdiv_to_l_@f2+1,w
  4288  159F  3BF1               	subwfb	__tdiv_to_l_@f1+1,f
  4289  15A0  0875               	movf	__tdiv_to_l_@f2+2,w
  4290  15A1  3BF2               	subwfb	__tdiv_to_l_@f1+2,f
  4291  15A2  1420               	bsf	__tdiv_to_l_@quot,0
  4292  15A3                     l1968:	
  4293  15A3  3001               	movlw	1
  4294  15A4                     u2865:	
  4295  15A4  35F0               	lslf	__tdiv_to_l_@f1,f
  4296  15A5  0DF1               	rlf	__tdiv_to_l_@f1+1,f
  4297  15A6  0DF2               	rlf	__tdiv_to_l_@f1+2,f
  4298  15A7  0B89               	decfsz	9,f
  4299  15A8  2DA4               	goto	u2865
  4300  15A9  3001               	movlw	1
  4301  15AA  02A4               	subwf	__tdiv_to_l_@cntr,f
  4302  15AB  1D03               	btfss	3,2
  4303  15AC  2D89               	goto	l1960
  4304  15AD  1FA5               	btfss	__tdiv_to_l_@exp1,7
  4305  15AE  2DCB               	goto	l1980
  4306  15AF  0825               	movf	__tdiv_to_l_@exp1,w
  4307  15B0  3A80               	xorlw	128
  4308  15B1  3E97               	addlw	151
  4309  15B2  1803               	skipnc
  4310  15B3  2DBD               	goto	l1978
  4311  15B4  3000               	movlw	0
  4312  15B5  00F3               	movwf	?__tdiv_to_l_+3
  4313  15B6  3000               	movlw	0
  4314  15B7  00F2               	movwf	?__tdiv_to_l_+2
  4315  15B8  3000               	movlw	0
  4316  15B9  00F1               	movwf	?__tdiv_to_l_+1
  4317  15BA  3000               	movlw	0
  4318  15BB  00F0               	movwf	?__tdiv_to_l_
  4319  15BC  0008               	return
  4320  15BD                     l1978:	
  4321  15BD  3001               	movlw	1
  4322  15BE                     u2905:	
  4323  15BE  36A3               	lsrf	__tdiv_to_l_@quot+3,f
  4324  15BF  0CA2               	rrf	__tdiv_to_l_@quot+2,f
  4325  15C0  0CA1               	rrf	__tdiv_to_l_@quot+1,f
  4326  15C1  0CA0               	rrf	__tdiv_to_l_@quot,f
  4327  15C2  0B89               	decfsz	9,f
  4328  15C3  2DBE               	goto	u2905
  4329  15C4  3001               	movlw	1
  4330  15C5  00F6               	movwf	??__tdiv_to_l_
  4331  15C6  0876               	movf	??__tdiv_to_l_,w
  4332  15C7  07A5               	addwf	__tdiv_to_l_@exp1,f
  4333  15C8  1903               	btfsc	3,2
  4334  15C9  2DE4               	goto	l1988
  4335  15CA  2DBD               	goto	l1978
  4336  15CB                     l1980:	
  4337  15CB  3018               	movlw	24
  4338  15CC  0225               	subwf	__tdiv_to_l_@exp1,w
  4339  15CD  1C03               	skipc
  4340  15CE  2DE1               	goto	l448
  4341  15CF  3000               	movlw	0
  4342  15D0  00F3               	movwf	?__tdiv_to_l_+3
  4343  15D1  3000               	movlw	0
  4344  15D2  00F2               	movwf	?__tdiv_to_l_+2
  4345  15D3  3000               	movlw	0
  4346  15D4  00F1               	movwf	?__tdiv_to_l_+1
  4347  15D5  3000               	movlw	0
  4348  15D6  00F0               	movwf	?__tdiv_to_l_
  4349  15D7  0008               	return
  4350  15D8                     l1986:	
  4351  15D8  3001               	movlw	1
  4352  15D9                     u2935:	
  4353  15D9  35A0               	lslf	__tdiv_to_l_@quot,f
  4354  15DA  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  4355  15DB  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  4356  15DC  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  4357  15DD  0B89               	decfsz	9,f
  4358  15DE  2DD9               	goto	u2935
  4359  15DF  3001               	movlw	1
  4360  15E0  02A5               	subwf	__tdiv_to_l_@exp1,f
  4361  15E1                     l448:	
  4362  15E1  0825               	movf	__tdiv_to_l_@exp1,w
  4363  15E2  1D03               	btfss	3,2
  4364  15E3  2DD8               	goto	l1986
  4365  15E4                     l1988:	
  4366  15E4  0823               	movf	__tdiv_to_l_@quot+3,w
  4367  15E5  00F3               	movwf	?__tdiv_to_l_+3
  4368  15E6  0822               	movf	__tdiv_to_l_@quot+2,w
  4369  15E7  00F2               	movwf	?__tdiv_to_l_+2
  4370  15E8  0821               	movf	__tdiv_to_l_@quot+1,w
  4371  15E9  00F1               	movwf	?__tdiv_to_l_+1
  4372  15EA  0820               	movf	__tdiv_to_l_@quot,w
  4373  15EB  00F0               	movwf	?__tdiv_to_l_
  4374  15EC  0008               	return
  4375  15ED                     __end_of__tdiv_to_l_:	
  4376                           
  4377                           	psect	text10
  4378  16E3                     __ptext10:	
  4379 ;; *************** function __div_to_l_ *****************
  4380 ;; Defined at:
  4381 ;;		line 60 in file "D:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\fldivl.c"
  4382 ;; Parameters:    Size  Location     Type
  4383 ;;  f1              3    0[COMMON] unsigned long 
  4384 ;;  f2              3    3[COMMON] unsigned long 
  4385 ;; Auto vars:     Size  Location     Type
  4386 ;;  quot            4    0[BANK0 ] unsigned long 
  4387 ;;  exp1            1    5[BANK0 ] unsigned char 
  4388 ;;  cntr            1    4[BANK0 ] unsigned char 
  4389 ;; Return value:  Size  Location     Type
  4390 ;;                  4    0[COMMON] unsigned long 
  4391 ;; Registers used:
  4392 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4393 ;; Tracked objects:
  4394 ;;		On entry : 0/0
  4395 ;;		On exit  : 0/0
  4396 ;;		Unchanged: 0/0
  4397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4398 ;;      Params:         6       0       0       0       0       0       0       0
  4399 ;;      Locals:         0       6       0       0       0       0       0       0
  4400 ;;      Temps:          8       0       0       0       0       0       0       0
  4401 ;;      Totals:        14       6       0       0       0       0       0       0
  4402 ;;Total ram usage:       20 bytes
  4403 ;; Hardware stack levels used:    1
  4404 ;; This function calls:
  4405 ;;		Nothing
  4406 ;; This function is called by:
  4407 ;;		_sprintf
  4408 ;; This function uses a non-reentrant model
  4409 ;;
  4410                           
  4411                           
  4412                           ;psect for function __div_to_l_
  4413  16E3                     __div_to_l_:	
  4414                           
  4415                           ;incstack = 0
  4416                           ; Regs used in __div_to_l_: [wreg+fsr1l+fsr1h+status,2+status,0]
  4417  16E3  3070               	movlw	low (__div_to_l_@f1| 0)
  4418  16E4  0086               	movwf	6
  4419  16E5  0187               	clrf	7
  4420  16E6  3F40               	moviw [0]fsr1
  4421  16E7  00F6               	movwf	??__div_to_l_
  4422  16E8  3F41               	moviw [1]fsr1
  4423  16E9  00F7               	movwf	??__div_to_l_+1
  4424  16EA  3F42               	moviw [2]fsr1
  4425  16EB  00F8               	movwf	??__div_to_l_+2
  4426  16EC  3F43               	moviw [3]fsr1
  4427  16ED  00F9               	movwf	??__div_to_l_+3
  4428  16EE  1003               	clrc
  4429  16EF  0D78               	rlf	??__div_to_l_+2,w
  4430  16F0  0D79               	rlf	??__div_to_l_+3,w
  4431  16F1  00FA               	movwf	??__div_to_l_+4
  4432  16F2  087A               	movf	??__div_to_l_+4,w
  4433  16F3  0020               	movlb	0	; select bank0
  4434  16F4  00A5               	movwf	__div_to_l_@exp1
  4435  16F5  0825               	movf	__div_to_l_@exp1,w
  4436  16F6  1D03               	btfss	3,2
  4437  16F7  2F01               	goto	l1998
  4438  16F8  3000               	movlw	0
  4439  16F9  00F3               	movwf	?__div_to_l_+3
  4440  16FA  3000               	movlw	0
  4441  16FB  00F2               	movwf	?__div_to_l_+2
  4442  16FC  3000               	movlw	0
  4443  16FD  00F1               	movwf	?__div_to_l_+1
  4444  16FE  3000               	movlw	0
  4445  16FF  00F0               	movwf	?__div_to_l_
  4446  1700  0008               	return
  4447  1701                     l1998:	
  4448  1701  3073               	movlw	low (__div_to_l_@f2| 0)
  4449  1702  0086               	movwf	6
  4450  1703  0187               	clrf	7
  4451  1704  3F40               	moviw [0]fsr1
  4452  1705  00F6               	movwf	??__div_to_l_
  4453  1706  3F41               	moviw [1]fsr1
  4454  1707  00F7               	movwf	??__div_to_l_+1
  4455  1708  3F42               	moviw [2]fsr1
  4456  1709  00F8               	movwf	??__div_to_l_+2
  4457  170A  3F43               	moviw [3]fsr1
  4458  170B  00F9               	movwf	??__div_to_l_+3
  4459  170C  1003               	clrc
  4460  170D  0D78               	rlf	??__div_to_l_+2,w
  4461  170E  0D79               	rlf	??__div_to_l_+3,w
  4462  170F  00FA               	movwf	??__div_to_l_+4
  4463  1710  087A               	movf	??__div_to_l_+4,w
  4464  1711  00A4               	movwf	__div_to_l_@cntr
  4465  1712  0824               	movf	__div_to_l_@cntr,w
  4466  1713  1D03               	btfss	3,2
  4467  1714  2F1E               	goto	l2004
  4468  1715  3000               	movlw	0
  4469  1716  00F3               	movwf	?__div_to_l_+3
  4470  1717  3000               	movlw	0
  4471  1718  00F2               	movwf	?__div_to_l_+2
  4472  1719  3000               	movlw	0
  4473  171A  00F1               	movwf	?__div_to_l_+1
  4474  171B  3000               	movlw	0
  4475  171C  00F0               	movwf	?__div_to_l_
  4476  171D  0008               	return
  4477  171E                     l2004:	
  4478  171E  3070               	movlw	low (__div_to_l_@f1| 0)
  4479  171F  0086               	movwf	6
  4480  1720  0187               	clrf	7
  4481  1721  3000               	movlw	0
  4482  1722  0481               	iorwf	1,f
  4483  1723  3141               	addfsr 1,1
  4484  1724  3000               	movlw	0
  4485  1725  0481               	iorwf	1,f
  4486  1726  3141               	addfsr 1,1
  4487  1727  3080               	movlw	128
  4488  1728  0481               	iorwf	1,f
  4489  1729  3141               	addfsr 1,1
  4490  172A  3000               	movlw	0
  4491  172B  0481               	iorwf	1,f
  4492  172C  3070               	movlw	low (__div_to_l_@f1| 0)
  4493  172D  0086               	movwf	6
  4494  172E  0187               	clrf	7
  4495  172F  30FF               	movlw	255
  4496  1730  0581               	andwf	1,f
  4497  1731  3141               	addfsr 1,1
  4498  1732  30FF               	movlw	255
  4499  1733  0581               	andwf	1,f
  4500  1734  3141               	addfsr 1,1
  4501  1735  30FF               	movlw	255
  4502  1736  0581               	andwf	1,f
  4503  1737  3141               	addfsr 1,1
  4504  1738  3000               	movlw	0
  4505  1739  0581               	andwf	1,f
  4506  173A  3073               	movlw	low (__div_to_l_@f2| 0)
  4507  173B  0086               	movwf	6
  4508  173C  0187               	clrf	7
  4509  173D  3000               	movlw	0
  4510  173E  0481               	iorwf	1,f
  4511  173F  3141               	addfsr 1,1
  4512  1740  3000               	movlw	0
  4513  1741  0481               	iorwf	1,f
  4514  1742  3141               	addfsr 1,1
  4515  1743  3080               	movlw	128
  4516  1744  0481               	iorwf	1,f
  4517  1745  3141               	addfsr 1,1
  4518  1746  3000               	movlw	0
  4519  1747  0481               	iorwf	1,f
  4520  1748  3073               	movlw	low (__div_to_l_@f2| 0)
  4521  1749  0086               	movwf	6
  4522  174A  0187               	clrf	7
  4523  174B  30FF               	movlw	255
  4524  174C  0581               	andwf	1,f
  4525  174D  3141               	addfsr 1,1
  4526  174E  30FF               	movlw	255
  4527  174F  0581               	andwf	1,f
  4528  1750  3141               	addfsr 1,1
  4529  1751  30FF               	movlw	255
  4530  1752  0581               	andwf	1,f
  4531  1753  3141               	addfsr 1,1
  4532  1754  3000               	movlw	0
  4533  1755  0581               	andwf	1,f
  4534  1756  3000               	movlw	0
  4535  1757  00A3               	movwf	__div_to_l_@quot+3
  4536  1758  3000               	movlw	0
  4537  1759  00A2               	movwf	__div_to_l_@quot+2
  4538  175A  3000               	movlw	0
  4539  175B  00A1               	movwf	__div_to_l_@quot+1
  4540  175C  3000               	movlw	0
  4541  175D  00A0               	movwf	__div_to_l_@quot
  4542  175E  307F               	movlw	127
  4543  175F  02A5               	subwf	__div_to_l_@exp1,f
  4544  1760  30A0               	movlw	160
  4545  1761  0724               	addwf	__div_to_l_@cntr,w
  4546  1762  00F6               	movwf	??__div_to_l_
  4547  1763  0876               	movf	??__div_to_l_,w
  4548  1764  02A5               	subwf	__div_to_l_@exp1,f
  4549  1765  3020               	movlw	32
  4550  1766  00F6               	movwf	??__div_to_l_
  4551  1767  0876               	movf	??__div_to_l_,w
  4552  1768  00A4               	movwf	__div_to_l_@cntr
  4553  1769                     l2014:	
  4554  1769  3001               	movlw	1
  4555  176A                     u2975:	
  4556  176A  35A0               	lslf	__div_to_l_@quot,f
  4557  176B  0DA1               	rlf	__div_to_l_@quot+1,f
  4558  176C  0DA2               	rlf	__div_to_l_@quot+2,f
  4559  176D  0DA3               	rlf	__div_to_l_@quot+3,f
  4560  176E  0B89               	decfsz	9,f
  4561  176F  2F6A               	goto	u2975
  4562  1770  3073               	movlw	low (__div_to_l_@f2| 0)
  4563  1771  0086               	movwf	6
  4564  1772  0187               	clrf	7
  4565  1773  3F40               	moviw [0]fsr1
  4566  1774  00F6               	movwf	??__div_to_l_
  4567  1775  3F41               	moviw [1]fsr1
  4568  1776  00F7               	movwf	??__div_to_l_+1
  4569  1777  3F42               	moviw [2]fsr1
  4570  1778  00F8               	movwf	??__div_to_l_+2
  4571  1779  3F43               	moviw [3]fsr1
  4572  177A  00F9               	movwf	??__div_to_l_+3
  4573  177B  3070               	movlw	low (__div_to_l_@f1| 0)
  4574  177C  0086               	movwf	6
  4575  177D  0187               	clrf	7
  4576  177E  3F40               	moviw [0]fsr1
  4577  177F  00FA               	movwf	??__div_to_l_+4
  4578  1780  3F41               	moviw [1]fsr1
  4579  1781  00FB               	movwf	??__div_to_l_+5
  4580  1782  3F42               	moviw [2]fsr1
  4581  1783  00FC               	movwf	??__div_to_l_+6
  4582  1784  3F43               	moviw [3]fsr1
  4583  1785  00FD               	movwf	??__div_to_l_+7
  4584  1786  0879               	movf	??__div_to_l_+3,w
  4585  1787  027D               	subwf	??__div_to_l_+7,w
  4586  1788  1D03               	skipz
  4587  1789  2F94               	goto	u2985
  4588  178A  0878               	movf	??__div_to_l_+2,w
  4589  178B  027C               	subwf	??__div_to_l_+6,w
  4590  178C  1D03               	skipz
  4591  178D  2F94               	goto	u2985
  4592  178E  0877               	movf	??__div_to_l_+1,w
  4593  178F  027B               	subwf	??__div_to_l_+5,w
  4594  1790  1D03               	skipz
  4595  1791  2F94               	goto	u2985
  4596  1792  0876               	movf	??__div_to_l_,w
  4597  1793  027A               	subwf	??__div_to_l_+4,w
  4598  1794                     u2985:	
  4599  1794  1C03               	skipc
  4600  1795  2FB1               	goto	l2022
  4601  1796  3073               	movlw	low (__div_to_l_@f2| 0)
  4602  1797  0086               	movwf	6
  4603  1798  0187               	clrf	7
  4604  1799  3F40               	moviw [0]fsr1
  4605  179A  00F6               	movwf	??__div_to_l_
  4606  179B  3F41               	moviw [1]fsr1
  4607  179C  00F7               	movwf	??__div_to_l_+1
  4608  179D  3F42               	moviw [2]fsr1
  4609  179E  00F8               	movwf	??__div_to_l_+2
  4610  179F  3F43               	moviw [3]fsr1
  4611  17A0  00F9               	movwf	??__div_to_l_+3
  4612  17A1  3070               	movlw	low (__div_to_l_@f1| 0)
  4613  17A2  0086               	movwf	6
  4614  17A3  0187               	clrf	7
  4615  17A4  0876               	movf	??__div_to_l_,w
  4616  17A5  0281               	subwf	1,f
  4617  17A6  3141               	addfsr 1,1
  4618  17A7  0877               	movf	??__div_to_l_+1,w
  4619  17A8  3B81               	subwfb	1,f
  4620  17A9  3141               	addfsr 1,1
  4621  17AA  0878               	movf	??__div_to_l_+2,w
  4622  17AB  3B81               	subwfb	1,f
  4623  17AC  3141               	addfsr 1,1
  4624  17AD  0879               	movf	??__div_to_l_+3,w
  4625  17AE  3B81               	subwfb	1,f
  4626  17AF  317D               	addfsr 1,-3
  4627  17B0  1420               	bsf	__div_to_l_@quot,0
  4628  17B1                     l2022:	
  4629  17B1  3070               	movlw	low (__div_to_l_@f1| 0)
  4630  17B2  0086               	movwf	6
  4631  17B3  0187               	clrf	7
  4632  17B4  3581               	lslf	1,f
  4633  17B5  3141               	addfsr 1,1
  4634  17B6  0D81               	rlf	1,f
  4635  17B7  3141               	addfsr 1,1
  4636  17B8  0D81               	rlf	1,f
  4637  17B9  3141               	addfsr 1,1
  4638  17BA  0D81               	rlf	1,f
  4639  17BB  317D               	addfsr 1,-3
  4640  17BC  3001               	movlw	1
  4641  17BD  02A4               	subwf	__div_to_l_@cntr,f
  4642  17BE  1D03               	btfss	3,2
  4643  17BF  2F69               	goto	l2014
  4644  17C0  1FA5               	btfss	__div_to_l_@exp1,7
  4645  17C1  2FDE               	goto	l2034
  4646  17C2  0825               	movf	__div_to_l_@exp1,w
  4647  17C3  3A80               	xorlw	128
  4648  17C4  3E9F               	addlw	159
  4649  17C5  1803               	skipnc
  4650  17C6  2FD0               	goto	l2032
  4651  17C7  3000               	movlw	0
  4652  17C8  00F3               	movwf	?__div_to_l_+3
  4653  17C9  3000               	movlw	0
  4654  17CA  00F2               	movwf	?__div_to_l_+2
  4655  17CB  3000               	movlw	0
  4656  17CC  00F1               	movwf	?__div_to_l_+1
  4657  17CD  3000               	movlw	0
  4658  17CE  00F0               	movwf	?__div_to_l_
  4659  17CF  0008               	return
  4660  17D0                     l2032:	
  4661  17D0  3001               	movlw	1
  4662  17D1                     u3025:	
  4663  17D1  36A3               	lsrf	__div_to_l_@quot+3,f
  4664  17D2  0CA2               	rrf	__div_to_l_@quot+2,f
  4665  17D3  0CA1               	rrf	__div_to_l_@quot+1,f
  4666  17D4  0CA0               	rrf	__div_to_l_@quot,f
  4667  17D5  0B89               	decfsz	9,f
  4668  17D6  2FD1               	goto	u3025
  4669  17D7  3001               	movlw	1
  4670  17D8  00F6               	movwf	??__div_to_l_
  4671  17D9  0876               	movf	??__div_to_l_,w
  4672  17DA  07A5               	addwf	__div_to_l_@exp1,f
  4673  17DB  1903               	btfsc	3,2
  4674  17DC  2FF7               	goto	l2042
  4675  17DD  2FD0               	goto	l2032
  4676  17DE                     l2034:	
  4677  17DE  3020               	movlw	32
  4678  17DF  0225               	subwf	__div_to_l_@exp1,w
  4679  17E0  1C03               	skipc
  4680  17E1  2FF4               	goto	l369
  4681  17E2  3000               	movlw	0
  4682  17E3  00F3               	movwf	?__div_to_l_+3
  4683  17E4  3000               	movlw	0
  4684  17E5  00F2               	movwf	?__div_to_l_+2
  4685  17E6  3000               	movlw	0
  4686  17E7  00F1               	movwf	?__div_to_l_+1
  4687  17E8  3000               	movlw	0
  4688  17E9  00F0               	movwf	?__div_to_l_
  4689  17EA  0008               	return
  4690  17EB                     l2040:	
  4691  17EB  3001               	movlw	1
  4692  17EC                     u3055:	
  4693  17EC  35A0               	lslf	__div_to_l_@quot,f
  4694  17ED  0DA1               	rlf	__div_to_l_@quot+1,f
  4695  17EE  0DA2               	rlf	__div_to_l_@quot+2,f
  4696  17EF  0DA3               	rlf	__div_to_l_@quot+3,f
  4697  17F0  0B89               	decfsz	9,f
  4698  17F1  2FEC               	goto	u3055
  4699  17F2  3001               	movlw	1
  4700  17F3  02A5               	subwf	__div_to_l_@exp1,f
  4701  17F4                     l369:	
  4702  17F4  0825               	movf	__div_to_l_@exp1,w
  4703  17F5  1D03               	btfss	3,2
  4704  17F6  2FEB               	goto	l2040
  4705  17F7                     l2042:	
  4706  17F7  0823               	movf	__div_to_l_@quot+3,w
  4707  17F8  00F3               	movwf	?__div_to_l_+3
  4708  17F9  0822               	movf	__div_to_l_@quot+2,w
  4709  17FA  00F2               	movwf	?__div_to_l_+2
  4710  17FB  0821               	movf	__div_to_l_@quot+1,w
  4711  17FC  00F1               	movwf	?__div_to_l_+1
  4712  17FD  0820               	movf	__div_to_l_@quot,w
  4713  17FE  00F0               	movwf	?__div_to_l_
  4714  17FF  0008               	return
  4715  1800                     __end_of__div_to_l_:	
  4716                           
  4717                           	psect	text11
  4718  0410                     __ptext11:	
  4719 ;; *************** function ___lltoft *****************
  4720 ;; Defined at:
  4721 ;;		line 35 in file "D:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lltoft.c"
  4722 ;; Parameters:    Size  Location     Type
  4723 ;;  c               4    8[COMMON] unsigned long 
  4724 ;; Auto vars:     Size  Location     Type
  4725 ;;  exp             1   13[COMMON] unsigned char 
  4726 ;; Return value:  Size  Location     Type
  4727 ;;                  3    8[COMMON] float 
  4728 ;; Registers used:
  4729 ;;		wreg, status,2, status,0, pclath, cstack
  4730 ;; Tracked objects:
  4731 ;;		On entry : 0/0
  4732 ;;		On exit  : 0/0
  4733 ;;		Unchanged: 0/0
  4734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4735 ;;      Params:         4       0       0       0       0       0       0       0
  4736 ;;      Locals:         1       0       0       0       0       0       0       0
  4737 ;;      Temps:          1       0       0       0       0       0       0       0
  4738 ;;      Totals:         6       0       0       0       0       0       0       0
  4739 ;;Total ram usage:        6 bytes
  4740 ;; Hardware stack levels used:    1
  4741 ;; Hardware stack levels required when called:    1
  4742 ;; This function calls:
  4743 ;;		___ftpack
  4744 ;; This function is called by:
  4745 ;;		_sprintf
  4746 ;; This function uses a non-reentrant model
  4747 ;;
  4748                           
  4749                           
  4750                           ;psect for function ___lltoft
  4751  0410                     ___lltoft:	
  4752                           
  4753                           ;incstack = 0
  4754                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  4755  0410  308E               	movlw	142
  4756  0411  00FC               	movwf	??___lltoft
  4757  0412  087C               	movf	??___lltoft,w
  4758  0413  00FD               	movwf	___lltoft@exp
  4759  0414                     l2172:	
  4760  0414  30FF               	movlw	255
  4761  0415  057B               	andwf	___lltoft@c+3,w
  4762  0416  1903               	btfsc	3,2
  4763  0417  2C24               	goto	l2174
  4764  0418  3001               	movlw	1
  4765  0419                     u3355:	
  4766  0419  36FB               	lsrf	___lltoft@c+3,f
  4767  041A  0CFA               	rrf	___lltoft@c+2,f
  4768  041B  0CF9               	rrf	___lltoft@c+1,f
  4769  041C  0CF8               	rrf	___lltoft@c,f
  4770  041D  0B89               	decfsz	9,f
  4771  041E  2C19               	goto	u3355
  4772  041F  3001               	movlw	1
  4773  0420  00FC               	movwf	??___lltoft
  4774  0421  087C               	movf	??___lltoft,w
  4775  0422  07FD               	addwf	___lltoft@exp,f
  4776  0423  2C14               	goto	l2172
  4777  0424                     l2174:	
  4778  0424  0878               	movf	___lltoft@c,w
  4779  0425  00F0               	movwf	___ftpack@arg
  4780  0426  0879               	movf	___lltoft@c+1,w
  4781  0427  00F1               	movwf	___ftpack@arg+1
  4782  0428  087A               	movf	___lltoft@c+2,w
  4783  0429  00F2               	movwf	___ftpack@arg+2
  4784  042A  087D               	movf	___lltoft@exp,w
  4785  042B  00FC               	movwf	??___lltoft
  4786  042C  087C               	movf	??___lltoft,w
  4787  042D  00F3               	movwf	___ftpack@exp
  4788  042E  01F4               	clrf	___ftpack@sign
  4789  042F  3192  22EF         	fcall	___ftpack
  4790  0431  0870               	movf	?___ftpack,w
  4791  0432  00F8               	movwf	?___lltoft
  4792  0433  0871               	movf	?___ftpack+1,w
  4793  0434  00F9               	movwf	?___lltoft+1
  4794  0435  0872               	movf	?___ftpack+2,w
  4795  0436  00FA               	movwf	?___lltoft+2
  4796  0437  0008               	return
  4797  0438                     __end_of___lltoft:	
  4798                           
  4799                           	psect	text12
  4800  11C4                     __ptext12:	
  4801 ;; *************** function ___llmod *****************
  4802 ;; Defined at:
  4803 ;;		line 6 in file "D:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\llmod.c"
  4804 ;; Parameters:    Size  Location     Type
  4805 ;;  divisor         4    0[COMMON] unsigned long 
  4806 ;;  dividend        4    4[COMMON] unsigned long 
  4807 ;; Auto vars:     Size  Location     Type
  4808 ;;  counter         1    9[COMMON] unsigned char 
  4809 ;; Return value:  Size  Location     Type
  4810 ;;                  4    0[COMMON] unsigned long 
  4811 ;; Registers used:
  4812 ;;		wreg, status,2, status,0
  4813 ;; Tracked objects:
  4814 ;;		On entry : 0/0
  4815 ;;		On exit  : 0/0
  4816 ;;		Unchanged: 0/0
  4817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4818 ;;      Params:         8       0       0       0       0       0       0       0
  4819 ;;      Locals:         1       0       0       0       0       0       0       0
  4820 ;;      Temps:          1       0       0       0       0       0       0       0
  4821 ;;      Totals:        10       0       0       0       0       0       0       0
  4822 ;;Total ram usage:       10 bytes
  4823 ;; Hardware stack levels used:    1
  4824 ;; This function calls:
  4825 ;;		Nothing
  4826 ;; This function is called by:
  4827 ;;		_sprintf
  4828 ;; This function uses a non-reentrant model
  4829 ;;
  4830                           
  4831                           
  4832                           ;psect for function ___llmod
  4833  11C4                     ___llmod:	
  4834                           
  4835                           ;incstack = 0
  4836                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  4837  11C4  0873               	movf	___llmod@divisor+3,w
  4838  11C5  0472               	iorwf	___llmod@divisor+2,w
  4839  11C6  0471               	iorwf	___llmod@divisor+1,w
  4840  11C7  0470               	iorwf	___llmod@divisor,w
  4841  11C8  1903               	skipnz
  4842  11C9  29FD               	goto	l2164
  4843  11CA  01F9               	clrf	___llmod@counter
  4844  11CB  0AF9               	incf	___llmod@counter,f
  4845  11CC                     l2154:	
  4846  11CC  1BF3               	btfsc	___llmod@divisor+3,7
  4847  11CD  29DA               	goto	l2156
  4848  11CE  3001               	movlw	1
  4849  11CF                     u3305:	
  4850  11CF  35F0               	lslf	___llmod@divisor,f
  4851  11D0  0DF1               	rlf	___llmod@divisor+1,f
  4852  11D1  0DF2               	rlf	___llmod@divisor+2,f
  4853  11D2  0DF3               	rlf	___llmod@divisor+3,f
  4854  11D3  0B89               	decfsz	9,f
  4855  11D4  29CF               	goto	u3305
  4856  11D5  3001               	movlw	1
  4857  11D6  00F8               	movwf	??___llmod
  4858  11D7  0878               	movf	??___llmod,w
  4859  11D8  07F9               	addwf	___llmod@counter,f
  4860  11D9  29CC               	goto	l2154
  4861  11DA                     l2156:	
  4862  11DA  0873               	movf	___llmod@divisor+3,w
  4863  11DB  0277               	subwf	___llmod@dividend+3,w
  4864  11DC  1D03               	skipz
  4865  11DD  29E8               	goto	u3325
  4866  11DE  0872               	movf	___llmod@divisor+2,w
  4867  11DF  0276               	subwf	___llmod@dividend+2,w
  4868  11E0  1D03               	skipz
  4869  11E1  29E8               	goto	u3325
  4870  11E2  0871               	movf	___llmod@divisor+1,w
  4871  11E3  0275               	subwf	___llmod@dividend+1,w
  4872  11E4  1D03               	skipz
  4873  11E5  29E8               	goto	u3325
  4874  11E6  0870               	movf	___llmod@divisor,w
  4875  11E7  0274               	subwf	___llmod@dividend,w
  4876  11E8                     u3325:	
  4877  11E8  1C03               	skipc
  4878  11E9  29F2               	goto	l2160
  4879  11EA  0870               	movf	___llmod@divisor,w
  4880  11EB  02F4               	subwf	___llmod@dividend,f
  4881  11EC  0871               	movf	___llmod@divisor+1,w
  4882  11ED  3BF5               	subwfb	___llmod@dividend+1,f
  4883  11EE  0872               	movf	___llmod@divisor+2,w
  4884  11EF  3BF6               	subwfb	___llmod@dividend+2,f
  4885  11F0  0873               	movf	___llmod@divisor+3,w
  4886  11F1  3BF7               	subwfb	___llmod@dividend+3,f
  4887  11F2                     l2160:	
  4888  11F2  3001               	movlw	1
  4889  11F3                     u3335:	
  4890  11F3  36F3               	lsrf	___llmod@divisor+3,f
  4891  11F4  0CF2               	rrf	___llmod@divisor+2,f
  4892  11F5  0CF1               	rrf	___llmod@divisor+1,f
  4893  11F6  0CF0               	rrf	___llmod@divisor,f
  4894  11F7  0B89               	decfsz	9,f
  4895  11F8  29F3               	goto	u3335
  4896  11F9  3001               	movlw	1
  4897  11FA  02F9               	subwf	___llmod@counter,f
  4898  11FB  1D03               	btfss	3,2
  4899  11FC  29DA               	goto	l2156
  4900  11FD                     l2164:	
  4901  11FD  0877               	movf	___llmod@dividend+3,w
  4902  11FE  00F3               	movwf	?___llmod+3
  4903  11FF  0876               	movf	___llmod@dividend+2,w
  4904  1200  00F2               	movwf	?___llmod+2
  4905  1201  0875               	movf	___llmod@dividend+1,w
  4906  1202  00F1               	movwf	?___llmod+1
  4907  1203  0874               	movf	___llmod@dividend,w
  4908  1204  00F0               	movwf	?___llmod
  4909  1205  0008               	return
  4910  1206                     __end_of___llmod:	
  4911                           
  4912                           	psect	text13
  4913  124B                     __ptext13:	
  4914 ;; *************** function ___lldiv *****************
  4915 ;; Defined at:
  4916 ;;		line 6 in file "D:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
  4917 ;; Parameters:    Size  Location     Type
  4918 ;;  divisor         4    0[COMMON] unsigned long 
  4919 ;;  dividend        4    4[COMMON] unsigned long 
  4920 ;; Auto vars:     Size  Location     Type
  4921 ;;  quotient        4    9[COMMON] unsigned long 
  4922 ;;  counter         1   13[COMMON] unsigned char 
  4923 ;; Return value:  Size  Location     Type
  4924 ;;                  4    0[COMMON] unsigned long 
  4925 ;; Registers used:
  4926 ;;		wreg, status,2, status,0
  4927 ;; Tracked objects:
  4928 ;;		On entry : 0/0
  4929 ;;		On exit  : 0/0
  4930 ;;		Unchanged: 0/0
  4931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4932 ;;      Params:         8       0       0       0       0       0       0       0
  4933 ;;      Locals:         5       0       0       0       0       0       0       0
  4934 ;;      Temps:          1       0       0       0       0       0       0       0
  4935 ;;      Totals:        14       0       0       0       0       0       0       0
  4936 ;;Total ram usage:       14 bytes
  4937 ;; Hardware stack levels used:    1
  4938 ;; This function calls:
  4939 ;;		Nothing
  4940 ;; This function is called by:
  4941 ;;		_sprintf
  4942 ;; This function uses a non-reentrant model
  4943 ;;
  4944                           
  4945                           
  4946                           ;psect for function ___lldiv
  4947  124B                     ___lldiv:	
  4948                           
  4949                           ;incstack = 0
  4950                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  4951  124B  3000               	movlw	0
  4952  124C  00FC               	movwf	___lldiv@quotient+3
  4953  124D  3000               	movlw	0
  4954  124E  00FB               	movwf	___lldiv@quotient+2
  4955  124F  3000               	movlw	0
  4956  1250  00FA               	movwf	___lldiv@quotient+1
  4957  1251  3000               	movlw	0
  4958  1252  00F9               	movwf	___lldiv@quotient
  4959  1253  0873               	movf	___lldiv@divisor+3,w
  4960  1254  0472               	iorwf	___lldiv@divisor+2,w
  4961  1255  0471               	iorwf	___lldiv@divisor+1,w
  4962  1256  0470               	iorwf	___lldiv@divisor,w
  4963  1257  1903               	skipnz
  4964  1258  2A94               	goto	l2144
  4965  1259  01FD               	clrf	___lldiv@counter
  4966  125A  0AFD               	incf	___lldiv@counter,f
  4967  125B                     l2130:	
  4968  125B  1BF3               	btfsc	___lldiv@divisor+3,7
  4969  125C  2A69               	goto	l2132
  4970  125D  3001               	movlw	1
  4971  125E                     u3235:	
  4972  125E  35F0               	lslf	___lldiv@divisor,f
  4973  125F  0DF1               	rlf	___lldiv@divisor+1,f
  4974  1260  0DF2               	rlf	___lldiv@divisor+2,f
  4975  1261  0DF3               	rlf	___lldiv@divisor+3,f
  4976  1262  0B89               	decfsz	9,f
  4977  1263  2A5E               	goto	u3235
  4978  1264  3001               	movlw	1
  4979  1265  00F8               	movwf	??___lldiv
  4980  1266  0878               	movf	??___lldiv,w
  4981  1267  07FD               	addwf	___lldiv@counter,f
  4982  1268  2A5B               	goto	l2130
  4983  1269                     l2132:	
  4984  1269  3001               	movlw	1
  4985  126A                     u3255:	
  4986  126A  35F9               	lslf	___lldiv@quotient,f
  4987  126B  0DFA               	rlf	___lldiv@quotient+1,f
  4988  126C  0DFB               	rlf	___lldiv@quotient+2,f
  4989  126D  0DFC               	rlf	___lldiv@quotient+3,f
  4990  126E  0B89               	decfsz	9,f
  4991  126F  2A6A               	goto	u3255
  4992  1270  0873               	movf	___lldiv@divisor+3,w
  4993  1271  0277               	subwf	___lldiv@dividend+3,w
  4994  1272  1D03               	skipz
  4995  1273  2A7E               	goto	u3265
  4996  1274  0872               	movf	___lldiv@divisor+2,w
  4997  1275  0276               	subwf	___lldiv@dividend+2,w
  4998  1276  1D03               	skipz
  4999  1277  2A7E               	goto	u3265
  5000  1278  0871               	movf	___lldiv@divisor+1,w
  5001  1279  0275               	subwf	___lldiv@dividend+1,w
  5002  127A  1D03               	skipz
  5003  127B  2A7E               	goto	u3265
  5004  127C  0870               	movf	___lldiv@divisor,w
  5005  127D  0274               	subwf	___lldiv@dividend,w
  5006  127E                     u3265:	
  5007  127E  1C03               	skipc
  5008  127F  2A89               	goto	l2140
  5009  1280  0870               	movf	___lldiv@divisor,w
  5010  1281  02F4               	subwf	___lldiv@dividend,f
  5011  1282  0871               	movf	___lldiv@divisor+1,w
  5012  1283  3BF5               	subwfb	___lldiv@dividend+1,f
  5013  1284  0872               	movf	___lldiv@divisor+2,w
  5014  1285  3BF6               	subwfb	___lldiv@dividend+2,f
  5015  1286  0873               	movf	___lldiv@divisor+3,w
  5016  1287  3BF7               	subwfb	___lldiv@dividend+3,f
  5017  1288  1479               	bsf	___lldiv@quotient,0
  5018  1289                     l2140:	
  5019  1289  3001               	movlw	1
  5020  128A                     u3275:	
  5021  128A  36F3               	lsrf	___lldiv@divisor+3,f
  5022  128B  0CF2               	rrf	___lldiv@divisor+2,f
  5023  128C  0CF1               	rrf	___lldiv@divisor+1,f
  5024  128D  0CF0               	rrf	___lldiv@divisor,f
  5025  128E  0B89               	decfsz	9,f
  5026  128F  2A8A               	goto	u3275
  5027  1290  3001               	movlw	1
  5028  1291  02FD               	subwf	___lldiv@counter,f
  5029  1292  1D03               	btfss	3,2
  5030  1293  2A69               	goto	l2132
  5031  1294                     l2144:	
  5032  1294  087C               	movf	___lldiv@quotient+3,w
  5033  1295  00F3               	movwf	?___lldiv+3
  5034  1296  087B               	movf	___lldiv@quotient+2,w
  5035  1297  00F2               	movwf	?___lldiv+2
  5036  1298  087A               	movf	___lldiv@quotient+1,w
  5037  1299  00F1               	movwf	?___lldiv+1
  5038  129A  0879               	movf	___lldiv@quotient,w
  5039  129B  00F0               	movwf	?___lldiv
  5040  129C  0008               	return
  5041  129D                     __end_of___lldiv:	
  5042                           
  5043                           	psect	text14
  5044  1353                     __ptext14:	
  5045 ;; *************** function ___fttol *****************
  5046 ;; Defined at:
  5047 ;;		line 44 in file "D:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\fttol.c"
  5048 ;; Parameters:    Size  Location     Type
  5049 ;;  f1              3   41[BANK0 ] float 
  5050 ;; Auto vars:     Size  Location     Type
  5051 ;;  lval            4   50[BANK0 ] unsigned long 
  5052 ;;  exp1            1   54[BANK0 ] unsigned char 
  5053 ;;  sign1           1   49[BANK0 ] unsigned char 
  5054 ;; Return value:  Size  Location     Type
  5055 ;;                  4   41[BANK0 ] long 
  5056 ;; Registers used:
  5057 ;;		wreg, status,2, status,0
  5058 ;; Tracked objects:
  5059 ;;		On entry : 0/0
  5060 ;;		On exit  : 0/0
  5061 ;;		Unchanged: 0/0
  5062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5063 ;;      Params:         0       4       0       0       0       0       0       0
  5064 ;;      Locals:         0       6       0       0       0       0       0       0
  5065 ;;      Temps:          0       4       0       0       0       0       0       0
  5066 ;;      Totals:         0      14       0       0       0       0       0       0
  5067 ;;Total ram usage:       14 bytes
  5068 ;; Hardware stack levels used:    1
  5069 ;; This function calls:
  5070 ;;		Nothing
  5071 ;; This function is called by:
  5072 ;;		_sprintf
  5073 ;; This function uses a non-reentrant model
  5074 ;;
  5075                           
  5076                           
  5077                           ;psect for function ___fttol
  5078  1353                     ___fttol:	
  5079                           
  5080                           ;incstack = 0
  5081                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  5082  1353  0020               	movlb	0	; select bank0
  5083  1354  0849               	movf	___fttol@f1,w
  5084  1355  00CD               	movwf	??___fttol
  5085  1356  084A               	movf	___fttol@f1+1,w
  5086  1357  00CE               	movwf	??___fttol+1
  5087  1358  084B               	movf	___fttol@f1+2,w
  5088  1359  00CF               	movwf	??___fttol+2
  5089  135A  1003               	clrc
  5090  135B  0D4E               	rlf	??___fttol+1,w
  5091  135C  0D4F               	rlf	??___fttol+2,w
  5092  135D  00D0               	movwf	??___fttol+3
  5093  135E  0850               	movf	??___fttol+3,w
  5094  135F  00D6               	movwf	___fttol@exp1
  5095  1360  0856               	movf	___fttol@exp1,w
  5096  1361  1D03               	btfss	3,2
  5097  1362  2B6C               	goto	l2088
  5098  1363  3000               	movlw	0
  5099  1364  00CC               	movwf	?___fttol+3
  5100  1365  3000               	movlw	0
  5101  1366  00CB               	movwf	?___fttol+2
  5102  1367  3000               	movlw	0
  5103  1368  00CA               	movwf	?___fttol+1
  5104  1369  3000               	movlw	0
  5105  136A  00C9               	movwf	?___fttol
  5106  136B  0008               	return
  5107  136C                     l2088:	
  5108  136C  0849               	movf	___fttol@f1,w
  5109  136D  00CD               	movwf	??___fttol
  5110  136E  084A               	movf	___fttol@f1+1,w
  5111  136F  00CE               	movwf	??___fttol+1
  5112  1370  084B               	movf	___fttol@f1+2,w
  5113  1371  00CF               	movwf	??___fttol+2
  5114  1372  3017               	movlw	23
  5115  1373                     u3135:	
  5116  1373  36CF               	lsrf	??___fttol+2,f
  5117  1374  0CCE               	rrf	??___fttol+1,f
  5118  1375  0CCD               	rrf	??___fttol,f
  5119  1376  0B89               	decfsz	9,f
  5120  1377  2B73               	goto	u3135
  5121  1378  084D               	movf	??___fttol,w
  5122  1379  00D0               	movwf	??___fttol+3
  5123  137A  0850               	movf	??___fttol+3,w
  5124  137B  00D1               	movwf	___fttol@sign1
  5125  137C  17CA               	bsf	___fttol@f1+1,7
  5126  137D  30FF               	movlw	255
  5127  137E  05C9               	andwf	___fttol@f1,f
  5128  137F  30FF               	movlw	255
  5129  1380  05CA               	andwf	___fttol@f1+1,f
  5130  1381  3000               	movlw	0
  5131  1382  05CB               	andwf	___fttol@f1+2,f
  5132  1383  0849               	movf	___fttol@f1,w
  5133  1384  00D2               	movwf	___fttol@lval
  5134  1385  084A               	movf	___fttol@f1+1,w
  5135  1386  00D3               	movwf	___fttol@lval+1
  5136  1387  084B               	movf	___fttol@f1+2,w
  5137  1388  00D4               	movwf	___fttol@lval+2
  5138  1389  01D5               	clrf	___fttol@lval+3
  5139  138A  308E               	movlw	142
  5140  138B  02D6               	subwf	___fttol@exp1,f
  5141  138C  1FD6               	btfss	___fttol@exp1,7
  5142  138D  2BAA               	goto	l2108
  5143  138E  0856               	movf	___fttol@exp1,w
  5144  138F  3A80               	xorlw	128
  5145  1390  3E8F               	addlw	143
  5146  1391  1803               	skipnc
  5147  1392  2B9C               	goto	l2106
  5148  1393  3000               	movlw	0
  5149  1394  00CC               	movwf	?___fttol+3
  5150  1395  3000               	movlw	0
  5151  1396  00CB               	movwf	?___fttol+2
  5152  1397  3000               	movlw	0
  5153  1398  00CA               	movwf	?___fttol+1
  5154  1399  3000               	movlw	0
  5155  139A  00C9               	movwf	?___fttol
  5156  139B  0008               	return
  5157  139C                     l2106:	
  5158  139C  3001               	movlw	1
  5159  139D                     u3165:	
  5160  139D  36D5               	lsrf	___fttol@lval+3,f
  5161  139E  0CD4               	rrf	___fttol@lval+2,f
  5162  139F  0CD3               	rrf	___fttol@lval+1,f
  5163  13A0  0CD2               	rrf	___fttol@lval,f
  5164  13A1  0B89               	decfsz	9,f
  5165  13A2  2B9D               	goto	u3165
  5166  13A3  3001               	movlw	1
  5167  13A4  00CD               	movwf	??___fttol
  5168  13A5  084D               	movf	??___fttol,w
  5169  13A6  07D6               	addwf	___fttol@exp1,f
  5170  13A7  1903               	btfsc	3,2
  5171  13A8  2BC3               	goto	l2116
  5172  13A9  2B9C               	goto	l2106
  5173  13AA                     l2108:	
  5174  13AA  3018               	movlw	24
  5175  13AB  0256               	subwf	___fttol@exp1,w
  5176  13AC  1C03               	skipc
  5177  13AD  2BC0               	goto	l489
  5178  13AE  3000               	movlw	0
  5179  13AF  00CC               	movwf	?___fttol+3
  5180  13B0  3000               	movlw	0
  5181  13B1  00CB               	movwf	?___fttol+2
  5182  13B2  3000               	movlw	0
  5183  13B3  00CA               	movwf	?___fttol+1
  5184  13B4  3000               	movlw	0
  5185  13B5  00C9               	movwf	?___fttol
  5186  13B6  0008               	return
  5187  13B7                     l2114:	
  5188  13B7  3001               	movlw	1
  5189  13B8                     u3195:	
  5190  13B8  35D2               	lslf	___fttol@lval,f
  5191  13B9  0DD3               	rlf	___fttol@lval+1,f
  5192  13BA  0DD4               	rlf	___fttol@lval+2,f
  5193  13BB  0DD5               	rlf	___fttol@lval+3,f
  5194  13BC  0B89               	decfsz	9,f
  5195  13BD  2BB8               	goto	u3195
  5196  13BE  3001               	movlw	1
  5197  13BF  02D6               	subwf	___fttol@exp1,f
  5198  13C0                     l489:	
  5199  13C0  0856               	movf	___fttol@exp1,w
  5200  13C1  1D03               	btfss	3,2
  5201  13C2  2BB7               	goto	l2114
  5202  13C3                     l2116:	
  5203  13C3  0851               	movf	___fttol@sign1,w
  5204  13C4  1903               	btfsc	3,2
  5205  13C5  2BD1               	goto	l2120
  5206  13C6  09D2               	comf	___fttol@lval,f
  5207  13C7  09D3               	comf	___fttol@lval+1,f
  5208  13C8  09D4               	comf	___fttol@lval+2,f
  5209  13C9  09D5               	comf	___fttol@lval+3,f
  5210  13CA  0AD2               	incf	___fttol@lval,f
  5211  13CB  1903               	skipnz
  5212  13CC  0AD3               	incf	___fttol@lval+1,f
  5213  13CD  1903               	skipnz
  5214  13CE  0AD4               	incf	___fttol@lval+2,f
  5215  13CF  1903               	skipnz
  5216  13D0  0AD5               	incf	___fttol@lval+3,f
  5217  13D1                     l2120:	
  5218  13D1  0855               	movf	___fttol@lval+3,w
  5219  13D2  00CC               	movwf	?___fttol+3
  5220  13D3  0854               	movf	___fttol@lval+2,w
  5221  13D4  00CB               	movwf	?___fttol+2
  5222  13D5  0853               	movf	___fttol@lval+1,w
  5223  13D6  00CA               	movwf	?___fttol+1
  5224  13D7  0852               	movf	___fttol@lval,w
  5225  13D8  00C9               	movwf	?___fttol
  5226  13D9  0008               	return
  5227  13DA                     __end_of___fttol:	
  5228                           
  5229                           	psect	text15
  5230  0804                     __ptext15:	
  5231 ;; *************** function ___ftsub *****************
  5232 ;; Defined at:
  5233 ;;		line 18 in file "D:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftsub.c"
  5234 ;; Parameters:    Size  Location     Type
  5235 ;;  f2              3   59[BANK0 ] float 
  5236 ;;  f1              3   62[BANK0 ] float 
  5237 ;; Auto vars:     Size  Location     Type
  5238 ;;		None
  5239 ;; Return value:  Size  Location     Type
  5240 ;;                  3   59[BANK0 ] float 
  5241 ;; Registers used:
  5242 ;;		wreg, status,2, status,0, pclath, cstack
  5243 ;; Tracked objects:
  5244 ;;		On entry : 0/0
  5245 ;;		On exit  : 0/0
  5246 ;;		Unchanged: 0/0
  5247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5248 ;;      Params:         0       6       0       0       0       0       0       0
  5249 ;;      Locals:         0       0       0       0       0       0       0       0
  5250 ;;      Temps:          0       0       0       0       0       0       0       0
  5251 ;;      Totals:         0       6       0       0       0       0       0       0
  5252 ;;Total ram usage:        6 bytes
  5253 ;; Hardware stack levels used:    1
  5254 ;; Hardware stack levels required when called:    2
  5255 ;; This function calls:
  5256 ;;		___ftadd
  5257 ;; This function is called by:
  5258 ;;		_sprintf
  5259 ;; This function uses a non-reentrant model
  5260 ;;
  5261                           
  5262                           
  5263                           ;psect for function ___ftsub
  5264  0804                     ___ftsub:	
  5265                           
  5266                           ;incstack = 0
  5267                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  5268  0804  0020               	movlb	0	; select bank0
  5269  0805  085D               	movf	___ftsub@f2+2,w
  5270  0806  045C               	iorwf	___ftsub@f2+1,w
  5271  0807  045B               	iorwf	___ftsub@f2,w
  5272  0808  1903               	skipnz
  5273  0809  280C               	goto	l2078
  5274  080A  3080               	movlw	128
  5275  080B  06DD               	xorwf	___ftsub@f2+2,f
  5276  080C                     l2078:	
  5277  080C  085E               	movf	___ftsub@f1,w
  5278  080D  00CE               	movwf	___ftadd@f1
  5279  080E  085F               	movf	___ftsub@f1+1,w
  5280  080F  00CF               	movwf	___ftadd@f1+1
  5281  0810  0860               	movf	___ftsub@f1+2,w
  5282  0811  00D0               	movwf	___ftadd@f1+2
  5283  0812  085B               	movf	___ftsub@f2,w
  5284  0813  00D1               	movwf	___ftadd@f2
  5285  0814  085C               	movf	___ftsub@f2+1,w
  5286  0815  00D2               	movwf	___ftadd@f2+1
  5287  0816  085D               	movf	___ftsub@f2+2,w
  5288  0817  00D3               	movwf	___ftadd@f2+2
  5289  0818  3195  25ED         	fcall	___ftadd
  5290  081A  0020               	movlb	0	; select bank0
  5291  081B  084E               	movf	?___ftadd,w
  5292  081C  00DB               	movwf	?___ftsub
  5293  081D  084F               	movf	?___ftadd+1,w
  5294  081E  00DC               	movwf	?___ftsub+1
  5295  081F  0850               	movf	?___ftadd+2,w
  5296  0820  00DD               	movwf	?___ftsub+2
  5297  0821  0008               	return
  5298  0822                     __end_of___ftsub:	
  5299                           
  5300                           	psect	text16
  5301  15ED                     __ptext16:	
  5302 ;; *************** function ___ftadd *****************
  5303 ;; Defined at:
  5304 ;;		line 86 in file "D:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftadd.c"
  5305 ;; Parameters:    Size  Location     Type
  5306 ;;  f1              3   46[BANK0 ] float 
  5307 ;;  f2              3   49[BANK0 ] float 
  5308 ;; Auto vars:     Size  Location     Type
  5309 ;;  exp1            1   58[BANK0 ] unsigned char 
  5310 ;;  exp2            1   57[BANK0 ] unsigned char 
  5311 ;;  sign            1   56[BANK0 ] unsigned char 
  5312 ;; Return value:  Size  Location     Type
  5313 ;;                  3   46[BANK0 ] float 
  5314 ;; Registers used:
  5315 ;;		wreg, status,2, status,0, pclath, cstack
  5316 ;; Tracked objects:
  5317 ;;		On entry : 0/0
  5318 ;;		On exit  : 0/0
  5319 ;;		Unchanged: 0/0
  5320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5321 ;;      Params:         0       6       0       0       0       0       0       0
  5322 ;;      Locals:         0       3       0       0       0       0       0       0
  5323 ;;      Temps:          0       4       0       0       0       0       0       0
  5324 ;;      Totals:         0      13       0       0       0       0       0       0
  5325 ;;Total ram usage:       13 bytes
  5326 ;; Hardware stack levels used:    1
  5327 ;; Hardware stack levels required when called:    1
  5328 ;; This function calls:
  5329 ;;		___ftpack
  5330 ;; This function is called by:
  5331 ;;		_main
  5332 ;;		_sprintf
  5333 ;;		___ftsub
  5334 ;; This function uses a non-reentrant model
  5335 ;;
  5336                           
  5337                           
  5338                           ;psect for function ___ftadd
  5339  15ED                     ___ftadd:	
  5340                           
  5341                           ;incstack = 0
  5342                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  5343  15ED  0020               	movlb	0	; select bank0
  5344  15EE  084E               	movf	___ftadd@f1,w
  5345  15EF  00D4               	movwf	??___ftadd
  5346  15F0  084F               	movf	___ftadd@f1+1,w
  5347  15F1  00D5               	movwf	??___ftadd+1
  5348  15F2  0850               	movf	___ftadd@f1+2,w
  5349  15F3  00D6               	movwf	??___ftadd+2
  5350  15F4  1003               	clrc
  5351  15F5  0D55               	rlf	??___ftadd+1,w
  5352  15F6  0D56               	rlf	??___ftadd+2,w
  5353  15F7  00D7               	movwf	??___ftadd+3
  5354  15F8  0857               	movf	??___ftadd+3,w
  5355  15F9  00DA               	movwf	___ftadd@exp1
  5356  15FA  0851               	movf	___ftadd@f2,w
  5357  15FB  00D4               	movwf	??___ftadd
  5358  15FC  0852               	movf	___ftadd@f2+1,w
  5359  15FD  00D5               	movwf	??___ftadd+1
  5360  15FE  0853               	movf	___ftadd@f2+2,w
  5361  15FF  00D6               	movwf	??___ftadd+2
  5362  1600  1003               	clrc
  5363  1601  0D55               	rlf	??___ftadd+1,w
  5364  1602  0D56               	rlf	??___ftadd+2,w
  5365  1603  00D7               	movwf	??___ftadd+3
  5366  1604  0857               	movf	??___ftadd+3,w
  5367  1605  00D9               	movwf	___ftadd@exp2
  5368  1606  085A               	movf	___ftadd@exp1,w
  5369  1607  1903               	btfsc	3,2
  5370  1608  2E15               	goto	l1752
  5371  1609  0859               	movf	___ftadd@exp2,w
  5372  160A  025A               	subwf	___ftadd@exp1,w
  5373  160B  1803               	skipnc
  5374  160C  2E1C               	goto	l1756
  5375  160D  035A               	decf	___ftadd@exp1,w
  5376  160E  3AFF               	xorlw	255
  5377  160F  0759               	addwf	___ftadd@exp2,w
  5378  1610  00D4               	movwf	??___ftadd
  5379  1611  3019               	movlw	25
  5380  1612  0254               	subwf	??___ftadd,w
  5381  1613  1C03               	skipc
  5382  1614  2E1C               	goto	l1756
  5383  1615                     l1752:	
  5384  1615  0851               	movf	___ftadd@f2,w
  5385  1616  00CE               	movwf	?___ftadd
  5386  1617  0852               	movf	___ftadd@f2+1,w
  5387  1618  00CF               	movwf	?___ftadd+1
  5388  1619  0853               	movf	___ftadd@f2+2,w
  5389  161A  00D0               	movwf	?___ftadd+2
  5390  161B  0008               	return
  5391  161C                     l1756:	
  5392  161C  0859               	movf	___ftadd@exp2,w
  5393  161D  1903               	btfsc	3,2
  5394  161E  0008               	return
  5395  161F  085A               	movf	___ftadd@exp1,w
  5396  1620  0259               	subwf	___ftadd@exp2,w
  5397  1621  1803               	skipnc
  5398  1622  2E2B               	goto	l1762
  5399  1623  0359               	decf	___ftadd@exp2,w
  5400  1624  3AFF               	xorlw	255
  5401  1625  075A               	addwf	___ftadd@exp1,w
  5402  1626  00D4               	movwf	??___ftadd
  5403  1627  3019               	movlw	25
  5404  1628  0254               	subwf	??___ftadd,w
  5405  1629  1803               	btfsc	3,0
  5406  162A  0008               	return
  5407  162B                     l1762:	
  5408  162B  3006               	movlw	6
  5409  162C  00D4               	movwf	??___ftadd
  5410  162D  0854               	movf	??___ftadd,w
  5411  162E  00D8               	movwf	___ftadd@sign
  5412  162F  1BD0               	btfsc	___ftadd@f1+2,7
  5413  1630  17D8               	bsf	___ftadd@sign,7
  5414  1631  1BD3               	btfsc	___ftadd@f2+2,7
  5415  1632  1758               	bsf	___ftadd@sign,6
  5416  1633  17CF               	bsf	___ftadd@f1+1,7
  5417  1634  30FF               	movlw	255
  5418  1635  05CE               	andwf	___ftadd@f1,f
  5419  1636  30FF               	movlw	255
  5420  1637  05CF               	andwf	___ftadd@f1+1,f
  5421  1638  3000               	movlw	0
  5422  1639  05D0               	andwf	___ftadd@f1+2,f
  5423  163A  17D2               	bsf	___ftadd@f2+1,7
  5424  163B  30FF               	movlw	255
  5425  163C  05D1               	andwf	___ftadd@f2,f
  5426  163D  30FF               	movlw	255
  5427  163E  05D2               	andwf	___ftadd@f2+1,f
  5428  163F  3000               	movlw	0
  5429  1640  05D3               	andwf	___ftadd@f2+2,f
  5430  1641  0859               	movf	___ftadd@exp2,w
  5431  1642  025A               	subwf	___ftadd@exp1,w
  5432  1643  1803               	skipnc
  5433  1644  2E67               	goto	l1784
  5434  1645                     l1774:	
  5435  1645  3001               	movlw	1
  5436  1646                     u2475:	
  5437  1646  35D1               	lslf	___ftadd@f2,f
  5438  1647  0DD2               	rlf	___ftadd@f2+1,f
  5439  1648  0DD3               	rlf	___ftadd@f2+2,f
  5440  1649  0B89               	decfsz	9,f
  5441  164A  2E46               	goto	u2475
  5442  164B  3001               	movlw	1
  5443  164C  02D9               	subwf	___ftadd@exp2,f
  5444  164D  0859               	movf	___ftadd@exp2,w
  5445  164E  065A               	xorwf	___ftadd@exp1,w
  5446  164F  1903               	skipnz
  5447  1650  2E62               	goto	l1782
  5448  1651  3001               	movlw	1
  5449  1652  02D8               	subwf	___ftadd@sign,f
  5450  1653  0858               	movf	___ftadd@sign,w
  5451  1654  3907               	andlw	7
  5452  1655  1903               	btfsc	3,2
  5453  1656  2E62               	goto	l1782
  5454  1657  2E45               	goto	l1774
  5455  1658                     l1780:	
  5456  1658  3001               	movlw	1
  5457  1659                     u2505:	
  5458  1659  36D0               	lsrf	___ftadd@f1+2,f
  5459  165A  0CCF               	rrf	___ftadd@f1+1,f
  5460  165B  0CCE               	rrf	___ftadd@f1,f
  5461  165C  0B89               	decfsz	9,f
  5462  165D  2E59               	goto	u2505
  5463  165E  3001               	movlw	1
  5464  165F  00D4               	movwf	??___ftadd
  5465  1660  0854               	movf	??___ftadd,w
  5466  1661  07DA               	addwf	___ftadd@exp1,f
  5467  1662                     l1782:	
  5468  1662  085A               	movf	___ftadd@exp1,w
  5469  1663  0659               	xorwf	___ftadd@exp2,w
  5470  1664  1903               	btfsc	3,2
  5471  1665  2E8C               	goto	l412
  5472  1666  2E58               	goto	l1780
  5473  1667                     l1784:	
  5474  1667  085A               	movf	___ftadd@exp1,w
  5475  1668  0259               	subwf	___ftadd@exp2,w
  5476  1669  1803               	skipnc
  5477  166A  2E8C               	goto	l412
  5478  166B                     l1786:	
  5479  166B  3001               	movlw	1
  5480  166C                     u2535:	
  5481  166C  35CE               	lslf	___ftadd@f1,f
  5482  166D  0DCF               	rlf	___ftadd@f1+1,f
  5483  166E  0DD0               	rlf	___ftadd@f1+2,f
  5484  166F  0B89               	decfsz	9,f
  5485  1670  2E6C               	goto	u2535
  5486  1671  3001               	movlw	1
  5487  1672  02DA               	subwf	___ftadd@exp1,f
  5488  1673  0859               	movf	___ftadd@exp2,w
  5489  1674  065A               	xorwf	___ftadd@exp1,w
  5490  1675  1903               	skipnz
  5491  1676  2E88               	goto	l1794
  5492  1677  3001               	movlw	1
  5493  1678  02D8               	subwf	___ftadd@sign,f
  5494  1679  0858               	movf	___ftadd@sign,w
  5495  167A  3907               	andlw	7
  5496  167B  1903               	btfsc	3,2
  5497  167C  2E88               	goto	l1794
  5498  167D  2E6B               	goto	l1786
  5499  167E                     l1792:	
  5500  167E  3001               	movlw	1
  5501  167F                     u2565:	
  5502  167F  36D3               	lsrf	___ftadd@f2+2,f
  5503  1680  0CD2               	rrf	___ftadd@f2+1,f
  5504  1681  0CD1               	rrf	___ftadd@f2,f
  5505  1682  0B89               	decfsz	9,f
  5506  1683  2E7F               	goto	u2565
  5507  1684  3001               	movlw	1
  5508  1685  00D4               	movwf	??___ftadd
  5509  1686  0854               	movf	??___ftadd,w
  5510  1687  07D9               	addwf	___ftadd@exp2,f
  5511  1688                     l1794:	
  5512  1688  085A               	movf	___ftadd@exp1,w
  5513  1689  0659               	xorwf	___ftadd@exp2,w
  5514  168A  1D03               	skipz
  5515  168B  2E7E               	goto	l1792
  5516  168C                     l412:	
  5517  168C  1FD8               	btfss	___ftadd@sign,7
  5518  168D  2E9E               	goto	l1798
  5519  168E  30FF               	movlw	255
  5520  168F  06CE               	xorwf	___ftadd@f1,f
  5521  1690  30FF               	movlw	255
  5522  1691  06CF               	xorwf	___ftadd@f1+1,f
  5523  1692  30FF               	movlw	255
  5524  1693  06D0               	xorwf	___ftadd@f1+2,f
  5525  1694  3001               	movlw	1
  5526  1695  07CE               	addwf	___ftadd@f1,f
  5527  1696  3000               	movlw	0
  5528  1697  1803               	skipnc
  5529  1698  3001               	movlw	1
  5530  1699  07CF               	addwf	___ftadd@f1+1,f
  5531  169A  3000               	movlw	0
  5532  169B  1803               	skipnc
  5533  169C  3001               	movlw	1
  5534  169D  07D0               	addwf	___ftadd@f1+2,f
  5535  169E                     l1798:	
  5536  169E  1F58               	btfss	___ftadd@sign,6
  5537  169F  2EB0               	goto	l1802
  5538  16A0  30FF               	movlw	255
  5539  16A1  06D1               	xorwf	___ftadd@f2,f
  5540  16A2  30FF               	movlw	255
  5541  16A3  06D2               	xorwf	___ftadd@f2+1,f
  5542  16A4  30FF               	movlw	255
  5543  16A5  06D3               	xorwf	___ftadd@f2+2,f
  5544  16A6  3001               	movlw	1
  5545  16A7  07D1               	addwf	___ftadd@f2,f
  5546  16A8  3000               	movlw	0
  5547  16A9  1803               	skipnc
  5548  16AA  3001               	movlw	1
  5549  16AB  07D2               	addwf	___ftadd@f2+1,f
  5550  16AC  3000               	movlw	0
  5551  16AD  1803               	skipnc
  5552  16AE  3001               	movlw	1
  5553  16AF  07D3               	addwf	___ftadd@f2+2,f
  5554  16B0                     l1802:	
  5555  16B0  01D8               	clrf	___ftadd@sign
  5556  16B1  084E               	movf	___ftadd@f1,w
  5557  16B2  07D1               	addwf	___ftadd@f2,f
  5558  16B3  084F               	movf	___ftadd@f1+1,w
  5559  16B4  3DD2               	addwfc	___ftadd@f2+1,f
  5560  16B5  0850               	movf	___ftadd@f1+2,w
  5561  16B6  3DD3               	addwfc	___ftadd@f2+2,f
  5562  16B7  1FD3               	btfss	___ftadd@f2+2,7
  5563  16B8  2ECB               	goto	l1812
  5564  16B9  30FF               	movlw	255
  5565  16BA  06D1               	xorwf	___ftadd@f2,f
  5566  16BB  30FF               	movlw	255
  5567  16BC  06D2               	xorwf	___ftadd@f2+1,f
  5568  16BD  30FF               	movlw	255
  5569  16BE  06D3               	xorwf	___ftadd@f2+2,f
  5570  16BF  3001               	movlw	1
  5571  16C0  07D1               	addwf	___ftadd@f2,f
  5572  16C1  3000               	movlw	0
  5573  16C2  1803               	skipnc
  5574  16C3  3001               	movlw	1
  5575  16C4  07D2               	addwf	___ftadd@f2+1,f
  5576  16C5  3000               	movlw	0
  5577  16C6  1803               	skipnc
  5578  16C7  3001               	movlw	1
  5579  16C8  07D3               	addwf	___ftadd@f2+2,f
  5580  16C9  01D8               	clrf	___ftadd@sign
  5581  16CA  0AD8               	incf	___ftadd@sign,f
  5582  16CB                     l1812:	
  5583  16CB  0851               	movf	___ftadd@f2,w
  5584  16CC  00F0               	movwf	___ftpack@arg
  5585  16CD  0852               	movf	___ftadd@f2+1,w
  5586  16CE  00F1               	movwf	___ftpack@arg+1
  5587  16CF  0853               	movf	___ftadd@f2+2,w
  5588  16D0  00F2               	movwf	___ftpack@arg+2
  5589  16D1  085A               	movf	___ftadd@exp1,w
  5590  16D2  00D4               	movwf	??___ftadd
  5591  16D3  0854               	movf	??___ftadd,w
  5592  16D4  00F3               	movwf	___ftpack@exp
  5593  16D5  0858               	movf	___ftadd@sign,w
  5594  16D6  00D5               	movwf	??___ftadd+1
  5595  16D7  0855               	movf	??___ftadd+1,w
  5596  16D8  00F4               	movwf	___ftpack@sign
  5597  16D9  3192  22EF         	fcall	___ftpack
  5598  16DB  0870               	movf	?___ftpack,w
  5599  16DC  0020               	movlb	0	; select bank0
  5600  16DD  00CE               	movwf	?___ftadd
  5601  16DE  0871               	movf	?___ftpack+1,w
  5602  16DF  00CF               	movwf	?___ftadd+1
  5603  16E0  0872               	movf	?___ftpack+2,w
  5604  16E1  00D0               	movwf	?___ftadd+2
  5605  16E2  0008               	return
  5606  16E3                     __end_of___ftadd:	
  5607                           
  5608                           	psect	text17
  5609  0408                     __ptext17:	
  5610 ;; *************** function ___ftneg *****************
  5611 ;; Defined at:
  5612 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftneg.c"
  5613 ;; Parameters:    Size  Location     Type
  5614 ;;  f1              3    0[COMMON] float 
  5615 ;; Auto vars:     Size  Location     Type
  5616 ;;		None
  5617 ;; Return value:  Size  Location     Type
  5618 ;;                  3    0[COMMON] float 
  5619 ;; Registers used:
  5620 ;;		wreg
  5621 ;; Tracked objects:
  5622 ;;		On entry : 0/0
  5623 ;;		On exit  : 0/0
  5624 ;;		Unchanged: 0/0
  5625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5626 ;;      Params:         3       0       0       0       0       0       0       0
  5627 ;;      Locals:         0       0       0       0       0       0       0       0
  5628 ;;      Temps:          0       0       0       0       0       0       0       0
  5629 ;;      Totals:         3       0       0       0       0       0       0       0
  5630 ;;Total ram usage:        3 bytes
  5631 ;; Hardware stack levels used:    1
  5632 ;; This function calls:
  5633 ;;		Nothing
  5634 ;; This function is called by:
  5635 ;;		_sprintf
  5636 ;; This function uses a non-reentrant model
  5637 ;;
  5638                           
  5639                           
  5640                           ;psect for function ___ftneg
  5641  0408                     ___ftneg:	
  5642                           
  5643                           ;incstack = 0
  5644                           ; Regs used in ___ftneg: [wreg]
  5645  0408  0872               	movf	___ftneg@f1+2,w
  5646  0409  0471               	iorwf	___ftneg@f1+1,w
  5647  040A  0470               	iorwf	___ftneg@f1,w
  5648  040B  1903               	skipnz
  5649  040C  0008               	return
  5650  040D  3080               	movlw	128
  5651  040E  06F2               	xorwf	___ftneg@f1+2,f
  5652  040F  0008               	return
  5653  0410                     __end_of___ftneg:	
  5654                           
  5655                           	psect	text18
  5656  1189                     __ptext18:	
  5657 ;; *************** function ___ftge *****************
  5658 ;; Defined at:
  5659 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftge.c"
  5660 ;; Parameters:    Size  Location     Type
  5661 ;;  ff1             3    0[COMMON] float 
  5662 ;;  ff2             3    3[COMMON] float 
  5663 ;; Auto vars:     Size  Location     Type
  5664 ;;		None
  5665 ;; Return value:  Size  Location     Type
  5666 ;;		None               void
  5667 ;; Registers used:
  5668 ;;		wreg, status,2, status,0
  5669 ;; Tracked objects:
  5670 ;;		On entry : 0/0
  5671 ;;		On exit  : 0/0
  5672 ;;		Unchanged: 0/0
  5673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5674 ;;      Params:         6       0       0       0       0       0       0       0
  5675 ;;      Locals:         0       0       0       0       0       0       0       0
  5676 ;;      Temps:          3       0       0       0       0       0       0       0
  5677 ;;      Totals:         9       0       0       0       0       0       0       0
  5678 ;;Total ram usage:        9 bytes
  5679 ;; Hardware stack levels used:    1
  5680 ;; This function calls:
  5681 ;;		Nothing
  5682 ;; This function is called by:
  5683 ;;		_sprintf
  5684 ;; This function uses a non-reentrant model
  5685 ;;
  5686                           
  5687                           
  5688                           ;psect for function ___ftge
  5689  1189                     ___ftge:	
  5690                           
  5691                           ;incstack = 0
  5692                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  5693  1189  1FF2               	btfss	___ftge@ff1+2,7
  5694  118A  299F               	goto	l2050
  5695  118B  0970               	comf	___ftge@ff1,w
  5696  118C  00F6               	movwf	??___ftge
  5697  118D  0971               	comf	___ftge@ff1+1,w
  5698  118E  00F7               	movwf	??___ftge+1
  5699  118F  0972               	comf	___ftge@ff1+2,w
  5700  1190  00F8               	movwf	??___ftge+2
  5701  1191  0AF6               	incf	??___ftge,f
  5702  1192  1903               	skipnz
  5703  1193  0AF7               	incf	??___ftge+1,f
  5704  1194  1903               	skipnz
  5705  1195  0AF8               	incf	??___ftge+2,f
  5706  1196  3000               	movlw	0
  5707  1197  0776               	addwf	??___ftge,w
  5708  1198  00F0               	movwf	___ftge@ff1
  5709  1199  3000               	movlw	0
  5710  119A  3D77               	addwfc	??___ftge+1,w
  5711  119B  00F1               	movwf	___ftge@ff1+1
  5712  119C  3080               	movlw	128
  5713  119D  3D78               	addwfc	??___ftge+2,w
  5714  119E  00F2               	movwf	___ftge@ff1+2
  5715  119F                     l2050:	
  5716  119F  1FF5               	btfss	___ftge@ff2+2,7
  5717  11A0  29B5               	goto	l2054
  5718  11A1  0973               	comf	___ftge@ff2,w
  5719  11A2  00F6               	movwf	??___ftge
  5720  11A3  0974               	comf	___ftge@ff2+1,w
  5721  11A4  00F7               	movwf	??___ftge+1
  5722  11A5  0975               	comf	___ftge@ff2+2,w
  5723  11A6  00F8               	movwf	??___ftge+2
  5724  11A7  0AF6               	incf	??___ftge,f
  5725  11A8  1903               	skipnz
  5726  11A9  0AF7               	incf	??___ftge+1,f
  5727  11AA  1903               	skipnz
  5728  11AB  0AF8               	incf	??___ftge+2,f
  5729  11AC  3000               	movlw	0
  5730  11AD  0776               	addwf	??___ftge,w
  5731  11AE  00F3               	movwf	___ftge@ff2
  5732  11AF  3000               	movlw	0
  5733  11B0  3D77               	addwfc	??___ftge+1,w
  5734  11B1  00F4               	movwf	___ftge@ff2+1
  5735  11B2  3080               	movlw	128
  5736  11B3  3D78               	addwfc	??___ftge+2,w
  5737  11B4  00F5               	movwf	___ftge@ff2+2
  5738  11B5                     l2054:	
  5739  11B5  3080               	movlw	128
  5740  11B6  06F2               	xorwf	___ftge@ff1+2,f
  5741  11B7  3080               	movlw	128
  5742  11B8  06F5               	xorwf	___ftge@ff2+2,f
  5743  11B9  0875               	movf	___ftge@ff2+2,w
  5744  11BA  0272               	subwf	___ftge@ff1+2,w
  5745  11BB  1D03               	skipz
  5746  11BC  0008               	return
  5747  11BD  0874               	movf	___ftge@ff2+1,w
  5748  11BE  0271               	subwf	___ftge@ff1+1,w
  5749  11BF  1D03               	skipz
  5750  11C0  0008               	return
  5751  11C1  0873               	movf	___ftge@ff2,w
  5752  11C2  0270               	subwf	___ftge@ff1,w
  5753  11C3  0008               	return
  5754  11C4                     __end_of___ftge:	
  5755                           
  5756                           	psect	text19
  5757  1144                     __ptext19:	
  5758 ;; *************** function ___lwtoft *****************
  5759 ;; Defined at:
  5760 ;;		line 28 in file "D:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwtoft.c"
  5761 ;; Parameters:    Size  Location     Type
  5762 ;;  c               2    8[COMMON] unsigned int 
  5763 ;; Auto vars:     Size  Location     Type
  5764 ;;		None
  5765 ;; Return value:  Size  Location     Type
  5766 ;;                  3    8[COMMON] float 
  5767 ;; Registers used:
  5768 ;;		wreg, status,2, status,0, pclath, cstack
  5769 ;; Tracked objects:
  5770 ;;		On entry : 0/0
  5771 ;;		On exit  : 0/0
  5772 ;;		Unchanged: 0/0
  5773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5774 ;;      Params:         3       0       0       0       0       0       0       0
  5775 ;;      Locals:         0       0       0       0       0       0       0       0
  5776 ;;      Temps:          1       0       0       0       0       0       0       0
  5777 ;;      Totals:         4       0       0       0       0       0       0       0
  5778 ;;Total ram usage:        4 bytes
  5779 ;; Hardware stack levels used:    1
  5780 ;; Hardware stack levels required when called:    1
  5781 ;; This function calls:
  5782 ;;		___ftpack
  5783 ;; This function is called by:
  5784 ;;		_main
  5785 ;; This function uses a non-reentrant model
  5786 ;;
  5787                           
  5788                           
  5789                           ;psect for function ___lwtoft
  5790  1144                     ___lwtoft:	
  5791                           
  5792                           ;incstack = 0
  5793                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  5794  1144  0878               	movf	___lwtoft@c,w
  5795  1145  00F0               	movwf	___ftpack@arg
  5796  1146  0879               	movf	___lwtoft@c+1,w
  5797  1147  00F1               	movwf	___ftpack@arg+1
  5798  1148  01F2               	clrf	___ftpack@arg+2
  5799  1149  308E               	movlw	142
  5800  114A  00FB               	movwf	??___lwtoft
  5801  114B  087B               	movf	??___lwtoft,w
  5802  114C  00F3               	movwf	___ftpack@exp
  5803  114D  01F4               	clrf	___ftpack@sign
  5804  114E  3192  22EF         	fcall	___ftpack
  5805  1150  0870               	movf	?___ftpack,w
  5806  1151  00F8               	movwf	?___lwtoft
  5807  1152  0871               	movf	?___ftpack+1,w
  5808  1153  00F9               	movwf	?___lwtoft+1
  5809  1154  0872               	movf	?___ftpack+2,w
  5810  1155  00FA               	movwf	?___lwtoft+2
  5811  1156  0008               	return
  5812  1157                     __end_of___lwtoft:	
  5813                           
  5814                           	psect	text20
  5815  13DA                     __ptext20:	
  5816 ;; *************** function ___ftdiv *****************
  5817 ;; Defined at:
  5818 ;;		line 56 in file "D:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftdiv.c"
  5819 ;; Parameters:    Size  Location     Type
  5820 ;;  f2              3    0[BANK0 ] float 
  5821 ;;  f1              3    3[BANK0 ] float 
  5822 ;; Auto vars:     Size  Location     Type
  5823 ;;  f3              3   11[BANK0 ] float 
  5824 ;;  sign            1   15[BANK0 ] unsigned char 
  5825 ;;  exp             1   14[BANK0 ] unsigned char 
  5826 ;;  cntr            1   10[BANK0 ] unsigned char 
  5827 ;; Return value:  Size  Location     Type
  5828 ;;                  3    0[BANK0 ] float 
  5829 ;; Registers used:
  5830 ;;		wreg, status,2, status,0, pclath, cstack
  5831 ;; Tracked objects:
  5832 ;;		On entry : 0/0
  5833 ;;		On exit  : 0/0
  5834 ;;		Unchanged: 0/0
  5835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5836 ;;      Params:         0       6       0       0       0       0       0       0
  5837 ;;      Locals:         0       6       0       0       0       0       0       0
  5838 ;;      Temps:          0       4       0       0       0       0       0       0
  5839 ;;      Totals:         0      16       0       0       0       0       0       0
  5840 ;;Total ram usage:       16 bytes
  5841 ;; Hardware stack levels used:    1
  5842 ;; Hardware stack levels required when called:    1
  5843 ;; This function calls:
  5844 ;;		___ftpack
  5845 ;; This function is called by:
  5846 ;;		_main
  5847 ;; This function uses a non-reentrant model
  5848 ;;
  5849                           
  5850                           
  5851                           ;psect for function ___ftdiv
  5852  13DA                     ___ftdiv:	
  5853                           
  5854                           ;incstack = 0
  5855                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  5856  13DA  0020               	movlb	0	; select bank0
  5857  13DB  0823               	movf	___ftdiv@f1,w
  5858  13DC  00A6               	movwf	??___ftdiv
  5859  13DD  0824               	movf	___ftdiv@f1+1,w
  5860  13DE  00A7               	movwf	??___ftdiv+1
  5861  13DF  0825               	movf	___ftdiv@f1+2,w
  5862  13E0  00A8               	movwf	??___ftdiv+2
  5863  13E1  1003               	clrc
  5864  13E2  0D27               	rlf	??___ftdiv+1,w
  5865  13E3  0D28               	rlf	??___ftdiv+2,w
  5866  13E4  00A9               	movwf	??___ftdiv+3
  5867  13E5  0829               	movf	??___ftdiv+3,w
  5868  13E6  00AE               	movwf	___ftdiv@exp
  5869  13E7  082E               	movf	___ftdiv@exp,w
  5870  13E8  1D03               	btfss	3,2
  5871  13E9  2BF1               	goto	l2516
  5872  13EA  3000               	movlw	0
  5873  13EB  00A0               	movwf	?___ftdiv
  5874  13EC  3000               	movlw	0
  5875  13ED  00A1               	movwf	?___ftdiv+1
  5876  13EE  3000               	movlw	0
  5877  13EF  00A2               	movwf	?___ftdiv+2
  5878  13F0  0008               	return
  5879  13F1                     l2516:	
  5880  13F1  0820               	movf	___ftdiv@f2,w
  5881  13F2  00A6               	movwf	??___ftdiv
  5882  13F3  0821               	movf	___ftdiv@f2+1,w
  5883  13F4  00A7               	movwf	??___ftdiv+1
  5884  13F5  0822               	movf	___ftdiv@f2+2,w
  5885  13F6  00A8               	movwf	??___ftdiv+2
  5886  13F7  1003               	clrc
  5887  13F8  0D27               	rlf	??___ftdiv+1,w
  5888  13F9  0D28               	rlf	??___ftdiv+2,w
  5889  13FA  00A9               	movwf	??___ftdiv+3
  5890  13FB  0829               	movf	??___ftdiv+3,w
  5891  13FC  00AF               	movwf	___ftdiv@sign
  5892  13FD  082F               	movf	___ftdiv@sign,w
  5893  13FE  1D03               	btfss	3,2
  5894  13FF  2C07               	goto	l2522
  5895  1400  3000               	movlw	0
  5896  1401  00A0               	movwf	?___ftdiv
  5897  1402  3000               	movlw	0
  5898  1403  00A1               	movwf	?___ftdiv+1
  5899  1404  3000               	movlw	0
  5900  1405  00A2               	movwf	?___ftdiv+2
  5901  1406  0008               	return
  5902  1407                     l2522:	
  5903  1407  3000               	movlw	0
  5904  1408  00AB               	movwf	___ftdiv@f3
  5905  1409  3000               	movlw	0
  5906  140A  00AC               	movwf	___ftdiv@f3+1
  5907  140B  3000               	movlw	0
  5908  140C  00AD               	movwf	___ftdiv@f3+2
  5909  140D  3089               	movlw	137
  5910  140E  072F               	addwf	___ftdiv@sign,w
  5911  140F  00A6               	movwf	??___ftdiv
  5912  1410  0826               	movf	??___ftdiv,w
  5913  1411  02AE               	subwf	___ftdiv@exp,f
  5914  1412  0823               	movf	___ftdiv@f1,w
  5915  1413  00A6               	movwf	??___ftdiv
  5916  1414  0824               	movf	___ftdiv@f1+1,w
  5917  1415  00A7               	movwf	??___ftdiv+1
  5918  1416  0825               	movf	___ftdiv@f1+2,w
  5919  1417  00A8               	movwf	??___ftdiv+2
  5920  1418  3010               	movlw	16
  5921  1419                     u3945:	
  5922  1419  36A8               	lsrf	??___ftdiv+2,f
  5923  141A  0CA7               	rrf	??___ftdiv+1,f
  5924  141B  0CA6               	rrf	??___ftdiv,f
  5925  141C  0B89               	decfsz	9,f
  5926  141D  2C19               	goto	u3945
  5927  141E  0826               	movf	??___ftdiv,w
  5928  141F  00A9               	movwf	??___ftdiv+3
  5929  1420  0829               	movf	??___ftdiv+3,w
  5930  1421  00AF               	movwf	___ftdiv@sign
  5931  1422  0820               	movf	___ftdiv@f2,w
  5932  1423  00A6               	movwf	??___ftdiv
  5933  1424  0821               	movf	___ftdiv@f2+1,w
  5934  1425  00A7               	movwf	??___ftdiv+1
  5935  1426  0822               	movf	___ftdiv@f2+2,w
  5936  1427  00A8               	movwf	??___ftdiv+2
  5937  1428  3010               	movlw	16
  5938  1429                     u3955:	
  5939  1429  36A8               	lsrf	??___ftdiv+2,f
  5940  142A  0CA7               	rrf	??___ftdiv+1,f
  5941  142B  0CA6               	rrf	??___ftdiv,f
  5942  142C  0B89               	decfsz	9,f
  5943  142D  2C29               	goto	u3955
  5944  142E  0826               	movf	??___ftdiv,w
  5945  142F  00A9               	movwf	??___ftdiv+3
  5946  1430  0829               	movf	??___ftdiv+3,w
  5947  1431  06AF               	xorwf	___ftdiv@sign,f
  5948  1432  3080               	movlw	128
  5949  1433  00A6               	movwf	??___ftdiv
  5950  1434  0826               	movf	??___ftdiv,w
  5951  1435  05AF               	andwf	___ftdiv@sign,f
  5952  1436  17A4               	bsf	___ftdiv@f1+1,7
  5953  1437  30FF               	movlw	255
  5954  1438  05A3               	andwf	___ftdiv@f1,f
  5955  1439  30FF               	movlw	255
  5956  143A  05A4               	andwf	___ftdiv@f1+1,f
  5957  143B  3000               	movlw	0
  5958  143C  05A5               	andwf	___ftdiv@f1+2,f
  5959  143D  17A1               	bsf	___ftdiv@f2+1,7
  5960  143E  30FF               	movlw	255
  5961  143F  05A0               	andwf	___ftdiv@f2,f
  5962  1440  30FF               	movlw	255
  5963  1441  05A1               	andwf	___ftdiv@f2+1,f
  5964  1442  3000               	movlw	0
  5965  1443  05A2               	andwf	___ftdiv@f2+2,f
  5966  1444  3018               	movlw	24
  5967  1445  00A6               	movwf	??___ftdiv
  5968  1446  0826               	movf	??___ftdiv,w
  5969  1447  00AA               	movwf	___ftdiv@cntr
  5970  1448                     l2536:	
  5971  1448  3001               	movlw	1
  5972  1449                     u3965:	
  5973  1449  35AB               	lslf	___ftdiv@f3,f
  5974  144A  0DAC               	rlf	___ftdiv@f3+1,f
  5975  144B  0DAD               	rlf	___ftdiv@f3+2,f
  5976  144C  0B89               	decfsz	9,f
  5977  144D  2C49               	goto	u3965
  5978  144E  0822               	movf	___ftdiv@f2+2,w
  5979  144F  0225               	subwf	___ftdiv@f1+2,w
  5980  1450  1D03               	skipz
  5981  1451  2C58               	goto	u3975
  5982  1452  0821               	movf	___ftdiv@f2+1,w
  5983  1453  0224               	subwf	___ftdiv@f1+1,w
  5984  1454  1D03               	skipz
  5985  1455  2C58               	goto	u3975
  5986  1456  0820               	movf	___ftdiv@f2,w
  5987  1457  0223               	subwf	___ftdiv@f1,w
  5988  1458                     u3975:	
  5989  1458  1C03               	skipc
  5990  1459  2C61               	goto	l2544
  5991  145A  0820               	movf	___ftdiv@f2,w
  5992  145B  02A3               	subwf	___ftdiv@f1,f
  5993  145C  0821               	movf	___ftdiv@f2+1,w
  5994  145D  3BA4               	subwfb	___ftdiv@f1+1,f
  5995  145E  0822               	movf	___ftdiv@f2+2,w
  5996  145F  3BA5               	subwfb	___ftdiv@f1+2,f
  5997  1460  142B               	bsf	___ftdiv@f3,0
  5998  1461                     l2544:	
  5999  1461  3001               	movlw	1
  6000  1462                     u3985:	
  6001  1462  35A3               	lslf	___ftdiv@f1,f
  6002  1463  0DA4               	rlf	___ftdiv@f1+1,f
  6003  1464  0DA5               	rlf	___ftdiv@f1+2,f
  6004  1465  0B89               	decfsz	9,f
  6005  1466  2C62               	goto	u3985
  6006  1467  3001               	movlw	1
  6007  1468  02AA               	subwf	___ftdiv@cntr,f
  6008  1469  1D03               	btfss	3,2
  6009  146A  2C48               	goto	l2536
  6010  146B  082B               	movf	___ftdiv@f3,w
  6011  146C  00F0               	movwf	___ftpack@arg
  6012  146D  082C               	movf	___ftdiv@f3+1,w
  6013  146E  00F1               	movwf	___ftpack@arg+1
  6014  146F  082D               	movf	___ftdiv@f3+2,w
  6015  1470  00F2               	movwf	___ftpack@arg+2
  6016  1471  082E               	movf	___ftdiv@exp,w
  6017  1472  00A6               	movwf	??___ftdiv
  6018  1473  0826               	movf	??___ftdiv,w
  6019  1474  00F3               	movwf	___ftpack@exp
  6020  1475  082F               	movf	___ftdiv@sign,w
  6021  1476  00A7               	movwf	??___ftdiv+1
  6022  1477  0827               	movf	??___ftdiv+1,w
  6023  1478  00F4               	movwf	___ftpack@sign
  6024  1479  3192  22EF         	fcall	___ftpack
  6025  147B  0870               	movf	?___ftpack,w
  6026  147C  0020               	movlb	0	; select bank0
  6027  147D  00A0               	movwf	?___ftdiv
  6028  147E  0871               	movf	?___ftpack+1,w
  6029  147F  00A1               	movwf	?___ftdiv+1
  6030  1480  0872               	movf	?___ftpack+2,w
  6031  1481  00A2               	movwf	?___ftdiv+2
  6032  1482  0008               	return
  6033  1483                     __end_of___ftdiv:	
  6034                           
  6035                           	psect	text21
  6036  12EF                     __ptext21:	
  6037 ;; *************** function ___ftpack *****************
  6038 ;; Defined at:
  6039 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\float.c"
  6040 ;; Parameters:    Size  Location     Type
  6041 ;;  arg             3    0[COMMON] unsigned um
  6042 ;;  exp             1    3[COMMON] unsigned char 
  6043 ;;  sign            1    4[COMMON] unsigned char 
  6044 ;; Auto vars:     Size  Location     Type
  6045 ;;		None
  6046 ;; Return value:  Size  Location     Type
  6047 ;;                  3    0[COMMON] float 
  6048 ;; Registers used:
  6049 ;;		wreg, status,2, status,0
  6050 ;; Tracked objects:
  6051 ;;		On entry : 0/0
  6052 ;;		On exit  : 0/0
  6053 ;;		Unchanged: 0/0
  6054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6055 ;;      Params:         5       0       0       0       0       0       0       0
  6056 ;;      Locals:         0       0       0       0       0       0       0       0
  6057 ;;      Temps:          3       0       0       0       0       0       0       0
  6058 ;;      Totals:         8       0       0       0       0       0       0       0
  6059 ;;Total ram usage:        8 bytes
  6060 ;; Hardware stack levels used:    1
  6061 ;; This function calls:
  6062 ;;		Nothing
  6063 ;; This function is called by:
  6064 ;;		___ftadd
  6065 ;;		___ftdiv
  6066 ;;		___ftmul
  6067 ;;		___lltoft
  6068 ;;		___lwtoft
  6069 ;; This function uses a non-reentrant model
  6070 ;;
  6071                           
  6072                           
  6073                           ;psect for function ___ftpack
  6074  12EF                     ___ftpack:	
  6075                           
  6076                           ;incstack = 0
  6077                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  6078  12EF  0873               	movf	___ftpack@exp,w
  6079  12F0  1903               	btfsc	3,2
  6080  12F1  2AF7               	goto	l1622
  6081  12F2  0872               	movf	___ftpack@arg+2,w
  6082  12F3  0471               	iorwf	___ftpack@arg+1,w
  6083  12F4  0470               	iorwf	___ftpack@arg,w
  6084  12F5  1D03               	skipz
  6085  12F6  2B08               	goto	l1628
  6086  12F7                     l1622:	
  6087  12F7  3000               	movlw	0
  6088  12F8  00F0               	movwf	?___ftpack
  6089  12F9  3000               	movlw	0
  6090  12FA  00F1               	movwf	?___ftpack+1
  6091  12FB  3000               	movlw	0
  6092  12FC  00F2               	movwf	?___ftpack+2
  6093  12FD  0008               	return
  6094  12FE                     l1626:	
  6095  12FE  3001               	movlw	1
  6096  12FF  00F5               	movwf	??___ftpack
  6097  1300  0875               	movf	??___ftpack,w
  6098  1301  07F3               	addwf	___ftpack@exp,f
  6099  1302  3001               	movlw	1
  6100  1303                     u2055:	
  6101  1303  36F2               	lsrf	___ftpack@arg+2,f
  6102  1304  0CF1               	rrf	___ftpack@arg+1,f
  6103  1305  0CF0               	rrf	___ftpack@arg,f
  6104  1306  0B89               	decfsz	9,f
  6105  1307  2B03               	goto	u2055
  6106  1308                     l1628:	
  6107  1308  30FE               	movlw	254
  6108  1309  0572               	andwf	___ftpack@arg+2,w
  6109  130A  1903               	btfsc	3,2
  6110  130B  2B21               	goto	l381
  6111  130C  2AFE               	goto	l1626
  6112  130D                     l1630:	
  6113  130D  3001               	movlw	1
  6114  130E  00F5               	movwf	??___ftpack
  6115  130F  0875               	movf	??___ftpack,w
  6116  1310  07F3               	addwf	___ftpack@exp,f
  6117  1311  3001               	movlw	1
  6118  1312  07F0               	addwf	___ftpack@arg,f
  6119  1313  3000               	movlw	0
  6120  1314  1803               	skipnc
  6121  1315  3001               	movlw	1
  6122  1316  07F1               	addwf	___ftpack@arg+1,f
  6123  1317  3000               	movlw	0
  6124  1318  1803               	skipnc
  6125  1319  3001               	movlw	1
  6126  131A  07F2               	addwf	___ftpack@arg+2,f
  6127  131B  3001               	movlw	1
  6128  131C                     u2075:	
  6129  131C  36F2               	lsrf	___ftpack@arg+2,f
  6130  131D  0CF1               	rrf	___ftpack@arg+1,f
  6131  131E  0CF0               	rrf	___ftpack@arg,f
  6132  131F  0B89               	decfsz	9,f
  6133  1320  2B1C               	goto	u2075
  6134  1321                     l381:	
  6135  1321  30FF               	movlw	255
  6136  1322  0572               	andwf	___ftpack@arg+2,w
  6137  1323  1903               	btfsc	3,2
  6138  1324  2B2E               	goto	l1638
  6139  1325  2B0D               	goto	l1630
  6140  1326                     l1636:	
  6141  1326  3001               	movlw	1
  6142  1327  02F3               	subwf	___ftpack@exp,f
  6143  1328  3001               	movlw	1
  6144  1329                     u2095:	
  6145  1329  35F0               	lslf	___ftpack@arg,f
  6146  132A  0DF1               	rlf	___ftpack@arg+1,f
  6147  132B  0DF2               	rlf	___ftpack@arg+2,f
  6148  132C  0B89               	decfsz	9,f
  6149  132D  2B29               	goto	u2095
  6150  132E                     l1638:	
  6151  132E  1BF1               	btfsc	___ftpack@arg+1,7
  6152  132F  2B34               	goto	l388
  6153  1330  3002               	movlw	2
  6154  1331  0273               	subwf	___ftpack@exp,w
  6155  1332  1803               	skipnc
  6156  1333  2B26               	goto	l1636
  6157  1334                     l388:	
  6158  1334  1873               	btfsc	___ftpack@exp,0
  6159  1335  2B3C               	goto	l389
  6160  1336  30FF               	movlw	255
  6161  1337  05F0               	andwf	___ftpack@arg,f
  6162  1338  307F               	movlw	127
  6163  1339  05F1               	andwf	___ftpack@arg+1,f
  6164  133A  30FF               	movlw	255
  6165  133B  05F2               	andwf	___ftpack@arg+2,f
  6166  133C                     l389:	
  6167  133C  1003               	clrc
  6168  133D  0CF3               	rrf	___ftpack@exp,f
  6169  133E  0873               	movf	___ftpack@exp,w
  6170  133F  00F5               	movwf	??___ftpack
  6171  1340  01F6               	clrf	??___ftpack+1
  6172  1341  01F7               	clrf	??___ftpack+2
  6173  1342  3010               	movlw	16
  6174  1343                     u2135:	
  6175  1343  35F5               	lslf	??___ftpack,f
  6176  1344  0DF6               	rlf	??___ftpack+1,f
  6177  1345  0DF7               	rlf	??___ftpack+2,f
  6178  1346  0B89               	decfsz	9,f
  6179  1347  2B43               	goto	u2135
  6180  1348  0875               	movf	??___ftpack,w
  6181  1349  04F0               	iorwf	___ftpack@arg,f
  6182  134A  0876               	movf	??___ftpack+1,w
  6183  134B  04F1               	iorwf	___ftpack@arg+1,f
  6184  134C  0877               	movf	??___ftpack+2,w
  6185  134D  04F2               	iorwf	___ftpack@arg+2,f
  6186  134E  0874               	movf	___ftpack@sign,w
  6187  134F  1903               	btfsc	3,2
  6188  1350  0008               	return
  6189  1351  17F2               	bsf	___ftpack@arg+2,7
  6190  1352  0008               	return
  6191  1353                     __end_of___ftpack:	
  6192                           
  6193                           	psect	text22
  6194  1133                     __ptext22:	
  6195 ;; *************** function ___bmul *****************
  6196 ;; Defined at:
  6197 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul8.c"
  6198 ;; Parameters:    Size  Location     Type
  6199 ;;  multiplier      1    wreg     unsigned char 
  6200 ;;  multiplicand    1    0[COMMON] unsigned char 
  6201 ;; Auto vars:     Size  Location     Type
  6202 ;;  multiplier      1    3[COMMON] unsigned char 
  6203 ;;  product         1    2[COMMON] unsigned char 
  6204 ;; Return value:  Size  Location     Type
  6205 ;;                  1    wreg      unsigned char 
  6206 ;; Registers used:
  6207 ;;		wreg, status,2, status,0
  6208 ;; Tracked objects:
  6209 ;;		On entry : 0/0
  6210 ;;		On exit  : 0/0
  6211 ;;		Unchanged: 0/0
  6212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6213 ;;      Params:         1       0       0       0       0       0       0       0
  6214 ;;      Locals:         2       0       0       0       0       0       0       0
  6215 ;;      Temps:          1       0       0       0       0       0       0       0
  6216 ;;      Totals:         4       0       0       0       0       0       0       0
  6217 ;;Total ram usage:        4 bytes
  6218 ;; Hardware stack levels used:    1
  6219 ;; This function calls:
  6220 ;;		Nothing
  6221 ;; This function is called by:
  6222 ;;		_main
  6223 ;; This function uses a non-reentrant model
  6224 ;;
  6225                           
  6226                           
  6227                           ;psect for function ___bmul
  6228  1133                     ___bmul:	
  6229                           
  6230                           ;incstack = 0
  6231                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  6232                           ;___bmul@multiplier stored from wreg
  6233  1133  00F3               	movwf	___bmul@multiplier
  6234  1134  01F2               	clrf	___bmul@product
  6235  1135                     l2498:	
  6236  1135  1C73               	btfss	___bmul@multiplier,0
  6237  1136  293B               	goto	l2502
  6238  1137  0870               	movf	___bmul@multiplicand,w
  6239  1138  00F1               	movwf	??___bmul
  6240  1139  0871               	movf	??___bmul,w
  6241  113A  07F2               	addwf	___bmul@product,f
  6242  113B                     l2502:	
  6243  113B  1003               	clrc
  6244  113C  0DF0               	rlf	___bmul@multiplicand,f
  6245  113D  1003               	clrc
  6246  113E  0CF3               	rrf	___bmul@multiplier,f
  6247  113F  0873               	movf	___bmul@multiplier,w
  6248  1140  1D03               	btfss	3,2
  6249  1141  2935               	goto	l2498
  6250  1142  0872               	movf	___bmul@product,w
  6251  1143  0008               	return
  6252  1144                     __end_of___bmul:	
  6253                           
  6254                           	psect	text23
  6255  110F                     __ptext23:	
  6256 ;; *************** function _UART_Write *****************
  6257 ;; Defined at:
  6258 ;;		line 16 in file "main.c"
  6259 ;; Parameters:    Size  Location     Type
  6260 ;;  txData          1    wreg     unsigned char 
  6261 ;; Auto vars:     Size  Location     Type
  6262 ;;  txData          1    0[COMMON] unsigned char 
  6263 ;; Return value:  Size  Location     Type
  6264 ;;                  1    wreg      void 
  6265 ;; Registers used:
  6266 ;;		wreg
  6267 ;; Tracked objects:
  6268 ;;		On entry : 0/0
  6269 ;;		On exit  : 0/0
  6270 ;;		Unchanged: 0/0
  6271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6272 ;;      Params:         0       0       0       0       0       0       0       0
  6273 ;;      Locals:         1       0       0       0       0       0       0       0
  6274 ;;      Temps:          0       0       0       0       0       0       0       0
  6275 ;;      Totals:         1       0       0       0       0       0       0       0
  6276 ;;Total ram usage:        1 bytes
  6277 ;; Hardware stack levels used:    1
  6278 ;; This function calls:
  6279 ;;		Nothing
  6280 ;; This function is called by:
  6281 ;;		_main
  6282 ;; This function uses a non-reentrant model
  6283 ;;
  6284                           
  6285                           
  6286                           ;psect for function _UART_Write
  6287  110F                     _UART_Write:	
  6288                           
  6289                           ;incstack = 0
  6290                           ; Regs used in _UART_Write: [wreg]
  6291                           ;UART_Write@txData stored from wreg
  6292  110F  00F0               	movwf	UART_Write@txData
  6293  1110                     l37:	
  6294                           ;main.c: 19: {
  6295                           
  6296                           ;main.c: 18: while(0 == PIR1bits.TXIF)
  6297                           
  6298  1110  0020               	movlb	0	; select bank0
  6299  1111  1E11               	btfss	17,4	;volatile
  6300  1112  2910               	goto	l37
  6301                           
  6302                           ;main.c: 20: }
  6303                           ;main.c: 22: TXREG = txData;
  6304  1113  0870               	movf	UART_Write@txData,w
  6305  1114  0023               	movlb	3	; select bank3
  6306  1115  009A               	movwf	26	;volatile
  6307  1116  0008               	return
  6308  1117                     __end_of_UART_Write:	
  6309                           
  6310                           	psect	text24
  6311  1117                     __ptext24:	
  6312 ;; *************** function _UART_Init *****************
  6313 ;; Defined at:
  6314 ;;		line 26 in file "main.c"
  6315 ;; Parameters:    Size  Location     Type
  6316 ;;		None
  6317 ;; Auto vars:     Size  Location     Type
  6318 ;;		None
  6319 ;; Return value:  Size  Location     Type
  6320 ;;                  1    wreg      void 
  6321 ;; Registers used:
  6322 ;;		wreg, status,2
  6323 ;; Tracked objects:
  6324 ;;		On entry : 0/0
  6325 ;;		On exit  : 0/0
  6326 ;;		Unchanged: 0/0
  6327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6328 ;;      Params:         0       0       0       0       0       0       0       0
  6329 ;;      Locals:         0       0       0       0       0       0       0       0
  6330 ;;      Temps:          0       0       0       0       0       0       0       0
  6331 ;;      Totals:         0       0       0       0       0       0       0       0
  6332 ;;Total ram usage:        0 bytes
  6333 ;; Hardware stack levels used:    1
  6334 ;; This function calls:
  6335 ;;		Nothing
  6336 ;; This function is called by:
  6337 ;;		_main
  6338 ;; This function uses a non-reentrant model
  6339 ;;
  6340                           
  6341                           
  6342                           ;psect for function _UART_Init
  6343  1117                     _UART_Init:	
  6344                           
  6345                           ;main.c: 29: TRISCbits.TRISC6 = 0;
  6346                           
  6347                           ;incstack = 0
  6348                           ; Regs used in _UART_Init: [wreg+status,2]
  6349  1117  0021               	movlb	1	; select bank1
  6350  1118  130E               	bcf	14,6	;volatile
  6351                           
  6352                           ;main.c: 30: ANSELC = 0;
  6353  1119  0023               	movlb	3	; select bank3
  6354  111A  018E               	clrf	14	;volatile
  6355                           
  6356                           ;main.c: 33: BAUDCON = 0x08;
  6357  111B  3008               	movlw	8
  6358  111C  009F               	movwf	31	;volatile
  6359                           
  6360                           ;main.c: 36: RCSTA = 0x90;
  6361  111D  3090               	movlw	144
  6362  111E  009D               	movwf	29	;volatile
  6363                           
  6364                           ;main.c: 39: TXSTA = 0x24;
  6365  111F  3024               	movlw	36
  6366  1120  009E               	movwf	30	;volatile
  6367                           
  6368                           ;main.c: 42: SPBRGL = 0xCF;
  6369  1121  30CF               	movlw	207
  6370  1122  009B               	movwf	27	;volatile
  6371                           
  6372                           ;main.c: 45: SPBRGH = 0x00;
  6373  1123  019C               	clrf	28	;volatile
  6374  1124  0008               	return
  6375  1125                     __end_of_UART_Init:	
  6376                           
  6377                           	psect	text25
  6378  1157                     __ptext25:	
  6379 ;; *************** function _ADC_Init *****************
  6380 ;; Defined at:
  6381 ;;		line 50 in file "main.c"
  6382 ;; Parameters:    Size  Location     Type
  6383 ;;		None
  6384 ;; Auto vars:     Size  Location     Type
  6385 ;;		None
  6386 ;; Return value:  Size  Location     Type
  6387 ;;                  1    wreg      void 
  6388 ;; Registers used:
  6389 ;;		wreg, status,2, status,0
  6390 ;; Tracked objects:
  6391 ;;		On entry : 0/0
  6392 ;;		On exit  : 0/0
  6393 ;;		Unchanged: 0/0
  6394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6395 ;;      Params:         0       0       0       0       0       0       0       0
  6396 ;;      Locals:         0       0       0       0       0       0       0       0
  6397 ;;      Temps:          0       0       0       0       0       0       0       0
  6398 ;;      Totals:         0       0       0       0       0       0       0       0
  6399 ;;Total ram usage:        0 bytes
  6400 ;; Hardware stack levels used:    1
  6401 ;; This function calls:
  6402 ;;		Nothing
  6403 ;; This function is called by:
  6404 ;;		_main
  6405 ;; This function uses a non-reentrant model
  6406 ;;
  6407                           
  6408                           
  6409                           ;psect for function _ADC_Init
  6410  1157                     _ADC_Init:	
  6411                           
  6412                           ;main.c: 53: TRISAbits.TRISA1 = 1;
  6413                           
  6414                           ;incstack = 0
  6415                           ; Regs used in _ADC_Init: [wreg+status,2+status,0]
  6416  1157  0021               	movlb	1	; select bank1
  6417  1158  148C               	bsf	12,1	;volatile
  6418                           
  6419                           ;main.c: 54: ANSELAbits.ANSA1 = 1;
  6420  1159  0023               	movlb	3	; select bank3
  6421  115A  148C               	bsf	12,1	;volatile
  6422                           
  6423                           ;main.c: 57: ADCON0bits.CHS = 1;
  6424  115B  0021               	movlb	1	; select bank1
  6425  115C  081D               	movf	29,w	;volatile
  6426  115D  3983               	andlw	-125
  6427  115E  3804               	iorlw	4
  6428  115F  009D               	movwf	29	;volatile
  6429                           
  6430                           ;main.c: 58: ADCON1bits.ADPREF = 0;
  6431  1160  30FC               	movlw	-4
  6432  1161  059E               	andwf	30,f	;volatile
  6433                           
  6434                           ;main.c: 59: ADCON1bits.ADCS = 0b001;
  6435  1162  081E               	movf	30,w	;volatile
  6436  1163  398F               	andlw	-113
  6437  1164  3810               	iorlw	16
  6438  1165  009E               	movwf	30	;volatile
  6439                           
  6440                           ;main.c: 60: ADCON1bits.ADFM = 1;
  6441  1166  179E               	bsf	30,7	;volatile
  6442                           
  6443                           ;main.c: 61: ADCON0bits.ADON = 1;
  6444  1167  141D               	bsf	29,0	;volatile
  6445                           
  6446                           ;main.c: 62: _delay((unsigned long)((10)*(8000000/4000000.0)));
  6447  1168  3006               	movlw	6
  6448  1169                     u4067:	
  6449  1169  0B89               	decfsz	9,f
  6450  116A  2969               	goto	u4067
  6451  116B  3200               	nop2
  6452  116C  0008               	return
  6453  116D                     __end_of_ADC_Init:	
  6454  007E                     btemp	set	126	;btemp
  6455  007E                     wtemp0	set	126
  6456                           
  6457                           	psect	text1_split_1
  6458  0D10                     l2362:	
  6459                           ;doprnt.c: 1175: {
  6460                           ;doprnt.c: 1180: while(width > 0) {
  6461                           
  6462                           ;doprnt.c: 1171: }
  6463                           ;doprnt.c: 1173: } else
  6464                           
  6465                           
  6466                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  6467  0D10  3020               	movlw	32
  6468  0D11  0020               	movlb	0	; select bank0
  6469  0D12  00E6               	movwf	??_sprintf
  6470  0D13  0021               	movlb	1	; select bank1
  6471  0D14  085C               	movf	sprintf@sp^(0+128),w
  6472  0D15  0086               	movwf	6
  6473  0D16  3001               	movlw	1	; select bank2/3
  6474  0D17  0087               	movwf	7
  6475  0D18  0020               	movlb	0	; select bank0
  6476  0D19  0866               	movf	??_sprintf,w
  6477  0D1A  0081               	movwf	1
  6478  0D1B  3001               	movlw	1
  6479  0D1C  00E6               	movwf	??_sprintf
  6480  0D1D  0866               	movf	??_sprintf,w
  6481  0D1E  0021               	movlb	1	; select bank1
  6482  0D1F  07DC               	addwf	sprintf@sp^(0+128),f
  6483                           
  6484                           ;doprnt.c: 1182: width--;
  6485  0D20  30FF               	movlw	255
  6486  0D21  07D5               	addwf	sprintf@width^(0+128),f
  6487  0D22  30FF               	movlw	255
  6488  0D23  3DD6               	addwfc	(sprintf@width+1)^(0+128),f
  6489  0D24                     l2368:	
  6490  0D24  0021               	movlb	1	; select bank1
  6491  0D25  0856               	movf	(sprintf@width+1)^(0+128),w
  6492  0D26  3A80               	xorlw	128
  6493  0D27  0020               	movlb	0	; select bank0
  6494  0D28  00E6               	movwf	??_sprintf
  6495  0D29  3080               	movlw	128
  6496  0D2A  0266               	subwf	??_sprintf,w
  6497  0D2B  1D03               	skipz
  6498  0D2C  2D30               	goto	u3655
  6499  0D2D  3001               	movlw	1
  6500  0D2E  0021               	movlb	1	; select bank1
  6501  0D2F  0255               	subwf	sprintf@width^(0+128),w
  6502  0D30                     u3655:	
  6503  0D30  1803               	skipnc
  6504  0D31  2D10               	goto	l2362
  6505                           
  6506                           ;doprnt.c: 1183: }
  6507                           ;doprnt.c: 1188: if(flag & 0x03)
  6508  0D32  3003               	movlw	3
  6509  0D33  0021               	movlb	1	; select bank1
  6510  0D34  0553               	andwf	sprintf@flag^(0+128),w
  6511  0D35  0020               	movlb	0	; select bank0
  6512  0D36  00E6               	movwf	??_sprintf
  6513  0D37  3000               	movlw	0
  6514  0D38  0021               	movlb	1	; select bank1
  6515  0D39  0554               	andwf	(sprintf@flag+1)^(0+128),w
  6516  0D3A  0020               	movlb	0	; select bank0
  6517  0D3B  00E7               	movwf	??_sprintf+1
  6518  0D3C  0866               	movf	??_sprintf,w
  6519  0D3D  0467               	iorwf	??_sprintf+1,w
  6520  0D3E  1903               	btfsc	3,2
  6521  0D3F  2D4F               	goto	l2384
  6522                           
  6523                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  6524  0D40  302D               	movlw	45
  6525  0D41                     L8:	
  6526  0D41  00E6               	movwf	??_sprintf
  6527  0D42  0021               	movlb	1	; select bank1
  6528  0D43  085C               	movf	sprintf@sp^(0+128),w
  6529  0D44  0086               	movwf	6
  6530  0D45  3001               	movlw	1	; select bank2/3
  6531  0D46  0087               	movwf	7
  6532  0D47  0020               	movlb	0	; select bank0
  6533  0D48  0866               	movf	??_sprintf,w
  6534  0D49  0081               	movwf	1
  6535  0D4A  3001               	movlw	1
  6536  0D4B  00E6               	movwf	??_sprintf
  6537  0D4C  0866               	movf	??_sprintf,w
  6538  0D4D  0021               	movlb	1	; select bank1
  6539  0D4E  07DC               	addwf	sprintf@sp^(0+128),f
  6540  0D4F                     l2384:	
  6541  0D4F  30FF               	movlw	255
  6542  0D50  0020               	movlb	0	; select bank0
  6543  0D51  00E6               	movwf	??_sprintf
  6544  0D52  0866               	movf	??_sprintf,w
  6545  0D53  0021               	movlb	1	; select bank1
  6546  0D54  07DD               	addwf	sprintf@c^(0+128),f
  6547  0D55  0A5D               	incf	sprintf@c^(0+128),w
  6548  0D56  1903               	btfsc	3,2
  6549  0D57  2DB7               	goto	l2392
  6550                           
  6551                           ;doprnt.c: 1200: {
  6552                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  6553                           
  6554                           ;doprnt.c: 1195: }
  6555                           ;doprnt.c: 1196: while(c--) {
  6556  0D58  085D               	movf	sprintf@c^(0+128),w
  6557  0D59  0020               	movlb	0	; select bank0
  6558  0D5A  00E6               	movwf	??_sprintf
  6559  0D5B  01E7               	clrf	??_sprintf+1
  6560  0D5C  35E6               	lslf	??_sprintf,f
  6561  0D5D  0DE7               	rlf	??_sprintf+1,f
  6562  0D5E  35E6               	lslf	??_sprintf,f
  6563  0D5F  0DE7               	rlf	??_sprintf+1,f
  6564  0D60  3000               	movlw	low (_dpowers| (0+32768))
  6565  0D61  0766               	addwf	??_sprintf,w
  6566  0D62  0084               	movwf	4
  6567  0D63  3098               	movlw	high (_dpowers| (0+32768))
  6568  0D64  3D67               	addwfc	??_sprintf+1,w
  6569  0D65  0085               	movwf	5
  6570  0D66  3F00               	moviw [0]fsr0
  6571  0D67  00F0               	movwf	___lldiv@divisor
  6572  0D68  3F01               	moviw [1]fsr0
  6573  0D69  00F1               	movwf	___lldiv@divisor+1
  6574  0D6A  3F02               	moviw [2]fsr0
  6575  0D6B  00F2               	movwf	___lldiv@divisor+2
  6576  0D6C  3F03               	moviw [3]fsr0
  6577  0D6D  00F3               	movwf	___lldiv@divisor+3
  6578  0D6E  0021               	movlb	1	; select bank1
  6579  0D6F  084C               	movf	(sprintf@val+3)^(0+128),w
  6580  0D70  00F7               	movwf	___lldiv@dividend+3
  6581  0D71  084B               	movf	(sprintf@val+2)^(0+128),w
  6582  0D72  00F6               	movwf	___lldiv@dividend+2
  6583  0D73  084A               	movf	(sprintf@val+1)^(0+128),w
  6584  0D74  00F5               	movwf	___lldiv@dividend+1
  6585  0D75  0849               	movf	sprintf@val^(0+128),w
  6586  0D76  00F4               	movwf	___lldiv@dividend
  6587  0D77  3192  224B  318D   	fcall	___lldiv
  6588  0D7A  0873               	movf	?___lldiv+3,w
  6589  0D7B  0021               	movlb	1	; select bank1
  6590  0D7C  00D0               	movwf	(sprintf@tmpval+3)^(0+128)
  6591  0D7D  0872               	movf	?___lldiv+2,w
  6592  0D7E  00CF               	movwf	(sprintf@tmpval+2)^(0+128)
  6593  0D7F  0871               	movf	?___lldiv+1,w
  6594  0D80  00CE               	movwf	(sprintf@tmpval+1)^(0+128)
  6595  0D81  0870               	movf	?___lldiv,w
  6596  0D82  00CD               	movwf	sprintf@tmpval^(0+128)
  6597                           
  6598                           ;doprnt.c: 1202: tmpval.vd %= 10;
  6599  0D83  3000               	movlw	0
  6600  0D84  00F3               	movwf	___llmod@divisor+3
  6601  0D85  3000               	movlw	0
  6602  0D86  00F2               	movwf	___llmod@divisor+2
  6603  0D87  3000               	movlw	0
  6604  0D88  00F1               	movwf	___llmod@divisor+1
  6605  0D89  300A               	movlw	10
  6606  0D8A  00F0               	movwf	___llmod@divisor
  6607  0D8B  0850               	movf	(sprintf@tmpval+3)^(0+128),w
  6608  0D8C  00F7               	movwf	___llmod@dividend+3
  6609  0D8D  084F               	movf	(sprintf@tmpval+2)^(0+128),w
  6610  0D8E  00F6               	movwf	___llmod@dividend+2
  6611  0D8F  084E               	movf	(sprintf@tmpval+1)^(0+128),w
  6612  0D90  00F5               	movwf	___llmod@dividend+1
  6613  0D91  084D               	movf	sprintf@tmpval^(0+128),w
  6614  0D92  00F4               	movwf	___llmod@dividend
  6615  0D93  3191  21C4  318D   	fcall	___llmod
  6616  0D96  0873               	movf	?___llmod+3,w
  6617  0D97  0021               	movlb	1	; select bank1
  6618  0D98  00D0               	movwf	(sprintf@tmpval+3)^(0+128)
  6619  0D99  0872               	movf	?___llmod+2,w
  6620  0D9A  00CF               	movwf	(sprintf@tmpval+2)^(0+128)
  6621  0D9B  0871               	movf	?___llmod+1,w
  6622  0D9C  00CE               	movwf	(sprintf@tmpval+1)^(0+128)
  6623  0D9D  0870               	movf	?___llmod,w
  6624  0D9E  00CD               	movwf	sprintf@tmpval^(0+128)
  6625                           
  6626                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  6627  0D9F  084D               	movf	sprintf@tmpval^(0+128),w
  6628  0DA0  3E30               	addlw	48
  6629  0DA1  0020               	movlb	0	; select bank0
  6630  0DA2  2D41               	goto	L8
  6631  0DA3                     l2386:	
  6632                           ;doprnt.c: 1204: }
  6633                           ;doprnt.c: 1206: }
  6634                           ;doprnt.c: 1207: while(exp > 0) {
  6635                           
  6636                           
  6637                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  6638  0DA3  3030               	movlw	48
  6639  0DA4  0020               	movlb	0	; select bank0
  6640  0DA5  00E6               	movwf	??_sprintf
  6641  0DA6  0021               	movlb	1	; select bank1
  6642  0DA7  085C               	movf	sprintf@sp^(0+128),w
  6643  0DA8  0086               	movwf	6
  6644  0DA9  3001               	movlw	1	; select bank2/3
  6645  0DAA  0087               	movwf	7
  6646  0DAB  0020               	movlb	0	; select bank0
  6647  0DAC  0866               	movf	??_sprintf,w
  6648  0DAD  0081               	movwf	1
  6649  0DAE  3001               	movlw	1
  6650  0DAF  00E6               	movwf	??_sprintf
  6651  0DB0  0866               	movf	??_sprintf,w
  6652  0DB1  0021               	movlb	1	; select bank1
  6653  0DB2  07DC               	addwf	sprintf@sp^(0+128),f
  6654                           
  6655                           ;doprnt.c: 1209: exp--;
  6656  0DB3  30FF               	movlw	255
  6657  0DB4  07D1               	addwf	sprintf@exp^(0+128),f
  6658  0DB5  30FF               	movlw	255
  6659  0DB6  3DD2               	addwfc	(sprintf@exp+1)^(0+128),f
  6660  0DB7                     l2392:	
  6661  0DB7  0852               	movf	(sprintf@exp+1)^(0+128),w
  6662  0DB8  3A80               	xorlw	128
  6663  0DB9  0020               	movlb	0	; select bank0
  6664  0DBA  00E6               	movwf	??_sprintf
  6665  0DBB  3080               	movlw	128
  6666  0DBC  0266               	subwf	??_sprintf,w
  6667  0DBD  1D03               	skipz
  6668  0DBE  2DC2               	goto	u3685
  6669  0DBF  3001               	movlw	1
  6670  0DC0  0021               	movlb	1	; select bank1
  6671  0DC1  0251               	subwf	sprintf@exp^(0+128),w
  6672  0DC2                     u3685:	
  6673  0DC2  1803               	skipnc
  6674  0DC3  2DA3               	goto	l2386
  6675                           
  6676                           ;doprnt.c: 1210: }
  6677                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  6678  0DC4  0021               	movlb	1	; select bank1
  6679  0DC5  085B               	movf	(sprintf@prec+1)^(0+128),w
  6680  0DC6  3A80               	xorlw	128
  6681  0DC7  0020               	movlb	0	; select bank0
  6682  0DC8  00E6               	movwf	??_sprintf
  6683  0DC9  3080               	movlw	128
  6684  0DCA  0266               	subwf	??_sprintf,w
  6685  0DCB  1D03               	skipz
  6686  0DCC  2DD0               	goto	u3695
  6687  0DCD  3009               	movlw	9
  6688  0DCE  0021               	movlb	1	; select bank1
  6689  0DCF  025A               	subwf	sprintf@prec^(0+128),w
  6690  0DD0                     u3695:	
  6691  0DD0  1C03               	skipc
  6692  0DD1  2DD4               	goto	l2398
  6693                           
  6694                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  6695  0DD2  3008               	movlw	8
  6696  0DD3  2DD6               	goto	L4
  6697  0DD4                     l2398:	
  6698                           
  6699                           ;doprnt.c: 1213: else
  6700                           ;doprnt.c: 1214: c = prec;
  6701  0DD4  0021               	movlb	1	; select bank1
  6702  0DD5  085A               	movf	sprintf@prec^(0+128),w
  6703  0DD6                     L4:	
  6704  0DD6  0020               	movlb	0	; select bank0
  6705  0DD7  00E6               	movwf	??_sprintf
  6706  0DD8  0866               	movf	??_sprintf,w
  6707  0DD9  0021               	movlb	1	; select bank1
  6708  0DDA  00DD               	movwf	sprintf@c^(0+128)
  6709                           
  6710                           ;doprnt.c: 1215: prec -= c;
  6711  0DDB  085D               	movf	sprintf@c^(0+128),w
  6712  0DDC  0020               	movlb	0	; select bank0
  6713  0DDD  00E6               	movwf	??_sprintf
  6714  0DDE  01E7               	clrf	??_sprintf+1
  6715  0DDF  1BE6               	btfsc	??_sprintf,7
  6716  0DE0  03E7               	decf	??_sprintf+1,f
  6717  0DE1  0866               	movf	??_sprintf,w
  6718  0DE2  0021               	movlb	1	; select bank1
  6719  0DE3  02DA               	subwf	sprintf@prec^(0+128),f
  6720  0DE4  0020               	movlb	0	; select bank0
  6721  0DE5  0867               	movf	??_sprintf+1,w
  6722  0DE6  0021               	movlb	1	; select bank1
  6723  0DE7  3BDB               	subwfb	(sprintf@prec+1)^(0+128),f
  6724                           
  6725                           ;doprnt.c: 1219: if(c)
  6726  0DE8  085D               	movf	sprintf@c^(0+128),w
  6727  0DE9  1903               	btfsc	3,2
  6728  0DEA  2DFB               	goto	l2406
  6729                           
  6730                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  6731  0DEB  302E               	movlw	46
  6732  0DEC  0020               	movlb	0	; select bank0
  6733  0DED  00E6               	movwf	??_sprintf
  6734  0DEE  0021               	movlb	1	; select bank1
  6735  0DEF  085C               	movf	sprintf@sp^(0+128),w
  6736  0DF0  0086               	movwf	6
  6737  0DF1  3001               	movlw	1	; select bank2/3
  6738  0DF2  0087               	movwf	7
  6739  0DF3  0020               	movlb	0	; select bank0
  6740  0DF4  0866               	movf	??_sprintf,w
  6741  0DF5  0081               	movwf	1
  6742  0DF6  3001               	movlw	1
  6743  0DF7  00E6               	movwf	??_sprintf
  6744  0DF8  0866               	movf	??_sprintf,w
  6745  0DF9  0021               	movlb	1	; select bank1
  6746  0DFA  07DC               	addwf	sprintf@sp^(0+128),f
  6747  0DFB                     l2406:	
  6748                           
  6749                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  6750  0DFB  085D               	movf	sprintf@c^(0+128),w
  6751  0DFC  318A  22CC  318D   	fcall	_scale
  6752  0DFF  0020               	movlb	0	; select bank0
  6753  0E00  0840               	movf	?_scale,w
  6754  0E01  0021               	movlb	1	; select bank1
  6755  0E02  00C5               	movwf	_sprintf$610^(0+128)
  6756  0E03  0020               	movlb	0	; select bank0
  6757  0E04  0841               	movf	?_scale+1,w
  6758  0E05  0021               	movlb	1	; select bank1
  6759  0E06  00C6               	movwf	(_sprintf$610+1)^(0+128)
  6760  0E07  0020               	movlb	0	; select bank0
  6761  0E08  0842               	movf	?_scale+2,w
  6762  0E09  0021               	movlb	1	; select bank1
  6763  0E0A  00C7               	movwf	(_sprintf$610+2)^(0+128)
  6764                           
  6765                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  6766  0E0B  0845               	movf	_sprintf$610^(0+128),w
  6767  0E0C  0020               	movlb	0	; select bank0
  6768  0E0D  00B3               	movwf	___ftmul@f2
  6769  0E0E  0021               	movlb	1	; select bank1
  6770  0E0F  0846               	movf	(_sprintf$610+1)^(0+128),w
  6771  0E10  0020               	movlb	0	; select bank0
  6772  0E11  00B4               	movwf	___ftmul@f2+1
  6773  0E12  0021               	movlb	1	; select bank1
  6774  0E13  0847               	movf	(_sprintf$610+2)^(0+128),w
  6775  0E14  0020               	movlb	0	; select bank0
  6776  0E15  00B5               	movwf	___ftmul@f2+2
  6777  0E16  0021               	movlb	1	; select bank1
  6778  0E17  0857               	movf	sprintf@fval^(0+128),w
  6779  0E18  0020               	movlb	0	; select bank0
  6780  0E19  00B0               	movwf	___ftmul@f1
  6781  0E1A  0021               	movlb	1	; select bank1
  6782  0E1B  0858               	movf	(sprintf@fval+1)^(0+128),w
  6783  0E1C  0020               	movlb	0	; select bank0
  6784  0E1D  00B1               	movwf	___ftmul@f1+1
  6785  0E1E  0021               	movlb	1	; select bank1
  6786  0E1F  0859               	movf	(sprintf@fval+2)^(0+128),w
  6787  0E20  0020               	movlb	0	; select bank0
  6788  0E21  00B2               	movwf	___ftmul@f1+2
  6789  0E22  3194  2483  318D   	fcall	___ftmul
  6790  0E25  0020               	movlb	0	; select bank0
  6791  0E26  0830               	movf	?___ftmul,w
  6792  0E27  00C9               	movwf	___fttol@f1
  6793  0E28  0831               	movf	?___ftmul+1,w
  6794  0E29  00CA               	movwf	___fttol@f1+1
  6795  0E2A  0832               	movf	?___ftmul+2,w
  6796  0E2B  00CB               	movwf	___fttol@f1+2
  6797  0E2C  3193  2353  318D   	fcall	___fttol
  6798  0E2F  0020               	movlb	0	; select bank0
  6799  0E30  084C               	movf	?___fttol+3,w
  6800  0E31  0021               	movlb	1	; select bank1
  6801  0E32  00CC               	movwf	(sprintf@val+3)^(0+128)
  6802  0E33  0020               	movlb	0	; select bank0
  6803  0E34  084B               	movf	?___fttol+2,w
  6804  0E35  0021               	movlb	1	; select bank1
  6805  0E36  00CB               	movwf	(sprintf@val+2)^(0+128)
  6806  0E37  0020               	movlb	0	; select bank0
  6807  0E38  084A               	movf	?___fttol+1,w
  6808  0E39  0021               	movlb	1	; select bank1
  6809  0E3A  00CA               	movwf	(sprintf@val+1)^(0+128)
  6810  0E3B  0020               	movlb	0	; select bank0
  6811  0E3C  0849               	movf	?___fttol,w
  6812  0E3D  0021               	movlb	1	; select bank1
  6813  0E3E                     L5:	
  6814  0E3E  00C9               	movwf	sprintf@val^(0+128)
  6815  0E3F  30FF               	movlw	255
  6816  0E40  0020               	movlb	0	; select bank0
  6817  0E41  00E6               	movwf	??_sprintf
  6818  0E42  0866               	movf	??_sprintf,w
  6819  0E43  0021               	movlb	1	; select bank1
  6820  0E44  07DD               	addwf	sprintf@c^(0+128),f
  6821  0E45  0A5D               	incf	sprintf@c^(0+128),w
  6822  0E46  1903               	btfsc	3,2
  6823  0E47  2EDF               	goto	l2428
  6824                           
  6825                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  6826                           
  6827                           ;doprnt.c: 1228: while(c--) {
  6828  0E48  085D               	movf	sprintf@c^(0+128),w
  6829  0E49  0020               	movlb	0	; select bank0
  6830  0E4A  00E6               	movwf	??_sprintf
  6831  0E4B  01E7               	clrf	??_sprintf+1
  6832  0E4C  35E6               	lslf	??_sprintf,f
  6833  0E4D  0DE7               	rlf	??_sprintf+1,f
  6834  0E4E  35E6               	lslf	??_sprintf,f
  6835  0E4F  0DE7               	rlf	??_sprintf+1,f
  6836  0E50  3000               	movlw	low (_dpowers| (0+32768))
  6837  0E51  0766               	addwf	??_sprintf,w
  6838  0E52  0084               	movwf	4
  6839  0E53  3098               	movlw	high (_dpowers| (0+32768))
  6840  0E54  3D67               	addwfc	??_sprintf+1,w
  6841  0E55  0085               	movwf	5
  6842  0E56  3F00               	moviw [0]fsr0
  6843  0E57  00F0               	movwf	___lldiv@divisor
  6844  0E58  3F01               	moviw [1]fsr0
  6845  0E59  00F1               	movwf	___lldiv@divisor+1
  6846  0E5A  3F02               	moviw [2]fsr0
  6847  0E5B  00F2               	movwf	___lldiv@divisor+2
  6848  0E5C  3F03               	moviw [3]fsr0
  6849  0E5D  00F3               	movwf	___lldiv@divisor+3
  6850  0E5E  0021               	movlb	1	; select bank1
  6851  0E5F  084C               	movf	(sprintf@val+3)^(0+128),w
  6852  0E60  00F7               	movwf	___lldiv@dividend+3
  6853  0E61  084B               	movf	(sprintf@val+2)^(0+128),w
  6854  0E62  00F6               	movwf	___lldiv@dividend+2
  6855  0E63  084A               	movf	(sprintf@val+1)^(0+128),w
  6856  0E64  00F5               	movwf	___lldiv@dividend+1
  6857  0E65  0849               	movf	sprintf@val^(0+128),w
  6858  0E66  00F4               	movwf	___lldiv@dividend
  6859  0E67  3192  224B  318D   	fcall	___lldiv
  6860  0E6A  0873               	movf	?___lldiv+3,w
  6861  0E6B  0021               	movlb	1	; select bank1
  6862  0E6C  00D0               	movwf	(sprintf@tmpval+3)^(0+128)
  6863  0E6D  0872               	movf	?___lldiv+2,w
  6864  0E6E  00CF               	movwf	(sprintf@tmpval+2)^(0+128)
  6865  0E6F  0871               	movf	?___lldiv+1,w
  6866  0E70  00CE               	movwf	(sprintf@tmpval+1)^(0+128)
  6867  0E71  0870               	movf	?___lldiv,w
  6868  0E72  00CD               	movwf	sprintf@tmpval^(0+128)
  6869                           
  6870                           ;doprnt.c: 1230: tmpval.vd %= 10;
  6871  0E73  3000               	movlw	0
  6872  0E74  00F3               	movwf	___llmod@divisor+3
  6873  0E75  3000               	movlw	0
  6874  0E76  00F2               	movwf	___llmod@divisor+2
  6875  0E77  3000               	movlw	0
  6876  0E78  00F1               	movwf	___llmod@divisor+1
  6877  0E79  300A               	movlw	10
  6878  0E7A  00F0               	movwf	___llmod@divisor
  6879  0E7B  0850               	movf	(sprintf@tmpval+3)^(0+128),w
  6880  0E7C  00F7               	movwf	___llmod@dividend+3
  6881  0E7D  084F               	movf	(sprintf@tmpval+2)^(0+128),w
  6882  0E7E  00F6               	movwf	___llmod@dividend+2
  6883  0E7F  084E               	movf	(sprintf@tmpval+1)^(0+128),w
  6884  0E80  00F5               	movwf	___llmod@dividend+1
  6885  0E81  084D               	movf	sprintf@tmpval^(0+128),w
  6886  0E82  00F4               	movwf	___llmod@dividend
  6887  0E83  3191  21C4  318D   	fcall	___llmod
  6888  0E86  0873               	movf	?___llmod+3,w
  6889  0E87  0021               	movlb	1	; select bank1
  6890  0E88  00D0               	movwf	(sprintf@tmpval+3)^(0+128)
  6891  0E89  0872               	movf	?___llmod+2,w
  6892  0E8A  00CF               	movwf	(sprintf@tmpval+2)^(0+128)
  6893  0E8B  0871               	movf	?___llmod+1,w
  6894  0E8C  00CE               	movwf	(sprintf@tmpval+1)^(0+128)
  6895  0E8D  0870               	movf	?___llmod,w
  6896  0E8E  00CD               	movwf	sprintf@tmpval^(0+128)
  6897                           
  6898                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  6899  0E8F  084D               	movf	sprintf@tmpval^(0+128),w
  6900  0E90  3E30               	addlw	48
  6901  0E91  0020               	movlb	0	; select bank0
  6902  0E92  00E6               	movwf	??_sprintf
  6903  0E93  0021               	movlb	1	; select bank1
  6904  0E94  085C               	movf	sprintf@sp^(0+128),w
  6905  0E95  0086               	movwf	6
  6906  0E96  3001               	movlw	1	; select bank2/3
  6907  0E97  0087               	movwf	7
  6908  0E98  0020               	movlb	0	; select bank0
  6909  0E99  0866               	movf	??_sprintf,w
  6910  0E9A  0081               	movwf	1
  6911  0E9B  3001               	movlw	1
  6912  0E9C  00E6               	movwf	??_sprintf
  6913  0E9D  0866               	movf	??_sprintf,w
  6914  0E9E  0021               	movlb	1	; select bank1
  6915  0E9F  07DC               	addwf	sprintf@sp^(0+128),f
  6916                           
  6917                           ;doprnt.c: 1232: val %= dpowers[c];
  6918  0EA0  085D               	movf	sprintf@c^(0+128),w
  6919  0EA1  0020               	movlb	0	; select bank0
  6920  0EA2  00E6               	movwf	??_sprintf
  6921  0EA3  01E7               	clrf	??_sprintf+1
  6922  0EA4  35E6               	lslf	??_sprintf,f
  6923  0EA5  0DE7               	rlf	??_sprintf+1,f
  6924  0EA6  35E6               	lslf	??_sprintf,f
  6925  0EA7  0DE7               	rlf	??_sprintf+1,f
  6926  0EA8  3000               	movlw	low (_dpowers| (0+32768))
  6927  0EA9  0766               	addwf	??_sprintf,w
  6928  0EAA  0084               	movwf	4
  6929  0EAB  3098               	movlw	high (_dpowers| (0+32768))
  6930  0EAC  3D67               	addwfc	??_sprintf+1,w
  6931  0EAD  0085               	movwf	5
  6932  0EAE  3F00               	moviw [0]fsr0
  6933  0EAF  00F0               	movwf	___llmod@divisor
  6934  0EB0  3F01               	moviw [1]fsr0
  6935  0EB1  00F1               	movwf	___llmod@divisor+1
  6936  0EB2  3F02               	moviw [2]fsr0
  6937  0EB3  00F2               	movwf	___llmod@divisor+2
  6938  0EB4  3F03               	moviw [3]fsr0
  6939  0EB5  00F3               	movwf	___llmod@divisor+3
  6940  0EB6  0021               	movlb	1	; select bank1
  6941  0EB7  084C               	movf	(sprintf@val+3)^(0+128),w
  6942  0EB8  00F7               	movwf	___llmod@dividend+3
  6943  0EB9  084B               	movf	(sprintf@val+2)^(0+128),w
  6944  0EBA  00F6               	movwf	___llmod@dividend+2
  6945  0EBB  084A               	movf	(sprintf@val+1)^(0+128),w
  6946  0EBC  00F5               	movwf	___llmod@dividend+1
  6947  0EBD  0849               	movf	sprintf@val^(0+128),w
  6948  0EBE  00F4               	movwf	___llmod@dividend
  6949  0EBF  3191  21C4  318D   	fcall	___llmod
  6950  0EC2  0873               	movf	?___llmod+3,w
  6951  0EC3  0021               	movlb	1	; select bank1
  6952  0EC4  00CC               	movwf	(sprintf@val+3)^(0+128)
  6953  0EC5  0872               	movf	?___llmod+2,w
  6954  0EC6  00CB               	movwf	(sprintf@val+2)^(0+128)
  6955  0EC7  0871               	movf	?___llmod+1,w
  6956  0EC8  00CA               	movwf	(sprintf@val+1)^(0+128)
  6957  0EC9  0870               	movf	?___llmod,w
  6958  0ECA  2E3E               	goto	L5
  6959  0ECB                     l2422:	
  6960                           ;doprnt.c: 1233: }
  6961                           ;doprnt.c: 1235: while(prec) {
  6962                           
  6963                           
  6964                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  6965  0ECB  3030               	movlw	48
  6966  0ECC  0020               	movlb	0	; select bank0
  6967  0ECD  00E6               	movwf	??_sprintf
  6968  0ECE  0021               	movlb	1	; select bank1
  6969  0ECF  085C               	movf	sprintf@sp^(0+128),w
  6970  0ED0  0086               	movwf	6
  6971  0ED1  3001               	movlw	1	; select bank2/3
  6972  0ED2  0087               	movwf	7
  6973  0ED3  0020               	movlb	0	; select bank0
  6974  0ED4  0866               	movf	??_sprintf,w
  6975  0ED5  0081               	movwf	1
  6976  0ED6  3001               	movlw	1
  6977  0ED7  00E6               	movwf	??_sprintf
  6978  0ED8  0866               	movf	??_sprintf,w
  6979  0ED9  0021               	movlb	1	; select bank1
  6980  0EDA  07DC               	addwf	sprintf@sp^(0+128),f
  6981                           
  6982                           ;doprnt.c: 1237: prec--;
  6983  0EDB  30FF               	movlw	255
  6984  0EDC  07DA               	addwf	sprintf@prec^(0+128),f
  6985  0EDD  30FF               	movlw	255
  6986  0EDE  3DDB               	addwfc	(sprintf@prec+1)^(0+128),f
  6987  0EDF                     l2428:	
  6988  0EDF  085A               	movf	sprintf@prec^(0+128),w
  6989  0EE0  045B               	iorwf	(sprintf@prec+1)^(0+128),w
  6990  0EE1  1903               	btfsc	3,2
  6991  0EE2  2FF8               	goto	L18
  6992  0EE3  2ECB               	goto	l2422
  6993  0EE4                     l2430:	
  6994                           ;doprnt.c: 1238: }
  6995                           ;doprnt.c: 1245: continue;
  6996                           
  6997                           
  6998                           ;doprnt.c: 1246: }
  6999                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  7000  0EE4  0021               	movlb	1	; select bank1
  7001  0EE5  085A               	movf	sprintf@prec^(0+128),w
  7002  0EE6  045B               	iorwf	(sprintf@prec+1)^(0+128),w
  7003  0EE7  1D03               	btfss	3,2
  7004  0EE8  2EF3               	goto	l178
  7005  0EE9  084C               	movf	(sprintf@val+3)^(0+128),w
  7006  0EEA  044B               	iorwf	(sprintf@val+2)^(0+128),w
  7007  0EEB  044A               	iorwf	(sprintf@val+1)^(0+128),w
  7008  0EEC  0449               	iorwf	sprintf@val^(0+128),w
  7009  0EED  1D03               	skipz
  7010  0EEE  2EF3               	goto	l178
  7011                           
  7012                           ;doprnt.c: 1291: prec++;
  7013  0EEF  3001               	movlw	1
  7014  0EF0  07DA               	addwf	sprintf@prec^(0+128),f
  7015  0EF1  3000               	movlw	0
  7016  0EF2  3DDB               	addwfc	(sprintf@prec+1)^(0+128),f
  7017  0EF3                     l178:	
  7018                           
  7019                           ;doprnt.c: 1339: if(c < prec)
  7020  0EF3  085D               	movf	sprintf@c^(0+128),w
  7021  0EF4  0020               	movlb	0	; select bank0
  7022  0EF5  00E6               	movwf	??_sprintf
  7023  0EF6  01E7               	clrf	??_sprintf+1
  7024  0EF7  1BE6               	btfsc	??_sprintf,7
  7025  0EF8  03E7               	decf	??_sprintf+1,f
  7026  0EF9  0867               	movf	??_sprintf+1,w
  7027  0EFA  3A80               	xorlw	128
  7028  0EFB  00E8               	movwf	??_sprintf+2
  7029  0EFC  0021               	movlb	1	; select bank1
  7030  0EFD  085B               	movf	(sprintf@prec+1)^(0+128),w
  7031  0EFE  3A80               	xorlw	128
  7032  0EFF  0020               	movlb	0	; select bank0
  7033  0F00  0268               	subwf	??_sprintf+2,w
  7034  0F01  1D03               	skipz
  7035  0F02  2F07               	goto	u3755
  7036  0F03  0021               	movlb	1	; select bank1
  7037  0F04  085A               	movf	sprintf@prec^(0+128),w
  7038  0F05  0020               	movlb	0	; select bank0
  7039  0F06  0266               	subwf	??_sprintf,w
  7040  0F07                     u3755:	
  7041  0F07  1803               	skipnc
  7042  0F08  2F11               	goto	l2438
  7043                           
  7044                           ;doprnt.c: 1340: c = prec;
  7045  0F09  0021               	movlb	1	; select bank1
  7046  0F0A  085A               	movf	sprintf@prec^(0+128),w
  7047  0F0B  0020               	movlb	0	; select bank0
  7048  0F0C  00E6               	movwf	??_sprintf
  7049  0F0D  0866               	movf	??_sprintf,w
  7050  0F0E  0021               	movlb	1	; select bank1
  7051  0F0F  00DD               	movwf	sprintf@c^(0+128)
  7052  0F10  2F2D               	goto	l180
  7053  0F11                     l2438:	
  7054                           
  7055                           ;doprnt.c: 1341: else if(prec < c)
  7056  0F11  0021               	movlb	1	; select bank1
  7057  0F12  085D               	movf	sprintf@c^(0+128),w
  7058  0F13  0020               	movlb	0	; select bank0
  7059  0F14  00E6               	movwf	??_sprintf
  7060  0F15  01E7               	clrf	??_sprintf+1
  7061  0F16  1BE6               	btfsc	??_sprintf,7
  7062  0F17  03E7               	decf	??_sprintf+1,f
  7063  0F18  0021               	movlb	1	; select bank1
  7064  0F19  085B               	movf	(sprintf@prec+1)^(0+128),w
  7065  0F1A  3A80               	xorlw	128
  7066  0F1B  0020               	movlb	0	; select bank0
  7067  0F1C  00E8               	movwf	??_sprintf+2
  7068  0F1D  0867               	movf	??_sprintf+1,w
  7069  0F1E  3A80               	xorlw	128
  7070  0F1F  0268               	subwf	??_sprintf+2,w
  7071  0F20  1D03               	skipz
  7072  0F21  2F25               	goto	u3765
  7073  0F22  0866               	movf	??_sprintf,w
  7074  0F23  0021               	movlb	1	; select bank1
  7075  0F24  025A               	subwf	sprintf@prec^(0+128),w
  7076  0F25                     u3765:	
  7077  0F25  1803               	skipnc
  7078  0F26  2F2D               	goto	l180
  7079                           
  7080                           ;doprnt.c: 1342: prec = c;
  7081  0F27  0021               	movlb	1	; select bank1
  7082  0F28  085D               	movf	sprintf@c^(0+128),w
  7083  0F29  00DA               	movwf	sprintf@prec^(0+128)
  7084  0F2A  01DB               	clrf	(sprintf@prec+1)^(0+128)
  7085  0F2B  1BDA               	btfsc	sprintf@prec^(0+128),7
  7086  0F2C  03DB               	decf	(sprintf@prec+1)^(0+128),f
  7087  0F2D                     l180:	
  7088                           
  7089                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7090  0F2D  0021               	movlb	1	; select bank1
  7091  0F2E  0855               	movf	sprintf@width^(0+128),w
  7092  0F2F  0456               	iorwf	(sprintf@width+1)^(0+128),w
  7093  0F30  1903               	btfsc	3,2
  7094  0F31  2F44               	goto	l2446
  7095  0F32  3003               	movlw	3
  7096  0F33  0553               	andwf	sprintf@flag^(0+128),w
  7097  0F34  0020               	movlb	0	; select bank0
  7098  0F35  00E6               	movwf	??_sprintf
  7099  0F36  3000               	movlw	0
  7100  0F37  0021               	movlb	1	; select bank1
  7101  0F38  0554               	andwf	(sprintf@flag+1)^(0+128),w
  7102  0F39  0020               	movlb	0	; select bank0
  7103  0F3A  00E7               	movwf	??_sprintf+1
  7104  0F3B  0866               	movf	??_sprintf,w
  7105  0F3C  0467               	iorwf	??_sprintf+1,w
  7106  0F3D  1903               	btfsc	3,2
  7107  0F3E  2F44               	goto	l2446
  7108                           
  7109                           ;doprnt.c: 1346: width--;
  7110  0F3F  30FF               	movlw	255
  7111  0F40  0021               	movlb	1	; select bank1
  7112  0F41  07D5               	addwf	sprintf@width^(0+128),f
  7113  0F42  30FF               	movlw	255
  7114  0F43  3DD6               	addwfc	(sprintf@width+1)^(0+128),f
  7115  0F44                     l2446:	
  7116                           
  7117                           ;doprnt.c: 1348: if(flag & 0x4000) {
  7118  0F44  0021               	movlb	1	; select bank1
  7119  0F45  1F54               	btfss	(sprintf@flag+1)^(0+128),6
  7120  0F46  2F60               	goto	l2454
  7121                           
  7122                           ;doprnt.c: 1349: if(width > prec)
  7123  0F47  085B               	movf	(sprintf@prec+1)^(0+128),w
  7124  0F48  3A80               	xorlw	128
  7125  0F49  0020               	movlb	0	; select bank0
  7126  0F4A  00E6               	movwf	??_sprintf
  7127  0F4B  0021               	movlb	1	; select bank1
  7128  0F4C  0856               	movf	(sprintf@width+1)^(0+128),w
  7129  0F4D  3A80               	xorlw	128
  7130  0F4E  0020               	movlb	0	; select bank0
  7131  0F4F  0266               	subwf	??_sprintf,w
  7132  0F50  1D03               	skipz
  7133  0F51  2F55               	goto	u3805
  7134  0F52  0021               	movlb	1	; select bank1
  7135  0F53  0855               	movf	sprintf@width^(0+128),w
  7136  0F54  025A               	subwf	sprintf@prec^(0+128),w
  7137  0F55                     u3805:	
  7138  0F55  1803               	skipnc
  7139  0F56  2F5D               	goto	l2452
  7140                           
  7141                           ;doprnt.c: 1350: width -= prec;
  7142  0F57  0021               	movlb	1	; select bank1
  7143  0F58  085A               	movf	sprintf@prec^(0+128),w
  7144  0F59  02D5               	subwf	sprintf@width^(0+128),f
  7145  0F5A  085B               	movf	(sprintf@prec+1)^(0+128),w
  7146  0F5B  3BD6               	subwfb	(sprintf@width+1)^(0+128),f
  7147  0F5C  2F60               	goto	l2454
  7148  0F5D                     l2452:	
  7149                           
  7150                           ;doprnt.c: 1351: else
  7151                           ;doprnt.c: 1352: width = 0;
  7152  0F5D  0021               	movlb	1	; select bank1
  7153  0F5E  01D5               	clrf	sprintf@width^(0+128)
  7154  0F5F  01D6               	clrf	(sprintf@width+1)^(0+128)
  7155  0F60                     l2454:	
  7156                           
  7157                           ;doprnt.c: 1353: }
  7158                           ;doprnt.c: 1381: if(width > c)
  7159  0F60  085D               	movf	sprintf@c^(0+128),w
  7160  0F61  0020               	movlb	0	; select bank0
  7161  0F62  00E6               	movwf	??_sprintf
  7162  0F63  01E7               	clrf	??_sprintf+1
  7163  0F64  1BE6               	btfsc	??_sprintf,7
  7164  0F65  03E7               	decf	??_sprintf+1,f
  7165  0F66  0867               	movf	??_sprintf+1,w
  7166  0F67  3A80               	xorlw	128
  7167  0F68  00E8               	movwf	??_sprintf+2
  7168  0F69  0021               	movlb	1	; select bank1
  7169  0F6A  0856               	movf	(sprintf@width+1)^(0+128),w
  7170  0F6B  3A80               	xorlw	128
  7171  0F6C  0020               	movlb	0	; select bank0
  7172  0F6D  0268               	subwf	??_sprintf+2,w
  7173  0F6E  1D03               	skipz
  7174  0F6F  2F74               	goto	u3815
  7175  0F70  0021               	movlb	1	; select bank1
  7176  0F71  0855               	movf	sprintf@width^(0+128),w
  7177  0F72  0020               	movlb	0	; select bank0
  7178  0F73  0266               	subwf	??_sprintf,w
  7179  0F74                     u3815:	
  7180  0F74  1803               	skipnc
  7181  0F75  2F85               	goto	l2458
  7182                           
  7183                           ;doprnt.c: 1382: width -= c;
  7184  0F76  0021               	movlb	1	; select bank1
  7185  0F77  085D               	movf	sprintf@c^(0+128),w
  7186  0F78  0020               	movlb	0	; select bank0
  7187  0F79  00E6               	movwf	??_sprintf
  7188  0F7A  01E7               	clrf	??_sprintf+1
  7189  0F7B  1BE6               	btfsc	??_sprintf,7
  7190  0F7C  03E7               	decf	??_sprintf+1,f
  7191  0F7D  0866               	movf	??_sprintf,w
  7192  0F7E  0021               	movlb	1	; select bank1
  7193  0F7F  02D5               	subwf	sprintf@width^(0+128),f
  7194  0F80  0020               	movlb	0	; select bank0
  7195  0F81  0867               	movf	??_sprintf+1,w
  7196  0F82  0021               	movlb	1	; select bank1
  7197  0F83  3BD6               	subwfb	(sprintf@width+1)^(0+128),f
  7198  0F84  2F88               	goto	l2460
  7199  0F85                     l2458:	
  7200                           
  7201                           ;doprnt.c: 1383: else
  7202                           ;doprnt.c: 1384: width = 0;
  7203  0F85  0021               	movlb	1	; select bank1
  7204  0F86  01D5               	clrf	sprintf@width^(0+128)
  7205  0F87  01D6               	clrf	(sprintf@width+1)^(0+128)
  7206  0F88                     l2460:	
  7207                           
  7208                           ;doprnt.c: 1387: if(flag & 0x04) {
  7209  0F88  1D53               	btfss	sprintf@flag^(0+128),2
  7210  0F89  2FC0               	goto	l2476
  7211                           
  7212                           ;doprnt.c: 1392: if(flag & 0x03)
  7213  0F8A  3003               	movlw	3
  7214  0F8B  0553               	andwf	sprintf@flag^(0+128),w
  7215  0F8C  0020               	movlb	0	; select bank0
  7216  0F8D  00E6               	movwf	??_sprintf
  7217  0F8E  3000               	movlw	0
  7218  0F8F  0021               	movlb	1	; select bank1
  7219  0F90  0554               	andwf	(sprintf@flag+1)^(0+128),w
  7220  0F91  0020               	movlb	0	; select bank0
  7221  0F92  00E7               	movwf	??_sprintf+1
  7222  0F93  0866               	movf	??_sprintf,w
  7223  0F94  0467               	iorwf	??_sprintf+1,w
  7224  0F95  1903               	btfsc	3,2
  7225  0F96  2FA6               	goto	l2468
  7226                           
  7227                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  7228  0F97  302D               	movlw	45
  7229  0F98  00E6               	movwf	??_sprintf
  7230  0F99  0021               	movlb	1	; select bank1
  7231  0F9A  085C               	movf	sprintf@sp^(0+128),w
  7232  0F9B  0086               	movwf	6
  7233  0F9C  3001               	movlw	1	; select bank2/3
  7234  0F9D  0087               	movwf	7
  7235  0F9E  0020               	movlb	0	; select bank0
  7236  0F9F  0866               	movf	??_sprintf,w
  7237  0FA0  0081               	movwf	1
  7238  0FA1  3001               	movlw	1
  7239  0FA2  00E6               	movwf	??_sprintf
  7240  0FA3  0866               	movf	??_sprintf,w
  7241  0FA4  0021               	movlb	1	; select bank1
  7242  0FA5  07DC               	addwf	sprintf@sp^(0+128),f
  7243  0FA6                     l2468:	
  7244                           
  7245                           ;doprnt.c: 1415: if(width)
  7246  0FA6  0021               	movlb	1	; select bank1
  7247  0FA7                     L7:	
  7248  0FA7  0855               	movf	sprintf@width^(0+128),w
  7249  0FA8  0456               	iorwf	(sprintf@width+1)^(0+128),w
  7250  0FA9  1903               	btfsc	3,2
  7251  0FAA  2FF8               	goto	L18
  7252                           
  7253                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  7254                           
  7255                           ;doprnt.c: 1416: do
  7256  0FAB  3030               	movlw	48
  7257  0FAC  0020               	movlb	0	; select bank0
  7258  0FAD  00E6               	movwf	??_sprintf
  7259  0FAE  0021               	movlb	1	; select bank1
  7260  0FAF  085C               	movf	sprintf@sp^(0+128),w
  7261  0FB0  0086               	movwf	6
  7262  0FB1  3001               	movlw	1	; select bank2/3
  7263  0FB2  0087               	movwf	7
  7264  0FB3  0020               	movlb	0	; select bank0
  7265  0FB4  0866               	movf	??_sprintf,w
  7266  0FB5  0081               	movwf	1
  7267  0FB6  3001               	movlw	1
  7268  0FB7  00E6               	movwf	??_sprintf
  7269  0FB8  0866               	movf	??_sprintf,w
  7270  0FB9  0021               	movlb	1	; select bank1
  7271  0FBA  07DC               	addwf	sprintf@sp^(0+128),f
  7272                           
  7273                           ;doprnt.c: 1418: while(--width);
  7274  0FBB  30FF               	movlw	255
  7275  0FBC  07D5               	addwf	sprintf@width^(0+128),f
  7276  0FBD  30FF               	movlw	255
  7277  0FBE  3DD6               	addwfc	(sprintf@width+1)^(0+128),f
  7278  0FBF  2FA7               	goto	L7
  7279  0FC0                     l2476:	
  7280                           ;doprnt.c: 1420: } else
  7281                           
  7282                           
  7283                           ;doprnt.c: 1422: {
  7284                           ;doprnt.c: 1424: if(width
  7285                           ;doprnt.c: 1428: )
  7286  0FC0  0855               	movf	sprintf@width^(0+128),w
  7287  0FC1  0456               	iorwf	(sprintf@width+1)^(0+128),w
  7288  0FC2  1903               	btfsc	3,2
  7289  0FC3  2FDC               	goto	l2484
  7290  0FC4                     l2478:	
  7291                           ;doprnt.c: 1429: do
  7292                           
  7293                           
  7294                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  7295  0FC4  3020               	movlw	32
  7296  0FC5  0020               	movlb	0	; select bank0
  7297  0FC6  00E6               	movwf	??_sprintf
  7298  0FC7  0021               	movlb	1	; select bank1
  7299  0FC8  085C               	movf	sprintf@sp^(0+128),w
  7300  0FC9  0086               	movwf	6
  7301  0FCA  3001               	movlw	1	; select bank2/3
  7302  0FCB  0087               	movwf	7
  7303  0FCC  0020               	movlb	0	; select bank0
  7304  0FCD  0866               	movf	??_sprintf,w
  7305  0FCE  0081               	movwf	1
  7306  0FCF  3001               	movlw	1
  7307  0FD0  00E6               	movwf	??_sprintf
  7308  0FD1  0866               	movf	??_sprintf,w
  7309  0FD2  0021               	movlb	1	; select bank1
  7310  0FD3  07DC               	addwf	sprintf@sp^(0+128),f
  7311                           
  7312                           ;doprnt.c: 1431: while(--width);
  7313  0FD4  30FF               	movlw	255
  7314  0FD5  07D5               	addwf	sprintf@width^(0+128),f
  7315  0FD6  30FF               	movlw	255
  7316  0FD7  3DD6               	addwfc	(sprintf@width+1)^(0+128),f
  7317  0FD8  0855               	movf	sprintf@width^(0+128),w
  7318  0FD9  0456               	iorwf	(sprintf@width+1)^(0+128),w
  7319  0FDA  1D03               	btfss	3,2
  7320  0FDB  2FC4               	goto	l2478
  7321  0FDC                     l2484:	
  7322                           
  7323                           ;doprnt.c: 1438: if(flag & 0x03)
  7324  0FDC  3003               	movlw	3
  7325  0FDD  0553               	andwf	sprintf@flag^(0+128),w
  7326  0FDE  0020               	movlb	0	; select bank0
  7327  0FDF  00E6               	movwf	??_sprintf
  7328  0FE0  3000               	movlw	0
  7329  0FE1  0021               	movlb	1	; select bank1
  7330  0FE2  0554               	andwf	(sprintf@flag+1)^(0+128),w
  7331  0FE3  0020               	movlb	0	; select bank0
  7332  0FE4  00E7               	movwf	??_sprintf+1
  7333  0FE5  0866               	movf	??_sprintf,w
  7334  0FE6  0467               	iorwf	??_sprintf+1,w
  7335  0FE7  1903               	btfsc	3,2
  7336  0FE8  2FF8               	goto	L18
  7337                           
  7338                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  7339  0FE9  302D               	movlw	45
  7340  0FEA                     L6:	
  7341  0FEA  00E6               	movwf	??_sprintf
  7342  0FEB  0021               	movlb	1	; select bank1
  7343  0FEC  085C               	movf	sprintf@sp^(0+128),w
  7344  0FED  0086               	movwf	6
  7345  0FEE  3001               	movlw	1	; select bank2/3
  7346  0FEF  0087               	movwf	7
  7347  0FF0  0020               	movlb	0	; select bank0
  7348  0FF1  0866               	movf	??_sprintf,w
  7349  0FF2  0081               	movwf	1
  7350  0FF3  3001               	movlw	1
  7351  0FF4  00E6               	movwf	??_sprintf
  7352  0FF5  0866               	movf	??_sprintf,w
  7353  0FF6  0021               	movlb	1	; select bank1
  7354  0FF7  07DC               	addwf	sprintf@sp^(0+128),f
  7355  0FF8                     L18:	
  7356  0FF8  3184  2C40         	goto	l2490
  7357  0FFA                     l2492:	
  7358                           ;doprnt.c: 1469: }
  7359                           ;doprnt.c: 1533: }
  7360                           ;doprnt.c: 1535: alldone:
  7361                           
  7362                           
  7363                           ;doprnt.c: 1538: *sp = 0;
  7364  0FFA  085C               	movf	sprintf@sp^(0+128),w
  7365  0FFB  0086               	movwf	6
  7366  0FFC  3001               	movlw	1	; select bank2/3
  7367  0FFD  0087               	movwf	7
  7368  0FFE  0181               	clrf	1
  7369  0FFF  0008               	return
  7370  1000                     __end_of_sprintf:	
  7371                           ;doprnt.c: 1540: return 0;
  7372                           ;	Return value of _sprintf is never used
  7373                           


Data Sizes:
    Strings     6
    Constant    118
    Data        0
    BSS         87
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     78      78
    BANK1            80     32      69
    BANK2            80      0      50
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_1(CODE[6]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 50
		 -> buffer(BANK2[50]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 


Critical Paths under _main in COMMON

    _sprintf->___lldiv
    _sprintf->___lltoft
    _sprintf->___wmul
    _sprintf->__div_to_l_
    _scale->___wmul
    _fround->___wmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___ftsub->___lltoft
    ___lwtoft->___ftpack
    ___ftdiv->___lwtoft

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___ftdiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround

Critical Paths under _main in BANK1

    _main->_sprintf

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0   50854
                                             76 BANK0      2     2      0
                                             25 BANK1      7     7      0
                           _ADC_Init
                          _UART_Init
                         _UART_Write
                             ___bmul
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             41    36      5   39714
                                             65 BANK0     11     6      5
                                              0 BANK1     25    25      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               12     9      3    9293
                                             32 BANK0      9     6      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              17    14      3    9095
                                             32 BANK0     14    11      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2426
                                             12 COMMON     2     2      0
                                              4 BANK0      4     0      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    3768
                                             16 BANK0     16    10      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4    1250
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4    1360
                                              7 COMMON     5     1      4
                                              0 BANK0      4     4      0
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         16    10      6     409
                                              0 COMMON    10     4      6
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          20    14      6     552
                                              0 COMMON    14     8      6
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             6     2      4    1868
                                              8 COMMON     6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                             10     2      8     477
                                              0 COMMON    10     2      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     374
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     411
                                             41 BANK0     14    10      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3183
                                             59 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    3010
                                             46 BANK0     13     7      6
                             ___bmul (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3      98
                                              0 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     560
                                              0 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             4     1      3    1821
                                              8 COMMON     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             16    10      6    2238
                                              0 BANK0     16    10      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1746
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (1) ___bmul                                               4     3      1     144
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _UART_Write                                           1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Init
   _UART_Init
   _UART_Write
   ___bmul
   ___ftadd
     ___bmul (ARG)
     ___ftdiv (ARG)
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   ___ftdiv
     ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___ftdiv (ARG)
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftpack (ARG)
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___lwtoft
     ___ftpack
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___bmul (ARG)
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___bmul (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      D3       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     4E      4E       6       97.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50     20      45       8       86.3%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      32      10       62.5%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      D3      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sat Sep 09 15:08:32 2017

         ___bmul@product 0072                       l60 082A                       l37 1110  
           ___awdiv@sign 0021      ___wmul@multiplicand 0026             ___ftadd@exp1 005A  
           ___ftadd@exp2 0059             ___ftadd@sign 0058                      l111 0461  
                    l203 1176                      l132 062A                      l126 0509  
                    l412 168C                      l180 0F2D                      l178 0EF3  
                    l381 1321                      l438 1568                      l448 15E1  
                    l369 17F4                      l388 1334                      l389 133C  
                    l489 13C0             ___awmod@sign 0076                      wreg 0009  
            _sprintf$610 00C5             ___ftdiv@cntr 002A             ___ftdiv@sign 002F  
                   l2004 171E                     l2022 17B1                     l2014 1769  
                   l2120 13D1                     l2040 17EB                     l2032 17D0  
                   l2050 119F                     l2114 13B7                     l2106 139C  
                   l2130 125B                     l2042 17F7                     l2034 17DE  
                   l2116 13C3                     l2108 13AA                     l2140 1289  
                   l2132 1269                     l2300 065F                     l2220 0472  
                   l2212 045C                     l2054 11B5                     l2144 1294  
                   l2160 11F2                     l2312 06AA                     l2224 047F  
                   l2232 04B9                     l2154 11CC                     l2322 06DE  
                   l2218 0468                     l2156 11DA                     l2164 11FD  
                   l2172 0414                     l1700 12E2                     l2332 0732  
                   l2308 0696                     l2260 0535                     l2252 050B  
                   l2244 04CC                     l2502 113B                     l1630 130D  
                   l1622 12F7                     l2078 080C                     l2174 0424  
                   l2422 0ECB                     l2406 0DFB                     l2342 0792  
                   l2326 072C                     l2270 056A                     l2430 0EE4  
                   l2254 0521                     l2246 0504                     l2088 136C  
                   l1704 12EA                     l1720 1217                     l2360 07C3  
                   l1626 12FE                     l2522 1407                     l1802 16B0  
                   l1730 1229                     l2362 0D10                     l2346 07A4  
                   l2338 0769                     l1636 1326                     l1628 1308  
                   l2516 13F1                     l1812 16CB                     l1716 1210  
                   l1652 116F                     l1900 0B75                     l2460 0F88  
                   l2452 0F5D                     l2428 0EDF                     l1638 132E  
                   l1742 1246                     l1734 1235                     l1822 149A  
                   l1910 0BF1                     l2454 0F60                     l2446 0F44  
                   l2438 0F11                     l2294 0613                     l2286 05C6  
                   l2544 1461                     l2536 1448                     l1752 1615  
                   l1672 12A8                     l1728 121D                     l1840 14EB  
                   l2392 0DB7                     l2384 0D4F                     l2368 0D24  
                   l1762 162B                     l1690 12C7                     l1738 123E  
                   l1906 0BD4                     l2458 0F85                     l2386 0DA3  
                   l2490 0440                     l1780 1658                     l1756 161C  
                   l1852 1507                     l1844 14F3                     l1828 14B0  
                   l1924 0CF3                     l2484 0FDC                     l2468 0FA6  
                   l2476 0FC0                     l2492 0FFA                     l1782 1662  
                   l1774 1645                     l1678 12B3                     l1918 0C94  
                   l2478 0FC4                     l2398 0DD4                     l2582 08F9  
                   l2558 0828                     l1792 167E                     l1784 1667  
                   l1960 1589                     l1696 12D9                     l1688 12BB  
                   l1856 150F                     l1936 1131                     l2592 0933  
                   l2576 08BA                     l2498 1135                     l1794 1688  
                   l1786 166B                     l1946 1550                     l2594 094A  
                   l1980 15CB                     l1884 0A9F                     l1876 0A27  
                   l1798 169E                     l1968 15A3                     l1986 15D8  
                   l1978 15BD                     l1988 15E4                     l1998 1701  
                   STR_1 1876                     u2135 1343                     u2055 1303  
                   u3025 17D1                     u2225 12BE                     u2075 131C  
                   u2245 12C8                     u2325 1220                     u2165 1177  
                   u2095 1329                     u3135 1373                     u3055 17EC  
                   u2255 12D2                     u2175 117C                     u2505 1659  
                   u3305 11CF                     u2265 12DA                     u2345 122F  
                   u4025 08B8                     u3235 125E                     u2355 1236  
                   u4035 08F7                     u3165 139D                     u3325 11E8  
                   u2535 166C                     u3255 126A                     u3335 11F3  
                   u3265 127E                     u2705 1510                     u4057 0960  
                   u4067 1169                     u2475 1646                     u3195 13B8  
                   u3275 128A                     u3355 0419                     u2715 1516  
                   u2635 14BC                     u3515 0636                     u2565 167F  
                   u2645 14CC                     u3525 066B                     u2905 15BE  
                   u2665 14F4                     u2675 14FA                     u3555 0694  
                   u3475 057F                     u2845 158A                     u3805 0F55  
                   u3645 07CF                     u2935 15D9                     u2855 159A  
                   u3815 0F74                     u3655 0D30                     u2865 15A4  
                   u3585 075D                     u3755 0F07                     u3765 0F25  
                   u3685 0DC2                     u2975 176A                     u3695 0DD0  
                   u3945 1419                     u2985 1794                     u3955 1429  
                   u3965 1449                     u3975 1458                     u3985 1462  
                   _main 0822             ___ftpack@arg 0070             ___ftpack@exp 0073  
                   _temp 00BE                     fsr0h 0005                     fsr1h 0007  
                   indf0 0000                     fsr0l 0004                     indf1 0001  
                   fsr1l 0006                     btemp 007E         __end_of_ADC_Init 116D  
                   start 0402        ___bmul@multiplier 0073             ___ftmul@cntr 003E  
           ___ftmul@sign 003F             ___fttol@exp1 0056             ___fttol@lval 0052  
                  ?_main 0070          __end_of___awdiv 12EF          __end_of___ftadd 16E3  
        __end_of___awmod 124B          __end_of___ftdiv 1483          __end_of___ftneg 0410  
        __end_of___lldiv 129D          __end_of___ftmul 1537          ___awdiv@divisor 0077  
        __end_of___llmod 1206          __end_of___ftsub 0822          __end_of___fttol 13DA  
        ___awdiv@counter 0020                    _RCSTA 019D                    _TXREG 019A  
                  _TXSTA 019E             ___lltoft@exp 007D              ?_UART_Write 0070  
     __size_of_UART_Init 000E          __end_of_dpowers 1828                    _count 00C1  
                  _scale 0ACC          __end_of_isdigit 1133            ___ftpack@sign 0074  
                  main@c 00E3                    main@i 00E1                    status 0003  
                  wtemp0 007E          __end_of_sprintf 1000          __initialization 07EE  
           __end_of_main 0967                   ??_main 006C            ___fttol@sign1 0051  
   __size_of__tdiv_to_l_ 00B6         ___llmod@dividend 0074                   ?_scale 0040  
                 _ADRESH 009C                   _ADRESL 009B         ___awdiv@dividend 0079  
                 _ANSELC 018E         __end_of___ftpack 1353         __end_of___lltoft 0438  
       __end_of___lwtoft 1157                   _SPBRGH 019C                   _SPBRGL 019B  
       __end_of__powers_ 184F        __end_of_UART_Init 1125                   ___bmul 1133  
                 ___ftge 1189      __size_of_UART_Write 0008                   ___wmul 116D  
              ??___awdiv 007B                ??___ftadd 0054                ??___awmod 0074  
              ??___ftdiv 0026                ??___ftneg 0073                ??___lldiv 0078  
              ??___ftmul 0036                ??___llmod 0078                ??___ftsub 007E  
              ??___fttol 004D                   _buffer 0120                   _fround 0967  
       ___awdiv@quotient 0022          ___awmod@divisor 0070          ___awmod@counter 0075  
  ___ftmul@f3_as_product 003B                ??_isdigit 0070                ?_ADC_Init 0070  
              ??_sprintf 0066  __end_of__initialization 07FD               ___ftadd@f1 004E  
             ___ftadd@f2 0051               ___ftge@ff1 0070               ___ftge@ff2 0073  
             ___ftdiv@f1 0023               ___ftdiv@f2 0020               ___ftdiv@f3 002B  
             ___ftneg@f1 0070      ___bmul@multiplicand 0070               ___ftmul@f1 0030  
             ___ftmul@f2 0033               ___ftsub@f1 005E               ___ftsub@f2 005B  
             ___fttol@f1 0049           __pcstackCOMMON 0070               ___lltoft@c 0078  
          __end_of_scale 0D10               ___lwtoft@c 0078               __div_to_l_ 16E3  
             ??_ADC_Init 0070          __div_to_l_@exp1 0025          __div_to_l_@cntr 0024  
                ??_scale 0043          __div_to_l_@quot 0020             sprintf@width 00D5  
             __pbssBANK1 00A0               __pbssBANK2 0120            __div_to_l_@f1 0070  
          __div_to_l_@f2 0073               __pmaintext 0822                  ?___bmul 0070  
                ?___ftge 0070                  ?___wmul 0024                  _BAUDCON 019F  
                ?_fround 0040                ?___ftpack 0070                ?___lltoft 0078  
              ?___lwtoft 0078             ??_UART_Write 0070        __end_of__npowers_ 1876  
        __size_of___bmul 0011          __size_of___ftge 003B                  ___awdiv 129D  
                ___ftadd 15ED                  ___awmod 1206                  ___ftdiv 13DA  
                ___ftneg 0408                  ___lldiv 124B          __size_of___wmul 001C  
     __end_of_UART_Write 1117                  ___ftmul 1483                  ___llmod 11C4  
                ___ftsub 0804                  ___fttol 1353               _fround$607 004A  
             _fround$608 0047               ??___ftpack 0075          __size_of_fround 0165  
             ??___lltoft 007C                  __ptext1 0438                  __ptext2 0ACC  
                __ptext3 1125                  __ptext4 0967                  __ptext5 116D  
                __ptext6 1483                  __ptext7 1206                  __ptext8 129D  
                __ptext9 1537               ??___lwtoft 007B              ?__div_to_l_ 0070  
                _dpowers 1800                  _isdigit 1125         ___awmod@dividend 0072  
                _sprintf 0438                  clrloop0 110A     end_of_initialization 07FD  
        ___lldiv@divisor 0070          ___lldiv@counter 007D                  psplit$0 B0024  
           __pstringtext 1800           __tdiv_to_l_@f1 0070           __tdiv_to_l_@f2 0073  
              _UART_Init 1117            ??__tdiv_to_l_ 0076                _TRISAbits 008C  
              _TRISCbits 008E        __size_of_ADC_Init 0016              ___ftdiv@exp 002E  
    __size_of__div_to_l_ 011D              ___ftmul@exp 003A           __end_of___bmul 1144  
         __end_of___ftge 11C4           __end_of___wmul 1189               ?_UART_Init 0070  
      pnum$text1_split_1 0024           __end_of_fround 0ACC      start_initialization 07EE  
    __end_of__tdiv_to_l_ 15ED          ___llmod@divisor 0070          ___llmod@counter 0079  
               ??___bmul 0071                 ??___ftge 0076                 ??___wmul 007C  
               ??_fround 0043            sprintf@tmpval 00CD               fround@prec 004D  
      __size_of___ftpack 0064        __size_of___lltoft 0028                ___latbits 0002  
      __size_of___lwtoft 0013            __pcstackBANK0 0020            __pcstackBANK1 00C5  
              _adc_value 00C3              sprintf@flag 00D3              sprintf@fval 00D7  
            sprintf@prec 00DA                 ?___awdiv 0077                 ?___ftadd 004E  
               ?___awmod 0070                 ?___ftdiv 0020                 ?___ftneg 0070  
               ?___lldiv 0070                 ?___ftmul 0030                 ?___llmod 0070  
               ?___ftsub 005B                __npowers_ 184F                 ?___fttol 0049  
            ??_UART_Init 0070              __tdiv_to_l_ 1537             ??__div_to_l_ 0076  
               ?_isdigit 0070                 _ADC_Init 1157                _scale$609 0045  
               ?_sprintf 0061           __size_of_scale 0244           ___wmul@product 007C  
              clear_ram0 1109                 _PIR1bits 0011       __end_of__div_to_l_ 1800  
             _ADCON0bits 009D               _ADCON1bits 009E        ___wmul@multiplier 0024  
       __size_of___awdiv 0052         __size_of___ftadd 00F6         __size_of___awmod 0045  
       __size_of___ftdiv 00A9         __size_of___ftneg 0008         __size_of___lldiv 0052  
       __size_of___ftmul 00B4         __size_of___llmod 0042         __size_of___ftsub 001E  
       __size_of___fttol 0087                 ___ftpack 12EF                 ___lltoft 0410  
            _isdigit$436 0070               _ANSELAbits 018C                 ___lwtoft 1144  
             sprintf@exp 00D1               sprintf@val 00C9         __size_of_isdigit 000E  
               _main$606 00DE                 __ptext10 16E3                 __ptext11 0410  
               __ptext20 13DA                 __ptext12 11C4                 __ptext21 12EF  
               __ptext13 124B                 __ptext22 1133                 __ptext14 1353  
               __ptext23 110F                 __ptext15 0804                 __ptext24 1117  
               __ptext16 15ED                 __ptext25 1157                 __ptext17 0408  
               __ptext18 1189                 __ptext19 1144                 __powers_ 1828  
       __size_of_sprintf 0BC8            __size_of_main 0145                pnum$text1 000B  
               _temp_buf 00A0                 isdigit@c 0071                 scale@scl 0048  
              sprintf@ap 00C8         __tdiv_to_l_@exp1 0025         __tdiv_to_l_@cntr 0024  
              sprintf@sp 00DC         __tdiv_to_l_@quot 0020         ___lldiv@dividend 0074  
           ?__tdiv_to_l_ 0070                 sprintf@c 00DD                 sprintf@f 0061  
       ___lldiv@quotient 0079         UART_Write@txData 0070               _UART_Write 110F  
